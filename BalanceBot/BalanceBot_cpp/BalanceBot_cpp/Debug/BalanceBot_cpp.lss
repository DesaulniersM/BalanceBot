
BalanceBot_cpp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  0000121e  000012d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000121e  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000060  00800106  00800106  000012d8  2**0
                  ALLOC
  3 .eeprom       00000004  00810000  00810000  000012d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  000012dc  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000130c  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000220  00000000  00000000  00001350  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000021dc  00000000  00000000  00001570  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001197  00000000  00000000  0000374c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001117  00000000  00000000  000048e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000474  00000000  00000000  000059fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000c70  00000000  00000000  00005e70  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000bea  00000000  00000000  00006ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000140  00000000  00000000  000076ca  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6d 00 	jmp	0xda	; 0xda <__ctors_end>
       4:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
       8:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
       c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      10:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      14:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      18:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      1c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      20:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      24:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      28:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      2c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      30:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      34:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      38:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      3c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      40:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      44:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      48:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      4c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      50:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      54:	0c 94 4c 05 	jmp	0xa98	; 0xa98 <__vector_21>
      58:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      5c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      60:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      64:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      68:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      6c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      70:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      74:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      78:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      7c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      80:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      84:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      88:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      8c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      90:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      94:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      98:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      9c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      a0:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      a4:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      a8:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      ac:	08 4a       	sbci	r16, 0xA8	; 168
      ae:	d7 3b       	cpi	r29, 0xB7	; 183
      b0:	3b ce       	rjmp	.-906    	; 0xfffffd28 <__eeprom_end+0xff7efd24>
      b2:	01 6e       	ori	r16, 0xE1	; 225
      b4:	84 bc       	out	0x24, r8	; 36
      b6:	bf fd       	.word	0xfdbf	; ????
      b8:	c1 2f       	mov	r28, r17
      ba:	3d 6c       	ori	r19, 0xCD	; 205
      bc:	74 31       	cpi	r23, 0x14	; 20
      be:	9a bd       	out	0x2a, r25	; 42
      c0:	56 83       	std	Z+6, r21	; 0x06
      c2:	3d da       	rcall	.-2950   	; 0xfffff53e <__eeprom_end+0xff7ef53a>
      c4:	3d 00       	.word	0x003d	; ????
      c6:	c7 7f       	andi	r28, 0xF7	; 247
      c8:	11 be       	out	0x31, r1	; 49
      ca:	d9 e4       	ldi	r29, 0x49	; 73
      cc:	bb 4c       	sbci	r27, 0xCB	; 203
      ce:	3e 91       	ld	r19, -X
      d0:	6b aa       	std	Y+51, r6	; 0x33
      d2:	aa be       	out	0x3a, r10	; 58
      d4:	00 00       	nop
      d6:	00 80       	ld	r0, Z
      d8:	3f 00       	.word	0x003f	; ????

000000da <__ctors_end>:
      da:	11 24       	eor	r1, r1
      dc:	1f be       	out	0x3f, r1	; 63
      de:	cf ef       	ldi	r28, 0xFF	; 255
      e0:	da e0       	ldi	r29, 0x0A	; 10
      e2:	de bf       	out	0x3e, r29	; 62
      e4:	cd bf       	out	0x3d, r28	; 61

000000e6 <__do_copy_data>:
      e6:	11 e0       	ldi	r17, 0x01	; 1
      e8:	a0 e0       	ldi	r26, 0x00	; 0
      ea:	b1 e0       	ldi	r27, 0x01	; 1
      ec:	ee e1       	ldi	r30, 0x1E	; 30
      ee:	f2 e1       	ldi	r31, 0x12	; 18
      f0:	02 c0       	rjmp	.+4      	; 0xf6 <__do_copy_data+0x10>
      f2:	05 90       	lpm	r0, Z+
      f4:	0d 92       	st	X+, r0
      f6:	a6 30       	cpi	r26, 0x06	; 6
      f8:	b1 07       	cpc	r27, r17
      fa:	d9 f7       	brne	.-10     	; 0xf2 <__do_copy_data+0xc>

000000fc <__do_clear_bss>:
      fc:	21 e0       	ldi	r18, 0x01	; 1
      fe:	a6 e0       	ldi	r26, 0x06	; 6
     100:	b1 e0       	ldi	r27, 0x01	; 1
     102:	01 c0       	rjmp	.+2      	; 0x106 <.do_clear_bss_start>

00000104 <.do_clear_bss_loop>:
     104:	1d 92       	st	X+, r1

00000106 <.do_clear_bss_start>:
     106:	a6 36       	cpi	r26, 0x66	; 102
     108:	b2 07       	cpc	r27, r18
     10a:	e1 f7       	brne	.-8      	; 0x104 <.do_clear_bss_loop>
     10c:	0e 94 84 03 	call	0x708	; 0x708 <main>
     110:	0c 94 0d 09 	jmp	0x121a	; 0x121a <_exit>

00000114 <__bad_interrupt>:
     114:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000118 <_Z18I2C_WriteConfigurehh>:
		
	}
	}

//Writes val to Reg
void I2C_WriteConfigure(uint8_t reg, uint8_t val){
     118:	cf 93       	push	r28
     11a:	df 93       	push	r29
     11c:	d8 2f       	mov	r29, r24
     11e:	c6 2f       	mov	r28, r22
			i2c_start( (MPU6050_ADDRESS_AD0_LOW<<1) + I2C_WRITE);
     120:	80 ed       	ldi	r24, 0xD0	; 208
     122:	0e 94 78 05 	call	0xaf0	; 0xaf0 <_Z9i2c_starth>
			i2c_write(reg); 
     126:	8d 2f       	mov	r24, r29
     128:	0e 94 d3 05 	call	0xba6	; 0xba6 <_Z9i2c_writeh>
			i2c_write(val); 
     12c:	8c 2f       	mov	r24, r28
     12e:	0e 94 d3 05 	call	0xba6	; 0xba6 <_Z9i2c_writeh>
			i2c_stop();      // set stop condition = release bus
     132:	0e 94 ca 05 	call	0xb94	; 0xb94 <_Z8i2c_stopv>
	}
     136:	df 91       	pop	r29
     138:	cf 91       	pop	r28
     13a:	08 95       	ret

0000013c <_Z12Init_MPU6050R11MPU6050Vals>:
 */ 

#include "I2C_MPU6050.h"

// Configure MPU6050 settings
void Init_MPU6050(struct MPU6050Vals& MPU6050){
     13c:	cf 93       	push	r28
     13e:	df 93       	push	r29
     140:	ec 01       	movw	r28, r24
	i2c_init();     // init I2C interface
     142:	0e 94 72 05 	call	0xae4	; 0xae4 <_Z8i2c_initv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     146:	2f ef       	ldi	r18, 0xFF	; 255
     148:	83 ec       	ldi	r24, 0xC3	; 195
     14a:	99 e0       	ldi	r25, 0x09	; 9
     14c:	21 50       	subi	r18, 0x01	; 1
     14e:	80 40       	sbci	r24, 0x00	; 0
     150:	90 40       	sbci	r25, 0x00	; 0
     152:	e1 f7       	brne	.-8      	; 0x14c <_Z12Init_MPU6050R11MPU6050Vals+0x10>
     154:	00 c0       	rjmp	.+0      	; 0x156 <_Z12Init_MPU6050R11MPU6050Vals+0x1a>
     156:	00 00       	nop
	_delay_ms(200);  // Wait for 200 ms.
	//
	MPU6050.tau = 0.007; //0.75
     158:	82 e4       	ldi	r24, 0x42	; 66
     15a:	90 e6       	ldi	r25, 0x60	; 96
     15c:	a5 ee       	ldi	r26, 0xE5	; 229
     15e:	bb e3       	ldi	r27, 0x3B	; 59
     160:	8e a3       	std	Y+38, r24	; 0x26
     162:	9f a3       	std	Y+39, r25	; 0x27
     164:	a8 a7       	std	Y+40, r26	; 0x28
     166:	b9 a7       	std	Y+41, r27	; 0x29
	float ControlUpdatePeriod = .001;		// 1kHz Max as per MPU6050 sampling limitations
	MPU6050.alpha = ((MPU6050.tau) / (MPU6050.tau + ControlUpdatePeriod));
     168:	80 e0       	ldi	r24, 0x00	; 0
     16a:	90 e0       	ldi	r25, 0x00	; 0
     16c:	a0 e6       	ldi	r26, 0x60	; 96
     16e:	bf e3       	ldi	r27, 0x3F	; 63
     170:	8a a3       	std	Y+34, r24	; 0x22
     172:	9b a3       	std	Y+35, r25	; 0x23
     174:	ac a3       	std	Y+36, r26	; 0x24
     176:	bd a3       	std	Y+37, r27	; 0x25
	MPU6050.PreviousTheta = 0;
     178:	1e 8a       	std	Y+22, r1	; 0x16
     17a:	1f 8a       	std	Y+23, r1	; 0x17
     17c:	18 8e       	std	Y+24, r1	; 0x18
     17e:	19 8e       	std	Y+25, r1	; 0x19
	MPU6050.dt = ControlUpdatePeriod;
     180:	8f e6       	ldi	r24, 0x6F	; 111
     182:	92 e1       	ldi	r25, 0x12	; 18
     184:	a3 e8       	ldi	r26, 0x83	; 131
     186:	ba e3       	ldi	r27, 0x3A	; 58
     188:	8e 8f       	std	Y+30, r24	; 0x1e
     18a:	9f 8f       	std	Y+31, r25	; 0x1f
     18c:	a8 a3       	std	Y+32, r26	; 0x20
     18e:	b9 a3       	std	Y+33, r27	; 0x21
	//
	unsigned char ret = i2c_start((MPU6050_ADDRESS_AD0_LOW<<1) + I2C_WRITE);       // set device address and write mode
     190:	80 ed       	ldi	r24, 0xD0	; 208
     192:	0e 94 78 05 	call	0xaf0	; 0xaf0 <_Z9i2c_starth>
	if ( ret )
     196:	88 23       	and	r24, r24
     198:	21 f0       	breq	.+8      	; 0x1a2 <_Z12Init_MPU6050R11MPU6050Vals+0x66>
	{
		/* failed to issue start condition, possibly no device found */
		i2c_stop();
     19a:	0e 94 ca 05 	call	0xb94	; 0xb94 <_Z8i2c_stopv>
		LED_ON(PORTF, DEBUG_LED4);    // Turn on the red LED immediately to signal the read is not ok
     19e:	88 9a       	sbi	0x11, 0	; 17
     1a0:	ff cf       	rjmp	.-2      	; 0x1a0 <_Z12Init_MPU6050R11MPU6050Vals+0x64>
		while(1) {;;}  // lock program here as sensor init failed
	}else{
		/* issuing start condition ok, device accessible */
		i2c_write(MPU6050_RA_PWR_MGMT_1); // go to register 107
     1a2:	8b e6       	ldi	r24, 0x6B	; 107
     1a4:	0e 94 d3 05 	call	0xba6	; 0xba6 <_Z9i2c_writeh>
		i2c_write(0x00); // set value to 0000 0000 and wake up sensor
     1a8:	80 e0       	ldi	r24, 0x00	; 0
     1aa:	0e 94 d3 05 	call	0xba6	; 0xba6 <_Z9i2c_writeh>
		i2c_stop();      // set stop condition = release bus
     1ae:	0e 94 ca 05 	call	0xb94	; 0xb94 <_Z8i2c_stopv>
		
		I2C_WriteConfigure(MPU6050_RA_SMPLRT_DIV, 0x08); // set value to 0000 1000 for 1000 Hz
     1b2:	68 e0       	ldi	r22, 0x08	; 8
     1b4:	89 e1       	ldi	r24, 0x19	; 25
     1b6:	0e 94 8c 00 	call	0x118	; 0x118 <_Z18I2C_WriteConfigurehh>
		I2C_WriteConfigure(MPU6050_RA_ACCEL_CONFIG, 0x08); // set value to 0000 1000 for 4g, normal line tension is 2,7g
     1ba:	68 e0       	ldi	r22, 0x08	; 8
     1bc:	8c e1       	ldi	r24, 0x1C	; 28
     1be:	0e 94 8c 00 	call	0x118	; 0x118 <_Z18I2C_WriteConfigurehh>
		I2C_WriteConfigure(MPU6050_RA_GYRO_CONFIG, 0x10); // set value to 0001 0000 for 1000 (deg/s) (Motor Max RPM is 100)
     1c2:	60 e1       	ldi	r22, 0x10	; 16
     1c4:	8b e1       	ldi	r24, 0x1B	; 27
     1c6:	0e 94 8c 00 	call	0x118	; 0x118 <_Z18I2C_WriteConfigurehh>
		I2C_WriteConfigure(MPU6050_RA_FIFO_EN, 0xF8); // set value to 1111 1000 for all sensors not slave
     1ca:	68 ef       	ldi	r22, 0xF8	; 248
     1cc:	83 e2       	ldi	r24, 0x23	; 35
     1ce:	0e 94 8c 00 	call	0x118	; 0x118 <_Z18I2C_WriteConfigurehh>
		I2C_WriteConfigure(MPU6050_RA_USER_CTRL,0x40); // set value to 0100 0000 FIFO enable
     1d2:	60 e4       	ldi	r22, 0x40	; 64
     1d4:	8a e6       	ldi	r24, 0x6A	; 106
     1d6:	0e 94 8c 00 	call	0x118	; 0x118 <_Z18I2C_WriteConfigurehh>
		
	}
	}
     1da:	df 91       	pop	r29
     1dc:	cf 91       	pop	r28
     1de:	08 95       	ret

000001e0 <_Z18I2C_ReadSensorValsR11MPU6050Vals>:
			i2c_write(reg); 
			i2c_write(val); 
			i2c_stop();      // set stop condition = release bus
	}

void I2C_ReadSensorVals(struct MPU6050Vals& MPU6050){
     1e0:	0f 93       	push	r16
     1e2:	1f 93       	push	r17
     1e4:	cf 93       	push	r28
     1e6:	df 93       	push	r29
     1e8:	8c 01       	movw	r16, r24

//Read X accel
i2c_start_wait((MPU6050_ADDRESS_AD0_LOW<<1) + I2C_WRITE);    // set device address and write mode
     1ea:	80 ed       	ldi	r24, 0xD0	; 208
     1ec:	0e 94 9f 05 	call	0xb3e	; 0xb3e <_Z14i2c_start_waith>
i2c_write(MPU6050_RA_ACCEL_XOUT_H);                      // ACCEL_XOUT
     1f0:	8b e3       	ldi	r24, 0x3B	; 59
     1f2:	0e 94 d3 05 	call	0xba6	; 0xba6 <_Z9i2c_writeh>
i2c_rep_start((MPU6050_ADDRESS_AD0_LOW<<1) + I2C_READ);      // set device address and read mode
     1f6:	81 ed       	ldi	r24, 0xD1	; 209
     1f8:	0e 94 c7 05 	call	0xb8e	; 0xb8e <_Z13i2c_rep_starth>
MPU6050.rawXaccel = i2c_readAck();               // read one intermediate byte
     1fc:	0e 94 e5 05 	call	0xbca	; 0xbca <_Z11i2c_readAckv>
     200:	c8 2f       	mov	r28, r24
     202:	d0 e0       	ldi	r29, 0x00	; 0
     204:	f8 01       	movw	r30, r16
     206:	d1 83       	std	Z+1, r29	; 0x01
     208:	c0 83       	st	Z, r28
MPU6050.rawXaccel = (MPU6050.rawXaccel<<8) | i2c_readNak(); // read last byte
     20a:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <_Z11i2c_readNakv>
     20e:	dc 2f       	mov	r29, r28
     210:	cc 27       	eor	r28, r28
     212:	c8 2b       	or	r28, r24
     214:	f8 01       	movw	r30, r16
     216:	d1 83       	std	Z+1, r29	; 0x01
     218:	c0 83       	st	Z, r28
i2c_stop();
     21a:	0e 94 ca 05 	call	0xb94	; 0xb94 <_Z8i2c_stopv>

//Read Z accel
i2c_start_wait((MPU6050_ADDRESS_AD0_LOW<<1) + I2C_WRITE);    // set device address and write mode
     21e:	80 ed       	ldi	r24, 0xD0	; 208
     220:	0e 94 9f 05 	call	0xb3e	; 0xb3e <_Z14i2c_start_waith>
i2c_write(MPU6050_RA_ACCEL_ZOUT_H);                      // ACCEL_ZOUT
     224:	8f e3       	ldi	r24, 0x3F	; 63
     226:	0e 94 d3 05 	call	0xba6	; 0xba6 <_Z9i2c_writeh>
i2c_rep_start((MPU6050_ADDRESS_AD0_LOW<<1) + I2C_READ);      // set device address and read mode
     22a:	81 ed       	ldi	r24, 0xD1	; 209
     22c:	0e 94 c7 05 	call	0xb8e	; 0xb8e <_Z13i2c_rep_starth>
MPU6050.rawZaccel = i2c_readAck();               // read one intermediate byte
     230:	0e 94 e5 05 	call	0xbca	; 0xbca <_Z11i2c_readAckv>
     234:	c8 2f       	mov	r28, r24
     236:	d0 e0       	ldi	r29, 0x00	; 0
     238:	f8 01       	movw	r30, r16
     23a:	d3 83       	std	Z+3, r29	; 0x03
     23c:	c2 83       	std	Z+2, r28	; 0x02
MPU6050.rawZaccel = (MPU6050.rawZaccel<<8) | i2c_readNak(); // read last byte
     23e:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <_Z11i2c_readNakv>
     242:	dc 2f       	mov	r29, r28
     244:	cc 27       	eor	r28, r28
     246:	c8 2b       	or	r28, r24
     248:	f8 01       	movw	r30, r16
     24a:	d3 83       	std	Z+3, r29	; 0x03
     24c:	c2 83       	std	Z+2, r28	; 0x02
i2c_stop();
     24e:	0e 94 ca 05 	call	0xb94	; 0xb94 <_Z8i2c_stopv>


//Read Y gyro

i2c_start_wait((MPU6050_ADDRESS_AD0_LOW<<1) + I2C_WRITE);    // set device address and write mode
     252:	80 ed       	ldi	r24, 0xD0	; 208
     254:	0e 94 9f 05 	call	0xb3e	; 0xb3e <_Z14i2c_start_waith>
i2c_write(MPU6050_RA_GYRO_YOUT_H);                      // GYRO_YOUT
     258:	85 e4       	ldi	r24, 0x45	; 69
     25a:	0e 94 d3 05 	call	0xba6	; 0xba6 <_Z9i2c_writeh>
i2c_rep_start((MPU6050_ADDRESS_AD0_LOW<<1) + I2C_READ);      // set device address and read mode
     25e:	81 ed       	ldi	r24, 0xD1	; 209
     260:	0e 94 c7 05 	call	0xb8e	; 0xb8e <_Z13i2c_rep_starth>
MPU6050.rawYGyro = i2c_readAck();               // read one intermediate byte
     264:	0e 94 e5 05 	call	0xbca	; 0xbca <_Z11i2c_readAckv>
     268:	c8 2f       	mov	r28, r24
     26a:	d0 e0       	ldi	r29, 0x00	; 0
     26c:	f8 01       	movw	r30, r16
     26e:	d5 83       	std	Z+5, r29	; 0x05
     270:	c4 83       	std	Z+4, r28	; 0x04
MPU6050.rawYGyro = (MPU6050.rawYGyro<<8) | i2c_readNak(); // read last byte
     272:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <_Z11i2c_readNakv>
     276:	dc 2f       	mov	r29, r28
     278:	cc 27       	eor	r28, r28
     27a:	c8 2b       	or	r28, r24
     27c:	f8 01       	movw	r30, r16
     27e:	d5 83       	std	Z+5, r29	; 0x05
     280:	c4 83       	std	Z+4, r28	; 0x04
i2c_stop();
     282:	0e 94 ca 05 	call	0xb94	; 0xb94 <_Z8i2c_stopv>
}
     286:	df 91       	pop	r29
     288:	cf 91       	pop	r28
     28a:	1f 91       	pop	r17
     28c:	0f 91       	pop	r16
     28e:	08 95       	ret

00000290 <_Z17ConvertSensorValsR11MPU6050Vals>:

//Convert Sensor Values//Convert Sensor Values
void ConvertSensorVals(struct MPU6050Vals& MPU6050){
     290:	4f 92       	push	r4
     292:	5f 92       	push	r5
     294:	6f 92       	push	r6
     296:	7f 92       	push	r7
     298:	8f 92       	push	r8
     29a:	9f 92       	push	r9
     29c:	af 92       	push	r10
     29e:	bf 92       	push	r11
     2a0:	cf 92       	push	r12
     2a2:	df 92       	push	r13
     2a4:	ef 92       	push	r14
     2a6:	ff 92       	push	r15
     2a8:	cf 93       	push	r28
     2aa:	df 93       	push	r29
     2ac:	ec 01       	movw	r28, r24
	float RAD_TO_DEG = 180.0 / M_PI;
	
	MPU6050.Xaccel = (((int16_t) MPU6050.rawXaccel) / 32767.0) * 4.0;
     2ae:	68 81       	ld	r22, Y
     2b0:	79 81       	ldd	r23, Y+1	; 0x01
     2b2:	07 2e       	mov	r0, r23
     2b4:	00 0c       	add	r0, r0
     2b6:	88 0b       	sbc	r24, r24
     2b8:	99 0b       	sbc	r25, r25
     2ba:	0e 94 89 07 	call	0xf12	; 0xf12 <__floatsisf>
     2be:	20 e0       	ldi	r18, 0x00	; 0
     2c0:	3e ef       	ldi	r19, 0xFE	; 254
     2c2:	4f ef       	ldi	r20, 0xFF	; 255
     2c4:	56 e4       	ldi	r21, 0x46	; 70
     2c6:	0e 94 df 06 	call	0xdbe	; 0xdbe <__divsf3>
     2ca:	20 e0       	ldi	r18, 0x00	; 0
     2cc:	30 e0       	ldi	r19, 0x00	; 0
     2ce:	40 e8       	ldi	r20, 0x80	; 128
     2d0:	50 e4       	ldi	r21, 0x40	; 64
     2d2:	0e 94 68 08 	call	0x10d0	; 0x10d0 <__mulsf3>
     2d6:	6b 01       	movw	r12, r22
     2d8:	7c 01       	movw	r14, r24
     2da:	6e 83       	std	Y+6, r22	; 0x06
     2dc:	7f 83       	std	Y+7, r23	; 0x07
     2de:	88 87       	std	Y+8, r24	; 0x08
     2e0:	99 87       	std	Y+9, r25	; 0x09
	MPU6050.Zaccel = (((int16_t) MPU6050.rawZaccel) / 32767.0) * 4.0;
     2e2:	6a 81       	ldd	r22, Y+2	; 0x02
     2e4:	7b 81       	ldd	r23, Y+3	; 0x03
     2e6:	07 2e       	mov	r0, r23
     2e8:	00 0c       	add	r0, r0
     2ea:	88 0b       	sbc	r24, r24
     2ec:	99 0b       	sbc	r25, r25
     2ee:	0e 94 89 07 	call	0xf12	; 0xf12 <__floatsisf>
     2f2:	20 e0       	ldi	r18, 0x00	; 0
     2f4:	3e ef       	ldi	r19, 0xFE	; 254
     2f6:	4f ef       	ldi	r20, 0xFF	; 255
     2f8:	56 e4       	ldi	r21, 0x46	; 70
     2fa:	0e 94 df 06 	call	0xdbe	; 0xdbe <__divsf3>
     2fe:	20 e0       	ldi	r18, 0x00	; 0
     300:	30 e0       	ldi	r19, 0x00	; 0
     302:	40 e8       	ldi	r20, 0x80	; 128
     304:	50 e4       	ldi	r21, 0x40	; 64
     306:	0e 94 68 08 	call	0x10d0	; 0x10d0 <__mulsf3>
     30a:	4b 01       	movw	r8, r22
     30c:	5c 01       	movw	r10, r24
     30e:	6a 87       	std	Y+10, r22	; 0x0a
     310:	7b 87       	std	Y+11, r23	; 0x0b
     312:	8c 87       	std	Y+12, r24	; 0x0c
     314:	9d 87       	std	Y+13, r25	; 0x0d
	
	MPU6050.YGyro = (((int16_t) MPU6050.rawYGyro) / 32767.0) * 1000.0;
     316:	6c 81       	ldd	r22, Y+4	; 0x04
     318:	7d 81       	ldd	r23, Y+5	; 0x05
     31a:	07 2e       	mov	r0, r23
     31c:	00 0c       	add	r0, r0
     31e:	88 0b       	sbc	r24, r24
     320:	99 0b       	sbc	r25, r25
     322:	0e 94 89 07 	call	0xf12	; 0xf12 <__floatsisf>
     326:	20 e0       	ldi	r18, 0x00	; 0
     328:	3e ef       	ldi	r19, 0xFE	; 254
     32a:	4f ef       	ldi	r20, 0xFF	; 255
     32c:	56 e4       	ldi	r21, 0x46	; 70
     32e:	0e 94 df 06 	call	0xdbe	; 0xdbe <__divsf3>
     332:	20 e0       	ldi	r18, 0x00	; 0
     334:	30 e0       	ldi	r19, 0x00	; 0
     336:	4a e7       	ldi	r20, 0x7A	; 122
     338:	54 e4       	ldi	r21, 0x44	; 68
     33a:	0e 94 68 08 	call	0x10d0	; 0x10d0 <__mulsf3>
     33e:	6e 87       	std	Y+14, r22	; 0x0e
     340:	7f 87       	std	Y+15, r23	; 0x0f
     342:	88 8b       	std	Y+16, r24	; 0x10
     344:	99 8b       	std	Y+17, r25	; 0x11
	MPU6050.GyroTheta = MPU6050.YGyro * (1.0 / RAD_TO_DEG) * MPU6050.dt;
     346:	26 e3       	ldi	r18, 0x36	; 54
     348:	3a ef       	ldi	r19, 0xFA	; 250
     34a:	4e e8       	ldi	r20, 0x8E	; 142
     34c:	5c e3       	ldi	r21, 0x3C	; 60
     34e:	0e 94 68 08 	call	0x10d0	; 0x10d0 <__mulsf3>
     352:	2e 8d       	ldd	r18, Y+30	; 0x1e
     354:	3f 8d       	ldd	r19, Y+31	; 0x1f
     356:	48 a1       	ldd	r20, Y+32	; 0x20
     358:	59 a1       	ldd	r21, Y+33	; 0x21
     35a:	0e 94 68 08 	call	0x10d0	; 0x10d0 <__mulsf3>
     35e:	2b 01       	movw	r4, r22
     360:	3c 01       	movw	r6, r24
     362:	6a 8f       	std	Y+26, r22	; 0x1a
     364:	7b 8f       	std	Y+27, r23	; 0x1b
     366:	8c 8f       	std	Y+28, r24	; 0x1c
     368:	9d 8f       	std	Y+29, r25	; 0x1d
	
	MPU6050.theta = atan2((double) MPU6050.Xaccel, (double) MPU6050.Zaccel);
     36a:	a5 01       	movw	r20, r10
     36c:	94 01       	movw	r18, r8
     36e:	c7 01       	movw	r24, r14
     370:	b6 01       	movw	r22, r12
     372:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <atan2>
     376:	6b 01       	movw	r12, r22
     378:	7c 01       	movw	r14, r24
     37a:	6a 8b       	std	Y+18, r22	; 0x12
     37c:	7b 8b       	std	Y+19, r23	; 0x13
     37e:	8c 8b       	std	Y+20, r24	; 0x14
     380:	9d 8b       	std	Y+21, r25	; 0x15
	
	MPU6050.CurrentTheta = (MPU6050.alpha * (MPU6050.PreviousTheta + MPU6050.GyroTheta )) + ((1 - MPU6050.alpha)*(MPU6050.theta));
     382:	8a a0       	ldd	r8, Y+34	; 0x22
     384:	9b a0       	ldd	r9, Y+35	; 0x23
     386:	ac a0       	ldd	r10, Y+36	; 0x24
     388:	bd a0       	ldd	r11, Y+37	; 0x25
     38a:	2e 89       	ldd	r18, Y+22	; 0x16
     38c:	3f 89       	ldd	r19, Y+23	; 0x17
     38e:	48 8d       	ldd	r20, Y+24	; 0x18
     390:	59 8d       	ldd	r21, Y+25	; 0x19
     392:	c3 01       	movw	r24, r6
     394:	b2 01       	movw	r22, r4
     396:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <__addsf3>
     39a:	a5 01       	movw	r20, r10
     39c:	94 01       	movw	r18, r8
     39e:	0e 94 68 08 	call	0x10d0	; 0x10d0 <__mulsf3>
     3a2:	2b 01       	movw	r4, r22
     3a4:	3c 01       	movw	r6, r24
     3a6:	a5 01       	movw	r20, r10
     3a8:	94 01       	movw	r18, r8
     3aa:	60 e0       	ldi	r22, 0x00	; 0
     3ac:	70 e0       	ldi	r23, 0x00	; 0
     3ae:	80 e8       	ldi	r24, 0x80	; 128
     3b0:	9f e3       	ldi	r25, 0x3F	; 63
     3b2:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__subsf3>
     3b6:	a7 01       	movw	r20, r14
     3b8:	96 01       	movw	r18, r12
     3ba:	0e 94 68 08 	call	0x10d0	; 0x10d0 <__mulsf3>
     3be:	9b 01       	movw	r18, r22
     3c0:	ac 01       	movw	r20, r24
     3c2:	c3 01       	movw	r24, r6
     3c4:	b2 01       	movw	r22, r4
     3c6:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <__addsf3>
     3ca:	6a a7       	std	Y+42, r22	; 0x2a
     3cc:	7b a7       	std	Y+43, r23	; 0x2b
     3ce:	8c a7       	std	Y+44, r24	; 0x2c
     3d0:	9d a7       	std	Y+45, r25	; 0x2d
     3d2:	df 91       	pop	r29
     3d4:	cf 91       	pop	r28
     3d6:	ff 90       	pop	r15
     3d8:	ef 90       	pop	r14
     3da:	df 90       	pop	r13
     3dc:	cf 90       	pop	r12
     3de:	bf 90       	pop	r11
     3e0:	af 90       	pop	r10
     3e2:	9f 90       	pop	r9
     3e4:	8f 90       	pop	r8
     3e6:	7f 90       	pop	r7
     3e8:	6f 90       	pop	r6
     3ea:	5f 90       	pop	r5
     3ec:	4f 90       	pop	r4
     3ee:	08 95       	ret

000003f0 <_Z12Task_Balancev>:
}


// **********Task functions********** 

void Task_Balance(){
     3f0:	4f 92       	push	r4
     3f2:	5f 92       	push	r5
     3f4:	6f 92       	push	r6
     3f6:	7f 92       	push	r7
     3f8:	8f 92       	push	r8
     3fa:	9f 92       	push	r9
     3fc:	af 92       	push	r10
     3fe:	bf 92       	push	r11
     400:	cf 92       	push	r12
     402:	df 92       	push	r13
     404:	ef 92       	push	r14
     406:	ff 92       	push	r15
     408:	cf 93       	push	r28
     40a:	df 93       	push	r29
     40c:	00 d0       	rcall	.+0      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     40e:	00 d0       	rcall	.+0      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
     410:	cd b7       	in	r28, 0x3d	; 61
     412:	de b7       	in	r29, 0x3e	; 62
	
	I2C_ReadSensorVals(MPU6050);
     414:	86 e0       	ldi	r24, 0x06	; 6
     416:	91 e0       	ldi	r25, 0x01	; 1
     418:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <_Z18I2C_ReadSensorValsR11MPU6050Vals>
	ConvertSensorVals(MPU6050);
     41c:	86 e0       	ldi	r24, 0x06	; 6
     41e:	91 e0       	ldi	r25, 0x01	; 1
     420:	0e 94 48 01 	call	0x290	; 0x290 <_Z17ConvertSensorValsR11MPU6050Vals>
	
	error = ((CalibratedBalancePoint) + 0.0) - MPU6050.CurrentTheta;
     424:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__data_end+0x2a>
     428:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <__data_end+0x2b>
     42c:	a0 91 32 01 	lds	r26, 0x0132	; 0x800132 <__data_end+0x2c>
     430:	b0 91 33 01 	lds	r27, 0x0133	; 0x800133 <__data_end+0x2d>
     434:	89 83       	std	Y+1, r24	; 0x01
     436:	9a 83       	std	Y+2, r25	; 0x02
     438:	ab 83       	std	Y+3, r26	; 0x03
     43a:	bc 83       	std	Y+4, r27	; 0x04
     43c:	20 e0       	ldi	r18, 0x00	; 0
     43e:	30 e0       	ldi	r19, 0x00	; 0
     440:	a9 01       	movw	r20, r18
     442:	60 91 34 01 	lds	r22, 0x0134	; 0x800134 <CalibratedBalancePoint>
     446:	70 91 35 01 	lds	r23, 0x0135	; 0x800135 <CalibratedBalancePoint+0x1>
     44a:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <CalibratedBalancePoint+0x2>
     44e:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <CalibratedBalancePoint+0x3>
     452:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <__addsf3>
     456:	29 81       	ldd	r18, Y+1	; 0x01
     458:	3a 81       	ldd	r19, Y+2	; 0x02
     45a:	4b 81       	ldd	r20, Y+3	; 0x03
     45c:	5c 81       	ldd	r21, Y+4	; 0x04
     45e:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__subsf3>
     462:	6b 01       	movw	r12, r22
     464:	7c 01       	movw	r14, r24
     466:	60 93 3c 01 	sts	0x013C, r22	; 0x80013c <error>
     46a:	70 93 3d 01 	sts	0x013D, r23	; 0x80013d <error+0x1>
     46e:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <error+0x2>
     472:	90 93 3f 01 	sts	0x013F, r25	; 0x80013f <error+0x3>
	errorSum += error;
     476:	20 91 38 01 	lds	r18, 0x0138	; 0x800138 <errorSum>
     47a:	30 91 39 01 	lds	r19, 0x0139	; 0x800139 <errorSum+0x1>
     47e:	40 91 3a 01 	lds	r20, 0x013A	; 0x80013a <errorSum+0x2>
     482:	50 91 3b 01 	lds	r21, 0x013B	; 0x80013b <errorSum+0x3>
     486:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <__addsf3>
     48a:	2b 01       	movw	r4, r22
     48c:	3c 01       	movw	r6, r24
     48e:	60 93 38 01 	sts	0x0138, r22	; 0x800138 <errorSum>
     492:	70 93 39 01 	sts	0x0139, r23	; 0x800139 <errorSum+0x1>
     496:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <errorSum+0x2>
     49a:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <errorSum+0x3>
	//if(errorSum)
	int16_t pwm = Kp*(error) - Kd*(MPU6050.CurrentTheta-MPU6050.PreviousTheta)/MPU6050.dt + Ki*(errorSum)*MPU6050.dt;
     49e:	80 90 24 01 	lds	r8, 0x0124	; 0x800124 <__data_end+0x1e>
     4a2:	90 90 25 01 	lds	r9, 0x0125	; 0x800125 <__data_end+0x1f>
     4a6:	a0 90 26 01 	lds	r10, 0x0126	; 0x800126 <__data_end+0x20>
     4aa:	b0 90 27 01 	lds	r11, 0x0127	; 0x800127 <__data_end+0x21>
     4ae:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <Kp>
     4b2:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <Kp+0x1>
     4b6:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <Kp+0x2>
     4ba:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <Kp+0x3>
     4be:	c7 01       	movw	r24, r14
     4c0:	b6 01       	movw	r22, r12
     4c2:	0e 94 68 08 	call	0x10d0	; 0x10d0 <__mulsf3>
     4c6:	6b 01       	movw	r12, r22
     4c8:	7c 01       	movw	r14, r24
     4ca:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <__data_end+0x16>
     4ce:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <__data_end+0x17>
     4d2:	40 91 1e 01 	lds	r20, 0x011E	; 0x80011e <__data_end+0x18>
     4d6:	50 91 1f 01 	lds	r21, 0x011F	; 0x80011f <__data_end+0x19>
     4da:	69 81       	ldd	r22, Y+1	; 0x01
     4dc:	7a 81       	ldd	r23, Y+2	; 0x02
     4de:	8b 81       	ldd	r24, Y+3	; 0x03
     4e0:	9c 81       	ldd	r25, Y+4	; 0x04
     4e2:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__subsf3>
     4e6:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <Kd>
     4ea:	30 91 45 01 	lds	r19, 0x0145	; 0x800145 <Kd+0x1>
     4ee:	40 91 46 01 	lds	r20, 0x0146	; 0x800146 <Kd+0x2>
     4f2:	50 91 47 01 	lds	r21, 0x0147	; 0x800147 <Kd+0x3>
     4f6:	0e 94 68 08 	call	0x10d0	; 0x10d0 <__mulsf3>
     4fa:	a5 01       	movw	r20, r10
     4fc:	94 01       	movw	r18, r8
     4fe:	0e 94 df 06 	call	0xdbe	; 0xdbe <__divsf3>
     502:	9b 01       	movw	r18, r22
     504:	ac 01       	movw	r20, r24
     506:	c7 01       	movw	r24, r14
     508:	b6 01       	movw	r22, r12
     50a:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__subsf3>
     50e:	6b 01       	movw	r12, r22
     510:	7c 01       	movw	r14, r24
     512:	20 91 40 01 	lds	r18, 0x0140	; 0x800140 <Ki>
     516:	30 91 41 01 	lds	r19, 0x0141	; 0x800141 <Ki+0x1>
     51a:	40 91 42 01 	lds	r20, 0x0142	; 0x800142 <Ki+0x2>
     51e:	50 91 43 01 	lds	r21, 0x0143	; 0x800143 <Ki+0x3>
     522:	c3 01       	movw	r24, r6
     524:	b2 01       	movw	r22, r4
     526:	0e 94 68 08 	call	0x10d0	; 0x10d0 <__mulsf3>
     52a:	a5 01       	movw	r20, r10
     52c:	94 01       	movw	r18, r8
     52e:	0e 94 68 08 	call	0x10d0	; 0x10d0 <__mulsf3>
     532:	9b 01       	movw	r18, r22
     534:	ac 01       	movw	r20, r24
     536:	c7 01       	movw	r24, r14
     538:	b6 01       	movw	r22, r12
     53a:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <__addsf3>
     53e:	0e 94 51 07 	call	0xea2	; 0xea2 <__fixsfsi>
     542:	6b 01       	movw	r12, r22
     544:	7c 01       	movw	r14, r24
// 		pwm = 130;
// 	}else if ((pwm > -130) && ( pwm < 0))
// 	{
// 		pwm = -130;
	/*}*/
	Motor_PWM_Left(pwm);
     546:	cb 01       	movw	r24, r22
     548:	0e 94 ae 03 	call	0x75c	; 0x75c <_Z14Motor_PWM_Lefti>
	Motor_PWM_Right(pwm);
     54c:	c6 01       	movw	r24, r12
     54e:	0e 94 cc 03 	call	0x798	; 0x798 <_Z15Motor_PWM_Righti>
	Motor_PWM_Enable(true);
     552:	81 e0       	ldi	r24, 0x01	; 1
     554:	0e 94 a0 03 	call	0x740	; 0x740 <_Z16Motor_PWM_Enableb>
	

	MPU6050.PreviousTheta = MPU6050.CurrentTheta;
     558:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__data_end+0x2a>
     55c:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <__data_end+0x2b>
     560:	a0 91 32 01 	lds	r26, 0x0132	; 0x800132 <__data_end+0x2c>
     564:	b0 91 33 01 	lds	r27, 0x0133	; 0x800133 <__data_end+0x2d>
     568:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <__data_end+0x16>
     56c:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <__data_end+0x17>
     570:	a0 93 1e 01 	sts	0x011E, r26	; 0x80011e <__data_end+0x18>
     574:	b0 93 1f 01 	sts	0x011F, r27	; 0x80011f <__data_end+0x19>
	
}
     578:	0f 90       	pop	r0
     57a:	0f 90       	pop	r0
     57c:	0f 90       	pop	r0
     57e:	0f 90       	pop	r0
     580:	df 91       	pop	r29
     582:	cf 91       	pop	r28
     584:	ff 90       	pop	r15
     586:	ef 90       	pop	r14
     588:	df 90       	pop	r13
     58a:	cf 90       	pop	r12
     58c:	bf 90       	pop	r11
     58e:	af 90       	pop	r10
     590:	9f 90       	pop	r9
     592:	8f 90       	pop	r8
     594:	7f 90       	pop	r7
     596:	6f 90       	pop	r6
     598:	5f 90       	pop	r5
     59a:	4f 90       	pop	r4
     59c:	08 95       	ret

0000059e <_Z14Task_Calibratev>:

void Task_Calibrate(){
     59e:	8f 92       	push	r8
     5a0:	9f 92       	push	r9
     5a2:	af 92       	push	r10
     5a4:	bf 92       	push	r11
     5a6:	cf 92       	push	r12
     5a8:	df 92       	push	r13
     5aa:	ef 92       	push	r14
     5ac:	ff 92       	push	r15
     5ae:	0f 93       	push	r16
     5b0:	1f 93       	push	r17
     5b2:	cf 93       	push	r28
     5b4:	df 93       	push	r29
	
	

	I2C_ReadSensorVals(MPU6050);
     5b6:	86 e0       	ldi	r24, 0x06	; 6
     5b8:	91 e0       	ldi	r25, 0x01	; 1
     5ba:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <_Z18I2C_ReadSensorValsR11MPU6050Vals>
	ConvertSensorVals(MPU6050);
     5be:	86 e0       	ldi	r24, 0x06	; 6
     5c0:	91 e0       	ldi	r25, 0x01	; 1
     5c2:	0e 94 48 01 	call	0x290	; 0x290 <_Z17ConvertSensorValsR11MPU6050Vals>
	
	float AverageTheta = 0;
	int i = 1;
     5c6:	c1 e0       	ldi	r28, 0x01	; 1
     5c8:	d0 e0       	ldi	r29, 0x00	; 0
	

	I2C_ReadSensorVals(MPU6050);
	ConvertSensorVals(MPU6050);
	
	float AverageTheta = 0;
     5ca:	81 2c       	mov	r8, r1
     5cc:	91 2c       	mov	r9, r1
     5ce:	54 01       	movw	r10, r8
	int i = 1;
	while (i < 1000)
	{
		I2C_ReadSensorVals(MPU6050);
     5d0:	86 e0       	ldi	r24, 0x06	; 6
     5d2:	91 e0       	ldi	r25, 0x01	; 1
     5d4:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <_Z18I2C_ReadSensorValsR11MPU6050Vals>
		ConvertSensorVals(MPU6050);
     5d8:	86 e0       	ldi	r24, 0x06	; 6
     5da:	91 e0       	ldi	r25, 0x01	; 1
     5dc:	0e 94 48 01 	call	0x290	; 0x290 <_Z17ConvertSensorValsR11MPU6050Vals>
		
		AverageTheta = (AverageTheta * (i - 1) + (MPU6050.CurrentTheta)) / i;
     5e0:	06 e0       	ldi	r16, 0x06	; 6
     5e2:	11 e0       	ldi	r17, 0x01	; 1
     5e4:	f8 01       	movw	r30, r16
     5e6:	c2 a4       	ldd	r12, Z+42	; 0x2a
     5e8:	d3 a4       	ldd	r13, Z+43	; 0x2b
     5ea:	e4 a4       	ldd	r14, Z+44	; 0x2c
     5ec:	f5 a4       	ldd	r15, Z+45	; 0x2d
     5ee:	be 01       	movw	r22, r28
     5f0:	61 50       	subi	r22, 0x01	; 1
     5f2:	71 09       	sbc	r23, r1
     5f4:	07 2e       	mov	r0, r23
     5f6:	00 0c       	add	r0, r0
     5f8:	88 0b       	sbc	r24, r24
     5fa:	99 0b       	sbc	r25, r25
     5fc:	0e 94 89 07 	call	0xf12	; 0xf12 <__floatsisf>
     600:	a5 01       	movw	r20, r10
     602:	94 01       	movw	r18, r8
     604:	0e 94 68 08 	call	0x10d0	; 0x10d0 <__mulsf3>
     608:	a7 01       	movw	r20, r14
     60a:	96 01       	movw	r18, r12
     60c:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <__addsf3>
     610:	4b 01       	movw	r8, r22
     612:	5c 01       	movw	r10, r24
     614:	be 01       	movw	r22, r28
     616:	0d 2e       	mov	r0, r29
     618:	00 0c       	add	r0, r0
     61a:	88 0b       	sbc	r24, r24
     61c:	99 0b       	sbc	r25, r25
     61e:	0e 94 89 07 	call	0xf12	; 0xf12 <__floatsisf>
     622:	9b 01       	movw	r18, r22
     624:	ac 01       	movw	r20, r24
     626:	c5 01       	movw	r24, r10
     628:	b4 01       	movw	r22, r8
     62a:	0e 94 df 06 	call	0xdbe	; 0xdbe <__divsf3>
     62e:	4b 01       	movw	r8, r22
     630:	5c 01       	movw	r10, r24
		MPU6050.PreviousTheta = MPU6050.CurrentTheta;
     632:	f8 01       	movw	r30, r16
     634:	c6 8a       	std	Z+22, r12	; 0x16
     636:	d7 8a       	std	Z+23, r13	; 0x17
     638:	e0 8e       	std	Z+24, r14	; 0x18
     63a:	f1 8e       	std	Z+25, r15	; 0x19
		i++;
     63c:	21 96       	adiw	r28, 0x01	; 1
	I2C_ReadSensorVals(MPU6050);
	ConvertSensorVals(MPU6050);
	
	float AverageTheta = 0;
	int i = 1;
	while (i < 1000)
     63e:	c8 3e       	cpi	r28, 0xE8	; 232
     640:	f3 e0       	ldi	r31, 0x03	; 3
     642:	df 07       	cpc	r29, r31
     644:	29 f6       	brne	.-118    	; 0x5d0 <_Z14Task_Calibratev+0x32>

	float BalanceTheta = AverageTheta;
	


	Motor_PWM_Left(100);
     646:	84 e6       	ldi	r24, 0x64	; 100
     648:	90 e0       	ldi	r25, 0x00	; 0
     64a:	0e 94 ae 03 	call	0x75c	; 0x75c <_Z14Motor_PWM_Lefti>
	Motor_PWM_Right(100);
     64e:	84 e6       	ldi	r24, 0x64	; 100
     650:	90 e0       	ldi	r25, 0x00	; 0
     652:	0e 94 cc 03 	call	0x798	; 0x798 <_Z15Motor_PWM_Righti>
	Motor_PWM_Enable(true);
     656:	81 e0       	ldi	r24, 0x01	; 1
     658:	0e 94 a0 03 	call	0x740	; 0x740 <_Z16Motor_PWM_Enableb>
		
 	if(eeprom_is_ready()){
     65c:	f9 99       	sbic	0x1f, 1	; 31
     65e:	06 c0       	rjmp	.+12     	; 0x66c <_Z14Task_Calibratev+0xce>
 	eeprom_update_float(&EEPROM_ADDRESS, BalanceTheta);
     660:	b5 01       	movw	r22, r10
     662:	a4 01       	movw	r20, r8
     664:	80 e0       	ldi	r24, 0x00	; 0
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	0e 94 df 08 	call	0x11be	; 0x11be <eeprom_update_dword>
     66c:	8f e3       	ldi	r24, 0x3F	; 63
     66e:	9c e9       	ldi	r25, 0x9C	; 156
     670:	01 97       	sbiw	r24, 0x01	; 1
     672:	f1 f7       	brne	.-4      	; 0x670 <_Z14Task_Calibratev+0xd2>
     674:	00 c0       	rjmp	.+0      	; 0x676 <_Z14Task_Calibratev+0xd8>
     676:	00 00       	nop
 	}
 	
		_delay_ms(10);
 	CalibratedBalancePoint = eeprom_read_float(&EEPROM_ADDRESS);
     678:	80 e0       	ldi	r24, 0x00	; 0
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <eeprom_read_dword>
     680:	60 93 34 01 	sts	0x0134, r22	; 0x800134 <CalibratedBalancePoint>
     684:	70 93 35 01 	sts	0x0135, r23	; 0x800135 <CalibratedBalancePoint+0x1>
     688:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <CalibratedBalancePoint+0x2>
     68c:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <CalibratedBalancePoint+0x3>
 	
 
	
 	if ( fabs(CalibratedBalancePoint) < 1.72)
     690:	9f 77       	andi	r25, 0x7F	; 127
     692:	26 ef       	ldi	r18, 0xF6	; 246
     694:	38 e2       	ldi	r19, 0x28	; 40
     696:	4c ed       	ldi	r20, 0xDC	; 220
     698:	5f e3       	ldi	r21, 0x3F	; 63
     69a:	0e 94 da 06 	call	0xdb4	; 0xdb4 <__cmpsf2>
     69e:	88 23       	and	r24, r24
     6a0:	1c f4       	brge	.+6      	; 0x6a8 <_Z14Task_Calibratev+0x10a>
 	{
 		Motor_PWM_Enable(false);
     6a2:	80 e0       	ldi	r24, 0x00	; 0
     6a4:	0e 94 a0 03 	call	0x740	; 0x740 <_Z16Motor_PWM_Enableb>
 	}
	

	
     6a8:	df 91       	pop	r29
     6aa:	cf 91       	pop	r28
     6ac:	1f 91       	pop	r17
     6ae:	0f 91       	pop	r16
     6b0:	ff 90       	pop	r15
     6b2:	ef 90       	pop	r14
     6b4:	df 90       	pop	r13
     6b6:	cf 90       	pop	r12
     6b8:	bf 90       	pop	r11
     6ba:	af 90       	pop	r10
     6bc:	9f 90       	pop	r9
     6be:	8f 90       	pop	r8
     6c0:	08 95       	ret

000006c2 <_Z17InitializeModulesv>:
// 	.extended = 0b11110100,
// };

void InitializeModules(){
	
	initialize_LED(DDRF, PORTF0);
     6c2:	80 9a       	sbi	0x10, 0	; 16
	initialize_LED(DDRF, PORTF1);
     6c4:	81 9a       	sbi	0x10, 1	; 16
	
	Init_MPU6050(MPU6050);
     6c6:	86 e0       	ldi	r24, 0x06	; 6
     6c8:	91 e0       	ldi	r25, 0x01	; 1
     6ca:	0e 94 9e 00 	call	0x13c	; 0x13c <_Z12Init_MPU6050R11MPU6050Vals>
	
	Initialize_Timing();		//Starts Timer 0, used to count millis/micros to keep track of tasks and other timing functions
     6ce:	0e 94 7f 04 	call	0x8fe	; 0x8fe <_Z17Initialize_Timingv>
	Motor_PWM_Init();
     6d2:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <_Z14Motor_PWM_Initv>
	Initialize_Task(&task_Balance, MPU6050.dt, Task_Balance);
     6d6:	40 91 24 01 	lds	r20, 0x0124	; 0x800124 <__data_end+0x1e>
     6da:	50 91 25 01 	lds	r21, 0x0125	; 0x800125 <__data_end+0x1f>
     6de:	60 91 26 01 	lds	r22, 0x0126	; 0x800126 <__data_end+0x20>
     6e2:	70 91 27 01 	lds	r23, 0x0127	; 0x800127 <__data_end+0x21>
     6e6:	28 ef       	ldi	r18, 0xF8	; 248
     6e8:	31 e0       	ldi	r19, 0x01	; 1
     6ea:	85 e5       	ldi	r24, 0x55	; 85
     6ec:	91 e0       	ldi	r25, 0x01	; 1
     6ee:	0e 94 2c 04 	call	0x858	; 0x858 <_Z15Initialize_TaskP6Task_tfPFvvE>
	Initialize_Task(&task_Calibrate, -1, Task_Calibrate);
     6f2:	2f ec       	ldi	r18, 0xCF	; 207
     6f4:	32 e0       	ldi	r19, 0x02	; 2
     6f6:	40 e0       	ldi	r20, 0x00	; 0
     6f8:	50 e0       	ldi	r21, 0x00	; 0
     6fa:	60 e8       	ldi	r22, 0x80	; 128
     6fc:	7f eb       	ldi	r23, 0xBF	; 191
     6fe:	88 e4       	ldi	r24, 0x48	; 72
     700:	91 e0       	ldi	r25, 0x01	; 1
     702:	0e 94 2c 04 	call	0x858	; 0x858 <_Z15Initialize_TaskP6Task_tfPFvvE>
     706:	08 95       	ret

00000708 <main>:

int main(void)
{
	

	InitializeModules();
     708:	0e 94 61 03 	call	0x6c2	; 0x6c2 <_Z17InitializeModulesv>
	
	CalibratedBalancePoint = eeprom_read_float(&EEPROM_ADDRESS);
     70c:	80 e0       	ldi	r24, 0x00	; 0
     70e:	90 e0       	ldi	r25, 0x00	; 0
     710:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <eeprom_read_dword>
     714:	60 93 34 01 	sts	0x0134, r22	; 0x800134 <CalibratedBalancePoint>
     718:	70 93 35 01 	sts	0x0135, r23	; 0x800135 <CalibratedBalancePoint+0x1>
     71c:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <CalibratedBalancePoint+0x2>
     720:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <CalibratedBalancePoint+0x3>
	task_Balance.is_active = true;
     724:	81 e0       	ldi	r24, 0x01	; 1
     726:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <task_Balance>
	task_Calibrate.is_active = false;
     72a:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <task_Calibrate>


while (1)
{
	
	Task_Run_If_Ready(&task_Balance);
     72e:	85 e5       	ldi	r24, 0x55	; 85
     730:	91 e0       	ldi	r25, 0x01	; 1
     732:	0e 94 59 04 	call	0x8b2	; 0x8b2 <_Z17Task_Run_If_ReadyP6Task_t>
	Task_Run_If_Ready(&task_Calibrate);
     736:	88 e4       	ldi	r24, 0x48	; 72
     738:	91 e0       	ldi	r25, 0x01	; 1
     73a:	0e 94 59 04 	call	0x8b2	; 0x8b2 <_Z17Task_Run_If_ReadyP6Task_t>
     73e:	f7 cf       	rjmp	.-18     	; 0x72e <main+0x26>

00000740 <_Z16Motor_PWM_Enableb>:
 * @param [bool] true if enabled, false if disabled
 */
bool Is_Motor_PWM_Enabled(){
    if(((DDRB & 0b01100000 ) == 0b01100000) && (DDRC & 0b10000000) && (DDRD & 0b10000000)){return true;}
    return false;
}
     740:	88 23       	and	r24, r24
     742:	31 f0       	breq	.+12     	; 0x750 <_Z16Motor_PWM_Enableb+0x10>
     744:	84 b1       	in	r24, 0x04	; 4
     746:	80 66       	ori	r24, 0x60	; 96
     748:	84 b9       	out	0x04, r24	; 4
     74a:	3f 9a       	sbi	0x07, 7	; 7
     74c:	57 9a       	sbi	0x0a, 7	; 10
     74e:	08 95       	ret
     750:	84 b1       	in	r24, 0x04	; 4
     752:	8f 79       	andi	r24, 0x9F	; 159
     754:	84 b9       	out	0x04, r24	; 4
     756:	3f 98       	cbi	0x07, 7	; 7
     758:	57 98       	cbi	0x0a, 7	; 10
     75a:	08 95       	ret

0000075c <_Z14Motor_PWM_Lefti>:
 * Function Motor_PWM_Left sets the PWM duty cycle for the left motor.
 * @return [int32_t] The count number.
 */
void Motor_PWM_Left( int16_t pwm ){
	int16_t sign = pwm;
	pwm = abs(pwm);
     75c:	9c 01       	movw	r18, r24
     75e:	99 23       	and	r25, r25
     760:	24 f4       	brge	.+8      	; 0x76a <_Z14Motor_PWM_Lefti+0xe>
     762:	22 27       	eor	r18, r18
     764:	33 27       	eor	r19, r19
     766:	28 1b       	sub	r18, r24
     768:	39 0b       	sbc	r19, r25
	
	if(pwm > MAX_PWM_COUNT){pwm = MAX_PWM_COUNT;}
     76a:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <MAX_PWM_COUNT>
     76e:	50 e0       	ldi	r21, 0x00	; 0
	union {
		uint16_t word;
		uint8_t arr[2];
	}WordToBytes;
	
	WordToBytes.word = pwm; // / ICR_Split.word;
     770:	42 17       	cp	r20, r18
     772:	53 07       	cpc	r21, r19
     774:	0c f4       	brge	.+2      	; 0x778 <_Z14Motor_PWM_Lefti+0x1c>
     776:	9a 01       	movw	r18, r20
	
	//if (WordToBytes.arr[0] != 200){WordToBytes.word = 100;}

    if(sign < 0){
     778:	99 23       	and	r25, r25
     77a:	3c f4       	brge	.+14     	; 0x78a <_Z14Motor_PWM_Lefti+0x2e>
		
        OCR4A = WordToBytes.arr[0];
     77c:	20 93 cf 00 	sts	0x00CF, r18	; 0x8000cf <__DATA_REGION_ORIGIN__+0x6f>
		//if(OCR4A == 200){LED_ON(DDRF, PORTF0);}
		OCR1AH = 0;
     780:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
		OCR1AL = 0;
     784:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
     788:	08 95       	ret
    }else{
		
        OCR4A = 0;
     78a:	10 92 cf 00 	sts	0x00CF, r1	; 0x8000cf <__DATA_REGION_ORIGIN__+0x6f>
        OCR1AH = 0;
     78e:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
        OCR1AL = WordToBytes.arr[0];
     792:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
     796:	08 95       	ret

00000798 <_Z15Motor_PWM_Righti>:
 * Function Motor_PWM_Right sets the PWM duty cycle for the right motor.
 * @return [int32_t] The count number.
 */
void Motor_PWM_Right( int16_t pwm ){
	int16_t sign = pwm;
	pwm = abs(pwm);
     798:	9c 01       	movw	r18, r24
     79a:	99 23       	and	r25, r25
     79c:	24 f4       	brge	.+8      	; 0x7a6 <_Z15Motor_PWM_Righti+0xe>
     79e:	22 27       	eor	r18, r18
     7a0:	33 27       	eor	r19, r19
     7a2:	28 1b       	sub	r18, r24
     7a4:	39 0b       	sbc	r19, r25
	
	if(pwm>MAX_PWM_COUNT){pwm = MAX_PWM_COUNT;}
     7a6:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <MAX_PWM_COUNT>
     7aa:	50 e0       	ldi	r21, 0x00	; 0
	union {
		uint16_t word;
		uint8_t arr[2];
	}WordToBytes;
	
	WordToBytes.word = pwm; // / ICR_Split.word;
     7ac:	42 17       	cp	r20, r18
     7ae:	53 07       	cpc	r21, r19
     7b0:	0c f4       	brge	.+2      	; 0x7b4 <_Z15Motor_PWM_Righti+0x1c>
     7b2:	9a 01       	movw	r18, r20
	if(sign < 0){
     7b4:	99 23       	and	r25, r25
     7b6:	3c f4       	brge	.+14     	; 0x7c6 <_Z15Motor_PWM_Righti+0x2e>
		
		OCR4D = WordToBytes.arr[0];
     7b8:	20 93 d2 00 	sts	0x00D2, r18	; 0x8000d2 <__DATA_REGION_ORIGIN__+0x72>
		OCR1BH = 0;
     7bc:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
		OCR1BL = 0;
     7c0:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
     7c4:	08 95       	ret
		
		}else{
		OCR4D = 0;
     7c6:	10 92 d2 00 	sts	0x00D2, r1	; 0x8000d2 <__DATA_REGION_ORIGIN__+0x72>
		OCR1BH = 0;
     7ca:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
		OCR1BL = WordToBytes.arr[0];
     7ce:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
     7d2:	08 95       	ret

000007d4 <_Z17Set_MAX_Motor_PWMv>:
 * Function Set_MAX_Motor_PWM sets the maximum pwm count. This function sets the timer counts to zero because
 * the ICR1 can cause undesired behaviors if change dynamically below the current counts.  See page 128 of the
 * atmega32U4 datasheat.
 */
void Set_MAX_Motor_PWM( ){
    ICR1L = MAX_PWM_COUNT;		//Timer 1 TOP
     7d4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <MAX_PWM_COUNT>
     7d8:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__DATA_REGION_ORIGIN__+0x26>
	OCR4C = MAX_PWM_COUNT;		//Timer 4 TOP
     7dc:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <MAX_PWM_COUNT>
     7e0:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__DATA_REGION_ORIGIN__+0x71>
     7e4:	08 95       	ret

000007e6 <_Z14Motor_PWM_Initv>:
 */

uint8_t MAX_PWM_COUNT = 255;			// Maximum PWM Count for all timers


void Motor_PWM_Init( ){
     7e6:	0f 93       	push	r16
     7e8:	1f 93       	push	r17
     7ea:	cf 93       	push	r28
     7ec:	df 93       	push	r29
 
    DDRB &= 0b10011111;         //Set pins PB5 (AIN1) and PB6 (BIN1) to low
     7ee:	84 b1       	in	r24, 0x04	; 4
     7f0:	8f 79       	andi	r24, 0x9F	; 159
     7f2:	84 b9       	out	0x04, r24	; 4
	DDRC &= 0b01111111;			//Set pin PC7 (AIN2) to low
     7f4:	3f 98       	cbi	0x07, 7	; 7
	DDRD &= 0b01111111;			//Set pin PD7 (BIN2) to low
     7f6:	57 98       	cbi	0x0a, 7	; 10
	
    

    //Setting Output Compare Match Mode to Toggle on compare match
    TCCR1A |= (1<<COM1A1);
     7f8:	e0 e8       	ldi	r30, 0x80	; 128
     7fa:	f0 e0       	ldi	r31, 0x00	; 0
     7fc:	80 81       	ld	r24, Z
     7fe:	80 68       	ori	r24, 0x80	; 128
     800:	80 83       	st	Z, r24
    TCCR1A |= (1<<COM1B1);
     802:	80 81       	ld	r24, Z
     804:	80 62       	ori	r24, 0x20	; 32
     806:	80 83       	st	Z, r24
	
	
	TCCR4A |= (1<<COM4A1);
     808:	00 ec       	ldi	r16, 0xC0	; 192
     80a:	10 e0       	ldi	r17, 0x00	; 0
     80c:	f8 01       	movw	r30, r16
     80e:	80 81       	ld	r24, Z
     810:	80 68       	ori	r24, 0x80	; 128
     812:	80 83       	st	Z, r24
	TCCR4C |= (1<<COM4D1);
     814:	c2 ec       	ldi	r28, 0xC2	; 194
     816:	d0 e0       	ldi	r29, 0x00	; 0
     818:	88 81       	ld	r24, Y
     81a:	88 60       	ori	r24, 0x08	; 8
     81c:	88 83       	st	Y, r24


    Set_MAX_Motor_PWM();
     81e:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <_Z17Set_MAX_Motor_PWMv>


    //Set mode to Phase and frequency correct and clock prescalar to 256
    // Sets Max ICR value to 8191
    TCCR1B |= (1<<WGM13) | (1<<CS10);
     822:	e1 e8       	ldi	r30, 0x81	; 129
     824:	f0 e0       	ldi	r31, 0x00	; 0
     826:	80 81       	ld	r24, Z
     828:	81 61       	ori	r24, 0x11	; 17
     82a:	80 83       	st	Z, r24
	
	//Set mode to Phase and frequency correct and clock prescalar to 256
	TCCR4A |= (1<<PWM4A);
     82c:	f8 01       	movw	r30, r16
     82e:	80 81       	ld	r24, Z
     830:	82 60       	ori	r24, 0x02	; 2
     832:	80 83       	st	Z, r24
	TCCR4B |= (1<<CS40);
     834:	e1 ec       	ldi	r30, 0xC1	; 193
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	80 81       	ld	r24, Z
     83a:	81 60       	ori	r24, 0x01	; 1
     83c:	80 83       	st	Z, r24
	TCCR4C |= (1<<PWM4D);
     83e:	88 81       	ld	r24, Y
     840:	81 60       	ori	r24, 0x01	; 1
     842:	88 83       	st	Y, r24
	TCCR4D |= (1<<WGM40);
     844:	e3 ec       	ldi	r30, 0xC3	; 195
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	80 81       	ld	r24, Z
     84a:	81 60       	ori	r24, 0x01	; 1
     84c:	80 83       	st	Z, r24
}
     84e:	df 91       	pop	r29
     850:	cf 91       	pop	r28
     852:	1f 91       	pop	r17
     854:	0f 91       	pop	r16
     856:	08 95       	ret

00000858 <_Z15Initialize_TaskP6Task_tfPFvvE>:
}

/** Function Task_Cancel changes the internal state to disable the task **/
void Task_Cancel( Task_t* task )
{
    task->is_active = false;
     858:	fc 01       	movw	r30, r24
     85a:	10 82       	st	Z, r1
     85c:	41 83       	std	Z+1, r20	; 0x01
     85e:	52 83       	std	Z+2, r21	; 0x02
     860:	63 83       	std	Z+3, r22	; 0x03
     862:	74 83       	std	Z+4, r23	; 0x04
     864:	12 86       	std	Z+10, r1	; 0x0a
     866:	11 86       	std	Z+9, r1	; 0x09
     868:	15 82       	std	Z+5, r1	; 0x05
     86a:	16 82       	std	Z+6, r1	; 0x06
     86c:	17 82       	std	Z+7, r1	; 0x07
     86e:	10 86       	std	Z+8, r1	; 0x08
     870:	34 87       	std	Z+12, r19	; 0x0c
     872:	23 87       	std	Z+11, r18	; 0x0b
     874:	08 95       	ret

00000876 <_Z13Task_Is_ReadyP6Task_t>:

/** Function Task_Is_Ready indicates if the task should be run. It checks both
 * the active status and the timing.
 */
bool Task_Is_Ready( Task_t* task )
{
     876:	cf 92       	push	r12
     878:	df 92       	push	r13
     87a:	ef 92       	push	r14
     87c:	ff 92       	push	r15
     87e:	fc 01       	movw	r30, r24
    if(task->is_active && task->run_period < Timing_Seconds_Since(&task->time_last_ran)){ //___ > task->run_period
     880:	80 81       	ld	r24, Z
     882:	88 23       	and	r24, r24
     884:	89 f0       	breq	.+34     	; 0x8a8 <_Z13Task_Is_ReadyP6Task_t+0x32>
     886:	c1 80       	ldd	r12, Z+1	; 0x01
     888:	d2 80       	ldd	r13, Z+2	; 0x02
     88a:	e3 80       	ldd	r14, Z+3	; 0x03
     88c:	f4 80       	ldd	r15, Z+4	; 0x04
     88e:	cf 01       	movw	r24, r30
     890:	05 96       	adiw	r24, 0x05	; 5
     892:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <_Z20Timing_Seconds_SincePK6Time_t>
     896:	9b 01       	movw	r18, r22
     898:	ac 01       	movw	r20, r24
     89a:	c7 01       	movw	r24, r14
     89c:	b6 01       	movw	r22, r12
     89e:	0e 94 da 06 	call	0xdb4	; 0xdb4 <__cmpsf2>
     8a2:	88 1f       	adc	r24, r24
     8a4:	88 27       	eor	r24, r24
     8a6:	88 1f       	adc	r24, r24
        
    }else{
        return false;
    }
     // MEGN540 Update to set the return statement based on is_active and time_last_ran. 
}
     8a8:	ff 90       	pop	r15
     8aa:	ef 90       	pop	r14
     8ac:	df 90       	pop	r13
     8ae:	cf 90       	pop	r12
     8b0:	08 95       	ret

000008b2 <_Z17Task_Run_If_ReadyP6Task_t>:
/** Function Task_Run_If_Ready Function Task_Run_If_Ready checks to see if the given task is ready for execution, executes the task, 
 *  and resets the time_last_ran appropriately. If the task function pointer is NULL then it just 
 *  returns if the task is ready and resets the time_last_ran.
 */ 
bool Task_Run_If_Ready( Task_t* task )
{
     8b2:	1f 93       	push	r17
     8b4:	cf 93       	push	r28
     8b6:	df 93       	push	r29
     8b8:	ec 01       	movw	r28, r24
    // Check to see if the task is ready to run.
    if( Task_Is_Ready(task)) 
     8ba:	0e 94 3b 04 	call	0x876	; 0x876 <_Z13Task_Is_ReadyP6Task_t>
     8be:	18 2f       	mov	r17, r24
     8c0:	88 23       	and	r24, r24
     8c2:	c1 f0       	breq	.+48     	; 0x8f4 <_Z17Task_Run_If_ReadyP6Task_t+0x42>
    {        
        if(task->run_period == -1)
     8c4:	20 e0       	ldi	r18, 0x00	; 0
     8c6:	30 e0       	ldi	r19, 0x00	; 0
     8c8:	40 e8       	ldi	r20, 0x80	; 128
     8ca:	5f eb       	ldi	r21, 0xBF	; 191
     8cc:	69 81       	ldd	r22, Y+1	; 0x01
     8ce:	7a 81       	ldd	r23, Y+2	; 0x02
     8d0:	8b 81       	ldd	r24, Y+3	; 0x03
     8d2:	9c 81       	ldd	r25, Y+4	; 0x04
     8d4:	0e 94 da 06 	call	0xdb4	; 0xdb4 <__cmpsf2>
     8d8:	81 11       	cpse	r24, r1
     8da:	01 c0       	rjmp	.+2      	; 0x8de <_Z17Task_Run_If_ReadyP6Task_t+0x2c>
            task->is_active = false;
     8dc:	18 82       	st	Y, r1
                
        (*task->task_fcn_ptr)();
     8de:	eb 85       	ldd	r30, Y+11	; 0x0b
     8e0:	fc 85       	ldd	r31, Y+12	; 0x0c
     8e2:	09 95       	icall

        task->time_last_ran = Timing_Get_Time();
     8e4:	0e 94 93 04 	call	0x926	; 0x926 <_Z15Timing_Get_Timev>
     8e8:	2d 83       	std	Y+5, r18	; 0x05
     8ea:	3e 83       	std	Y+6, r19	; 0x06
     8ec:	4f 83       	std	Y+7, r20	; 0x07
     8ee:	58 87       	std	Y+8, r21	; 0x08
     8f0:	69 87       	std	Y+9, r22	; 0x09
     8f2:	7a 87       	std	Y+10, r23	; 0x0a
    // Run it if it is ready
    // Update time_last_ran and is_active as appropriate. 
    // To call a void functor (function pointer):  (*functor_variable)(); 

    return false; // true if it ran, false if it did not run
}
     8f4:	81 2f       	mov	r24, r17
     8f6:	df 91       	pop	r29
     8f8:	cf 91       	pop	r28
     8fa:	1f 91       	pop	r17
     8fc:	08 95       	ret

000008fe <_Z17Initialize_Timingv>:
    return _count_ms;
}
uint16_t Timing_Get_Micro()
{
    return TCNT0 * 4;
}
     8fe:	85 b5       	in	r24, 0x25	; 37
     900:	83 60       	ori	r24, 0x03	; 3
     902:	85 bd       	out	0x25, r24	; 37
     904:	89 ef       	ldi	r24, 0xF9	; 249
     906:	87 bd       	out	0x27, r24	; 39
     908:	ee e6       	ldi	r30, 0x6E	; 110
     90a:	f0 e0       	ldi	r31, 0x00	; 0
     90c:	80 81       	ld	r24, Z
     90e:	82 60       	ori	r24, 0x02	; 2
     910:	80 83       	st	Z, r24
     912:	78 94       	sei
     914:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <_ZL9_count_ms>
     918:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <_ZL9_count_ms+0x1>
     91c:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <_ZL9_count_ms+0x2>
     920:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <_ZL9_count_ms+0x3>
     924:	08 95       	ret

00000926 <_Z15Timing_Get_Timev>:
     926:	cf 93       	push	r28
     928:	df 93       	push	r29
     92a:	00 d0       	rcall	.+0      	; 0x92c <_Z15Timing_Get_Timev+0x6>
     92c:	00 d0       	rcall	.+0      	; 0x92e <_Z15Timing_Get_Timev+0x8>
     92e:	00 d0       	rcall	.+0      	; 0x930 <_Z15Timing_Get_Timev+0xa>
     930:	cd b7       	in	r28, 0x3d	; 61
     932:	de b7       	in	r29, 0x3e	; 62
     934:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <_ZL9_count_ms>
     938:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <_ZL9_count_ms+0x1>
     93c:	a0 91 64 01 	lds	r26, 0x0164	; 0x800164 <_ZL9_count_ms+0x2>
     940:	b0 91 65 01 	lds	r27, 0x0165	; 0x800165 <_ZL9_count_ms+0x3>
     944:	66 b5       	in	r22, 0x26	; 38
     946:	89 83       	std	Y+1, r24	; 0x01
     948:	9a 83       	std	Y+2, r25	; 0x02
     94a:	ab 83       	std	Y+3, r26	; 0x03
     94c:	bc 83       	std	Y+4, r27	; 0x04
     94e:	70 e0       	ldi	r23, 0x00	; 0
     950:	66 0f       	add	r22, r22
     952:	77 1f       	adc	r23, r23
     954:	66 0f       	add	r22, r22
     956:	77 1f       	adc	r23, r23
     958:	7e 83       	std	Y+6, r23	; 0x06
     95a:	6d 83       	std	Y+5, r22	; 0x05
     95c:	28 2f       	mov	r18, r24
     95e:	3a 81       	ldd	r19, Y+2	; 0x02
     960:	4b 81       	ldd	r20, Y+3	; 0x03
     962:	5c 81       	ldd	r21, Y+4	; 0x04
     964:	7e 81       	ldd	r23, Y+6	; 0x06
     966:	80 e0       	ldi	r24, 0x00	; 0
     968:	90 e0       	ldi	r25, 0x00	; 0
     96a:	26 96       	adiw	r28, 0x06	; 6
     96c:	0f b6       	in	r0, 0x3f	; 63
     96e:	f8 94       	cli
     970:	de bf       	out	0x3e, r29	; 62
     972:	0f be       	out	0x3f, r0	; 63
     974:	cd bf       	out	0x3d, r28	; 61
     976:	df 91       	pop	r29
     978:	cf 91       	pop	r28
     97a:	08 95       	ret

0000097c <_Z19Timing_Get_Time_Secv>:
     97c:	cf 92       	push	r12
     97e:	df 92       	push	r13
     980:	ef 92       	push	r14
     982:	ff 92       	push	r15
     984:	cf 93       	push	r28
     986:	df 93       	push	r29
     988:	00 d0       	rcall	.+0      	; 0x98a <_Z19Timing_Get_Time_Secv+0xe>
     98a:	00 d0       	rcall	.+0      	; 0x98c <_Z19Timing_Get_Time_Secv+0x10>
     98c:	00 d0       	rcall	.+0      	; 0x98e <_Z19Timing_Get_Time_Secv+0x12>
     98e:	cd b7       	in	r28, 0x3d	; 61
     990:	de b7       	in	r29, 0x3e	; 62
     992:	0e 94 93 04 	call	0x926	; 0x926 <_Z15Timing_Get_Timev>
     996:	29 83       	std	Y+1, r18	; 0x01
     998:	3a 83       	std	Y+2, r19	; 0x02
     99a:	4b 83       	std	Y+3, r20	; 0x03
     99c:	5c 83       	std	Y+4, r21	; 0x04
     99e:	6d 83       	std	Y+5, r22	; 0x05
     9a0:	7e 83       	std	Y+6, r23	; 0x06
     9a2:	69 81       	ldd	r22, Y+1	; 0x01
     9a4:	7a 81       	ldd	r23, Y+2	; 0x02
     9a6:	8b 81       	ldd	r24, Y+3	; 0x03
     9a8:	9c 81       	ldd	r25, Y+4	; 0x04
     9aa:	0e 94 87 07 	call	0xf0e	; 0xf0e <__floatunsisf>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	4a e7       	ldi	r20, 0x7A	; 122
     9b4:	54 e4       	ldi	r21, 0x44	; 68
     9b6:	0e 94 df 06 	call	0xdbe	; 0xdbe <__divsf3>
     9ba:	6b 01       	movw	r12, r22
     9bc:	7c 01       	movw	r14, r24
     9be:	6d 81       	ldd	r22, Y+5	; 0x05
     9c0:	7e 81       	ldd	r23, Y+6	; 0x06
     9c2:	80 e0       	ldi	r24, 0x00	; 0
     9c4:	90 e0       	ldi	r25, 0x00	; 0
     9c6:	0e 94 87 07 	call	0xf0e	; 0xf0e <__floatunsisf>
     9ca:	20 e0       	ldi	r18, 0x00	; 0
     9cc:	34 e2       	ldi	r19, 0x24	; 36
     9ce:	44 e7       	ldi	r20, 0x74	; 116
     9d0:	59 e4       	ldi	r21, 0x49	; 73
     9d2:	0e 94 df 06 	call	0xdbe	; 0xdbe <__divsf3>
     9d6:	a7 01       	movw	r20, r14
     9d8:	96 01       	movw	r18, r12
     9da:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <__addsf3>
     9de:	26 96       	adiw	r28, 0x06	; 6
     9e0:	0f b6       	in	r0, 0x3f	; 63
     9e2:	f8 94       	cli
     9e4:	de bf       	out	0x3e, r29	; 62
     9e6:	0f be       	out	0x3f, r0	; 63
     9e8:	cd bf       	out	0x3d, r28	; 61
     9ea:	df 91       	pop	r29
     9ec:	cf 91       	pop	r28
     9ee:	ff 90       	pop	r15
     9f0:	ef 90       	pop	r14
     9f2:	df 90       	pop	r13
     9f4:	cf 90       	pop	r12
     9f6:	08 95       	ret

000009f8 <_Z20Timing_Seconds_SincePK6Time_t>:
 * This function takes a start time and calculates the time since that time, it returns it in the Time struct.
 * @param p_time_start a pointer to a start time struct
 * @return (Time_t) Time since the other time.
 */
float  Timing_Seconds_Since(const Time_t* time_start_p )
{
     9f8:	4f 92       	push	r4
     9fa:	5f 92       	push	r5
     9fc:	6f 92       	push	r6
     9fe:	7f 92       	push	r7
     a00:	8f 92       	push	r8
     a02:	9f 92       	push	r9
     a04:	af 92       	push	r10
     a06:	bf 92       	push	r11
     a08:	cf 92       	push	r12
     a0a:	df 92       	push	r13
     a0c:	ef 92       	push	r14
     a0e:	ff 92       	push	r15
     a10:	cf 93       	push	r28
     a12:	df 93       	push	r29
     a14:	ec 01       	movw	r28, r24
    float currTime = Timing_Get_Time_Sec();
     a16:	0e 94 be 04 	call	0x97c	; 0x97c <_Z19Timing_Get_Time_Secv>
     a1a:	6b 01       	movw	r12, r22
     a1c:	7c 01       	movw	r14, r24

    float updateMilli = time_start_p->millisec;
     a1e:	68 81       	ld	r22, Y
     a20:	79 81       	ldd	r23, Y+1	; 0x01
     a22:	8a 81       	ldd	r24, Y+2	; 0x02
     a24:	9b 81       	ldd	r25, Y+3	; 0x03
     a26:	0e 94 87 07 	call	0xf0e	; 0xf0e <__floatunsisf>
     a2a:	4b 01       	movw	r8, r22
     a2c:	5c 01       	movw	r10, r24
    updateMilli /= 1000.0;
    float updateMicro = time_start_p->microsec;
     a2e:	6c 81       	ldd	r22, Y+4	; 0x04
     a30:	7d 81       	ldd	r23, Y+5	; 0x05
     a32:	80 e0       	ldi	r24, 0x00	; 0
     a34:	90 e0       	ldi	r25, 0x00	; 0
     a36:	0e 94 87 07 	call	0xf0e	; 0xf0e <__floatunsisf>
     a3a:	2b 01       	movw	r4, r22
     a3c:	3c 01       	movw	r6, r24
    updateMicro /= 1000000.0;

    float delta_time = currTime - (updateMicro + updateMilli);

    return delta_time;
     a3e:	20 e0       	ldi	r18, 0x00	; 0
     a40:	30 e0       	ldi	r19, 0x00	; 0
     a42:	4a e7       	ldi	r20, 0x7A	; 122
     a44:	54 e4       	ldi	r21, 0x44	; 68
     a46:	c5 01       	movw	r24, r10
     a48:	b4 01       	movw	r22, r8
     a4a:	0e 94 df 06 	call	0xdbe	; 0xdbe <__divsf3>
     a4e:	4b 01       	movw	r8, r22
     a50:	5c 01       	movw	r10, r24
     a52:	20 e0       	ldi	r18, 0x00	; 0
     a54:	34 e2       	ldi	r19, 0x24	; 36
     a56:	44 e7       	ldi	r20, 0x74	; 116
     a58:	59 e4       	ldi	r21, 0x49	; 73
     a5a:	c3 01       	movw	r24, r6
     a5c:	b2 01       	movw	r22, r4
     a5e:	0e 94 df 06 	call	0xdbe	; 0xdbe <__divsf3>
     a62:	9b 01       	movw	r18, r22
     a64:	ac 01       	movw	r20, r24
     a66:	c5 01       	movw	r24, r10
     a68:	b4 01       	movw	r22, r8
     a6a:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <__addsf3>
     a6e:	9b 01       	movw	r18, r22
     a70:	ac 01       	movw	r20, r24
     a72:	c7 01       	movw	r24, r14
     a74:	b6 01       	movw	r22, r12
     a76:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__subsf3>
}
     a7a:	df 91       	pop	r29
     a7c:	cf 91       	pop	r28
     a7e:	ff 90       	pop	r15
     a80:	ef 90       	pop	r14
     a82:	df 90       	pop	r13
     a84:	cf 90       	pop	r12
     a86:	bf 90       	pop	r11
     a88:	af 90       	pop	r10
     a8a:	9f 90       	pop	r9
     a8c:	8f 90       	pop	r8
     a8e:	7f 90       	pop	r7
     a90:	6f 90       	pop	r6
     a92:	5f 90       	pop	r5
     a94:	4f 90       	pop	r4
     a96:	08 95       	ret

00000a98 <__vector_21>:

/** This is the Interrupt Service Routine for the Timer0 Compare A feature.
 * You'll need to set the compare flags properly for it to work.
 */
ISR(TIMER0_COMPA_vect)
{
     a98:	1f 92       	push	r1
     a9a:	0f 92       	push	r0
     a9c:	0f b6       	in	r0, 0x3f	; 63
     a9e:	0f 92       	push	r0
     aa0:	11 24       	eor	r1, r1
     aa2:	8f 93       	push	r24
     aa4:	9f 93       	push	r25
     aa6:	af 93       	push	r26
     aa8:	bf 93       	push	r27
    
    // YOU NEED TO RESET THE Timer0 Value to 0 again!
    TCNT0 = 0;
     aaa:	16 bc       	out	0x26, r1	; 38
    // take care of upticks of both our internal and external variables.
    _count_ms ++;
     aac:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <_ZL9_count_ms>
     ab0:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <_ZL9_count_ms+0x1>
     ab4:	a0 91 64 01 	lds	r26, 0x0164	; 0x800164 <_ZL9_count_ms+0x2>
     ab8:	b0 91 65 01 	lds	r27, 0x0165	; 0x800165 <_ZL9_count_ms+0x3>
     abc:	01 96       	adiw	r24, 0x01	; 1
     abe:	a1 1d       	adc	r26, r1
     ac0:	b1 1d       	adc	r27, r1
     ac2:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <_ZL9_count_ms>
     ac6:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <_ZL9_count_ms+0x1>
     aca:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <_ZL9_count_ms+0x2>
     ace:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <_ZL9_count_ms+0x3>

}
     ad2:	bf 91       	pop	r27
     ad4:	af 91       	pop	r26
     ad6:	9f 91       	pop	r25
     ad8:	8f 91       	pop	r24
     ada:	0f 90       	pop	r0
     adc:	0f be       	out	0x3f, r0	; 63
     ade:	0f 90       	pop	r0
     ae0:	1f 90       	pop	r1
     ae2:	18 95       	reti

00000ae4 <_Z8i2c_initv>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
     ae4:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
     ae8:	88 e4       	ldi	r24, 0x48	; 72
     aea:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
     aee:	08 95       	ret

00000af0 <_Z9i2c_starth>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     af0:	94 ea       	ldi	r25, 0xA4	; 164
     af2:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
     af6:	ec eb       	ldi	r30, 0xBC	; 188
     af8:	f0 e0       	ldi	r31, 0x00	; 0
     afa:	90 81       	ld	r25, Z
     afc:	99 23       	and	r25, r25
     afe:	ec f7       	brge	.-6      	; 0xafa <_Z9i2c_starth+0xa>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
     b00:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
     b04:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
     b06:	98 30       	cpi	r25, 0x08	; 8
     b08:	11 f0       	breq	.+4      	; 0xb0e <__stack+0xf>
     b0a:	90 31       	cpi	r25, 0x10	; 16
     b0c:	a1 f4       	brne	.+40     	; 0xb36 <__stack+0x37>

	// send device address
	TWDR = address;
     b0e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
	TWCR = (1<<TWINT) | (1<<TWEN);
     b12:	84 e8       	ldi	r24, 0x84	; 132
     b14:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
     b18:	ec eb       	ldi	r30, 0xBC	; 188
     b1a:	f0 e0       	ldi	r31, 0x00	; 0
     b1c:	80 81       	ld	r24, Z
     b1e:	88 23       	and	r24, r24
     b20:	ec f7       	brge	.-6      	; 0xb1c <__stack+0x1d>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
     b22:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
     b26:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
     b28:	98 31       	cpi	r25, 0x18	; 24
     b2a:	39 f0       	breq	.+14     	; 0xb3a <__stack+0x3b>
	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
     b2c:	81 e0       	ldi	r24, 0x01	; 1
     b2e:	90 34       	cpi	r25, 0x40	; 64
     b30:	29 f4       	brne	.+10     	; 0xb3c <__stack+0x3d>
     b32:	80 e0       	ldi	r24, 0x00	; 0
     b34:	08 95       	ret
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	08 95       	ret

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;

	return 0;
     b3a:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
     b3c:	08 95       	ret

00000b3e <_Z14i2c_start_waith>:
 If device is busy, use ack polling to wait until device is ready
 
 Input:   address and transfer direction of I2C device
*************************************************************************/
void i2c_start_wait(unsigned char address)
{
     b3e:	cf 93       	push	r28
     b40:	df 93       	push	r29


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     b42:	ec eb       	ldi	r30, 0xBC	; 188
     b44:	f0 e0       	ldi	r31, 0x00	; 0
     b46:	24 ea       	ldi	r18, 0xA4	; 164
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
     b48:	a9 eb       	ldi	r26, 0xB9	; 185
     b4a:	b0 e0       	ldi	r27, 0x00	; 0
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
     b4c:	cb eb       	ldi	r28, 0xBB	; 187
     b4e:	d0 e0       	ldi	r29, 0x00	; 0
    	TWCR = (1<<TWINT) | (1<<TWEN);
     b50:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     b52:	44 e9       	ldi	r20, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     b54:	20 83       	st	Z, r18
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
     b56:	90 81       	ld	r25, Z
     b58:	99 23       	and	r25, r25
     b5a:	ec f7       	brge	.-6      	; 0xb56 <_Z14i2c_start_waith+0x18>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
     b5c:	9c 91       	ld	r25, X
     b5e:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
     b60:	98 30       	cpi	r25, 0x08	; 8
     b62:	11 f0       	breq	.+4      	; 0xb68 <_Z14i2c_start_waith+0x2a>
     b64:	90 31       	cpi	r25, 0x10	; 16
     b66:	b1 f7       	brne	.-20     	; 0xb54 <_Z14i2c_start_waith+0x16>
    
    	// send device address
    	TWDR = address;
     b68:	88 83       	st	Y, r24
    	TWCR = (1<<TWINT) | (1<<TWEN);
     b6a:	30 83       	st	Z, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
     b6c:	90 81       	ld	r25, Z
     b6e:	99 23       	and	r25, r25
     b70:	ec f7       	brge	.-6      	; 0xb6c <_Z14i2c_start_waith+0x2e>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
     b72:	9c 91       	ld	r25, X
     b74:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
     b76:	90 32       	cpi	r25, 0x20	; 32
     b78:	11 f0       	breq	.+4      	; 0xb7e <_Z14i2c_start_waith+0x40>
     b7a:	98 35       	cpi	r25, 0x58	; 88
     b7c:	29 f4       	brne	.+10     	; 0xb88 <_Z14i2c_start_waith+0x4a>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     b7e:	40 83       	st	Z, r20
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
     b80:	90 81       	ld	r25, Z
     b82:	94 fd       	sbrc	r25, 4
     b84:	fd cf       	rjmp	.-6      	; 0xb80 <_Z14i2c_start_waith+0x42>
     b86:	e6 cf       	rjmp	.-52     	; 0xb54 <_Z14i2c_start_waith+0x16>
    	}
    	//if( twst != TW_MT_SLA_ACK) return 1;
    	break;
     }

}/* i2c_start_wait */
     b88:	df 91       	pop	r29
     b8a:	cf 91       	pop	r28
     b8c:	08 95       	ret

00000b8e <_Z13i2c_rep_starth>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
     b8e:	0e 94 78 05 	call	0xaf0	; 0xaf0 <_Z9i2c_starth>

}/* i2c_rep_start */
     b92:	08 95       	ret

00000b94 <_Z8i2c_stopv>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     b94:	84 e9       	ldi	r24, 0x94	; 148
     b96:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
     b9a:	ec eb       	ldi	r30, 0xBC	; 188
     b9c:	f0 e0       	ldi	r31, 0x00	; 0
     b9e:	80 81       	ld	r24, Z
     ba0:	84 fd       	sbrc	r24, 4
     ba2:	fd cf       	rjmp	.-6      	; 0xb9e <_Z8i2c_stopv+0xa>

}/* i2c_stop */
     ba4:	08 95       	ret

00000ba6 <_Z9i2c_writeh>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
     ba6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
	TWCR = (1<<TWINT) | (1<<TWEN);
     baa:	84 e8       	ldi	r24, 0x84	; 132
     bac:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
     bb0:	ec eb       	ldi	r30, 0xBC	; 188
     bb2:	f0 e0       	ldi	r31, 0x00	; 0
     bb4:	80 81       	ld	r24, Z
     bb6:	88 23       	and	r24, r24
     bb8:	ec f7       	brge	.-6      	; 0xbb4 <_Z9i2c_writeh+0xe>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
     bba:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
     bbe:	98 7f       	andi	r25, 0xF8	; 248
     bc0:	81 e0       	ldi	r24, 0x01	; 1
     bc2:	98 32       	cpi	r25, 0x28	; 40
     bc4:	09 f4       	brne	.+2      	; 0xbc8 <_Z9i2c_writeh+0x22>
     bc6:	80 e0       	ldi	r24, 0x00	; 0
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
     bc8:	08 95       	ret

00000bca <_Z11i2c_readAckv>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     bca:	84 ec       	ldi	r24, 0xC4	; 196
     bcc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while(!(TWCR & (1<<TWINT)));    
     bd0:	ec eb       	ldi	r30, 0xBC	; 188
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	80 81       	ld	r24, Z
     bd6:	88 23       	and	r24, r24
     bd8:	ec f7       	brge	.-6      	; 0xbd4 <_Z11i2c_readAckv+0xa>

    return TWDR;
     bda:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>

}/* i2c_readAck */
     bde:	08 95       	ret

00000be0 <_Z11i2c_readNakv>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
     be0:	84 e8       	ldi	r24, 0x84	; 132
     be2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while(!(TWCR & (1<<TWINT)));
     be6:	ec eb       	ldi	r30, 0xBC	; 188
     be8:	f0 e0       	ldi	r31, 0x00	; 0
     bea:	80 81       	ld	r24, Z
     bec:	88 23       	and	r24, r24
     bee:	ec f7       	brge	.-6      	; 0xbea <_Z11i2c_readNakv+0xa>
	
    return TWDR;
     bf0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>

}/* i2c_readNak */
     bf4:	08 95       	ret

00000bf6 <__subsf3>:
     bf6:	50 58       	subi	r21, 0x80	; 128

00000bf8 <__addsf3>:
     bf8:	bb 27       	eor	r27, r27
     bfa:	aa 27       	eor	r26, r26
     bfc:	0e 94 13 06 	call	0xc26	; 0xc26 <__addsf3x>
     c00:	0c 94 26 08 	jmp	0x104c	; 0x104c <__fp_round>
     c04:	0e 94 18 08 	call	0x1030	; 0x1030 <__fp_pscA>
     c08:	38 f0       	brcs	.+14     	; 0xc18 <__addsf3+0x20>
     c0a:	0e 94 1f 08 	call	0x103e	; 0x103e <__fp_pscB>
     c0e:	20 f0       	brcs	.+8      	; 0xc18 <__addsf3+0x20>
     c10:	39 f4       	brne	.+14     	; 0xc20 <__addsf3+0x28>
     c12:	9f 3f       	cpi	r25, 0xFF	; 255
     c14:	19 f4       	brne	.+6      	; 0xc1c <__addsf3+0x24>
     c16:	26 f4       	brtc	.+8      	; 0xc20 <__addsf3+0x28>
     c18:	0c 94 ee 07 	jmp	0xfdc	; 0xfdc <__fp_nan>
     c1c:	0e f4       	brtc	.+2      	; 0xc20 <__addsf3+0x28>
     c1e:	e0 95       	com	r30
     c20:	e7 fb       	bst	r30, 7
     c22:	0c 94 e8 07 	jmp	0xfd0	; 0xfd0 <__fp_inf>

00000c26 <__addsf3x>:
     c26:	e9 2f       	mov	r30, r25
     c28:	0e 94 37 08 	call	0x106e	; 0x106e <__fp_split3>
     c2c:	58 f3       	brcs	.-42     	; 0xc04 <__addsf3+0xc>
     c2e:	ba 17       	cp	r27, r26
     c30:	62 07       	cpc	r22, r18
     c32:	73 07       	cpc	r23, r19
     c34:	84 07       	cpc	r24, r20
     c36:	95 07       	cpc	r25, r21
     c38:	20 f0       	brcs	.+8      	; 0xc42 <__addsf3x+0x1c>
     c3a:	79 f4       	brne	.+30     	; 0xc5a <__addsf3x+0x34>
     c3c:	a6 f5       	brtc	.+104    	; 0xca6 <__addsf3x+0x80>
     c3e:	0c 94 59 08 	jmp	0x10b2	; 0x10b2 <__fp_zero>
     c42:	0e f4       	brtc	.+2      	; 0xc46 <__addsf3x+0x20>
     c44:	e0 95       	com	r30
     c46:	0b 2e       	mov	r0, r27
     c48:	ba 2f       	mov	r27, r26
     c4a:	a0 2d       	mov	r26, r0
     c4c:	0b 01       	movw	r0, r22
     c4e:	b9 01       	movw	r22, r18
     c50:	90 01       	movw	r18, r0
     c52:	0c 01       	movw	r0, r24
     c54:	ca 01       	movw	r24, r20
     c56:	a0 01       	movw	r20, r0
     c58:	11 24       	eor	r1, r1
     c5a:	ff 27       	eor	r31, r31
     c5c:	59 1b       	sub	r21, r25
     c5e:	99 f0       	breq	.+38     	; 0xc86 <__addsf3x+0x60>
     c60:	59 3f       	cpi	r21, 0xF9	; 249
     c62:	50 f4       	brcc	.+20     	; 0xc78 <__addsf3x+0x52>
     c64:	50 3e       	cpi	r21, 0xE0	; 224
     c66:	68 f1       	brcs	.+90     	; 0xcc2 <__addsf3x+0x9c>
     c68:	1a 16       	cp	r1, r26
     c6a:	f0 40       	sbci	r31, 0x00	; 0
     c6c:	a2 2f       	mov	r26, r18
     c6e:	23 2f       	mov	r18, r19
     c70:	34 2f       	mov	r19, r20
     c72:	44 27       	eor	r20, r20
     c74:	58 5f       	subi	r21, 0xF8	; 248
     c76:	f3 cf       	rjmp	.-26     	; 0xc5e <__addsf3x+0x38>
     c78:	46 95       	lsr	r20
     c7a:	37 95       	ror	r19
     c7c:	27 95       	ror	r18
     c7e:	a7 95       	ror	r26
     c80:	f0 40       	sbci	r31, 0x00	; 0
     c82:	53 95       	inc	r21
     c84:	c9 f7       	brne	.-14     	; 0xc78 <__addsf3x+0x52>
     c86:	7e f4       	brtc	.+30     	; 0xca6 <__addsf3x+0x80>
     c88:	1f 16       	cp	r1, r31
     c8a:	ba 0b       	sbc	r27, r26
     c8c:	62 0b       	sbc	r22, r18
     c8e:	73 0b       	sbc	r23, r19
     c90:	84 0b       	sbc	r24, r20
     c92:	ba f0       	brmi	.+46     	; 0xcc2 <__addsf3x+0x9c>
     c94:	91 50       	subi	r25, 0x01	; 1
     c96:	a1 f0       	breq	.+40     	; 0xcc0 <__addsf3x+0x9a>
     c98:	ff 0f       	add	r31, r31
     c9a:	bb 1f       	adc	r27, r27
     c9c:	66 1f       	adc	r22, r22
     c9e:	77 1f       	adc	r23, r23
     ca0:	88 1f       	adc	r24, r24
     ca2:	c2 f7       	brpl	.-16     	; 0xc94 <__addsf3x+0x6e>
     ca4:	0e c0       	rjmp	.+28     	; 0xcc2 <__addsf3x+0x9c>
     ca6:	ba 0f       	add	r27, r26
     ca8:	62 1f       	adc	r22, r18
     caa:	73 1f       	adc	r23, r19
     cac:	84 1f       	adc	r24, r20
     cae:	48 f4       	brcc	.+18     	; 0xcc2 <__addsf3x+0x9c>
     cb0:	87 95       	ror	r24
     cb2:	77 95       	ror	r23
     cb4:	67 95       	ror	r22
     cb6:	b7 95       	ror	r27
     cb8:	f7 95       	ror	r31
     cba:	9e 3f       	cpi	r25, 0xFE	; 254
     cbc:	08 f0       	brcs	.+2      	; 0xcc0 <__addsf3x+0x9a>
     cbe:	b0 cf       	rjmp	.-160    	; 0xc20 <__addsf3+0x28>
     cc0:	93 95       	inc	r25
     cc2:	88 0f       	add	r24, r24
     cc4:	08 f0       	brcs	.+2      	; 0xcc8 <__addsf3x+0xa2>
     cc6:	99 27       	eor	r25, r25
     cc8:	ee 0f       	add	r30, r30
     cca:	97 95       	ror	r25
     ccc:	87 95       	ror	r24
     cce:	08 95       	ret
     cd0:	0e 94 18 08 	call	0x1030	; 0x1030 <__fp_pscA>
     cd4:	60 f0       	brcs	.+24     	; 0xcee <__addsf3x+0xc8>
     cd6:	80 e8       	ldi	r24, 0x80	; 128
     cd8:	91 e0       	ldi	r25, 0x01	; 1
     cda:	09 f4       	brne	.+2      	; 0xcde <__addsf3x+0xb8>
     cdc:	9e ef       	ldi	r25, 0xFE	; 254
     cde:	0e 94 1f 08 	call	0x103e	; 0x103e <__fp_pscB>
     ce2:	28 f0       	brcs	.+10     	; 0xcee <__addsf3x+0xc8>
     ce4:	40 e8       	ldi	r20, 0x80	; 128
     ce6:	51 e0       	ldi	r21, 0x01	; 1
     ce8:	71 f4       	brne	.+28     	; 0xd06 <atan2+0x10>
     cea:	5e ef       	ldi	r21, 0xFE	; 254
     cec:	0c c0       	rjmp	.+24     	; 0xd06 <atan2+0x10>
     cee:	0c 94 ee 07 	jmp	0xfdc	; 0xfdc <__fp_nan>
     cf2:	0c 94 59 08 	jmp	0x10b2	; 0x10b2 <__fp_zero>

00000cf6 <atan2>:
     cf6:	e9 2f       	mov	r30, r25
     cf8:	e0 78       	andi	r30, 0x80	; 128
     cfa:	0e 94 37 08 	call	0x106e	; 0x106e <__fp_split3>
     cfe:	40 f3       	brcs	.-48     	; 0xcd0 <__addsf3x+0xaa>
     d00:	09 2e       	mov	r0, r25
     d02:	05 2a       	or	r0, r21
     d04:	b1 f3       	breq	.-20     	; 0xcf2 <__addsf3x+0xcc>
     d06:	26 17       	cp	r18, r22
     d08:	37 07       	cpc	r19, r23
     d0a:	48 07       	cpc	r20, r24
     d0c:	59 07       	cpc	r21, r25
     d0e:	38 f0       	brcs	.+14     	; 0xd1e <atan2+0x28>
     d10:	0e 2e       	mov	r0, r30
     d12:	07 f8       	bld	r0, 7
     d14:	e0 25       	eor	r30, r0
     d16:	69 f0       	breq	.+26     	; 0xd32 <atan2+0x3c>
     d18:	e0 25       	eor	r30, r0
     d1a:	e0 64       	ori	r30, 0x40	; 64
     d1c:	0a c0       	rjmp	.+20     	; 0xd32 <atan2+0x3c>
     d1e:	ef 63       	ori	r30, 0x3F	; 63
     d20:	07 f8       	bld	r0, 7
     d22:	00 94       	com	r0
     d24:	07 fa       	bst	r0, 7
     d26:	db 01       	movw	r26, r22
     d28:	b9 01       	movw	r22, r18
     d2a:	9d 01       	movw	r18, r26
     d2c:	dc 01       	movw	r26, r24
     d2e:	ca 01       	movw	r24, r20
     d30:	ad 01       	movw	r20, r26
     d32:	ef 93       	push	r30
     d34:	0e 94 f6 06 	call	0xdec	; 0xdec <__divsf3_pse>
     d38:	0e 94 26 08 	call	0x104c	; 0x104c <__fp_round>
     d3c:	0e 94 ab 06 	call	0xd56	; 0xd56 <atan>
     d40:	5f 91       	pop	r21
     d42:	55 23       	and	r21, r21
     d44:	39 f0       	breq	.+14     	; 0xd54 <atan2+0x5e>
     d46:	2b ed       	ldi	r18, 0xDB	; 219
     d48:	3f e0       	ldi	r19, 0x0F	; 15
     d4a:	49 e4       	ldi	r20, 0x49	; 73
     d4c:	50 fd       	sbrc	r21, 0
     d4e:	49 ec       	ldi	r20, 0xC9	; 201
     d50:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__addsf3>
     d54:	08 95       	ret

00000d56 <atan>:
     d56:	df 93       	push	r29
     d58:	dd 27       	eor	r29, r29
     d5a:	b9 2f       	mov	r27, r25
     d5c:	bf 77       	andi	r27, 0x7F	; 127
     d5e:	40 e8       	ldi	r20, 0x80	; 128
     d60:	5f e3       	ldi	r21, 0x3F	; 63
     d62:	16 16       	cp	r1, r22
     d64:	17 06       	cpc	r1, r23
     d66:	48 07       	cpc	r20, r24
     d68:	5b 07       	cpc	r21, r27
     d6a:	18 f4       	brcc	.+6      	; 0xd72 <atan+0x1c>
     d6c:	d9 2f       	mov	r29, r25
     d6e:	0e 94 60 08 	call	0x10c0	; 0x10c0 <inverse>
     d72:	9f 93       	push	r25
     d74:	8f 93       	push	r24
     d76:	7f 93       	push	r23
     d78:	6f 93       	push	r22
     d7a:	0e 94 d5 08 	call	0x11aa	; 0x11aa <square>
     d7e:	ec ea       	ldi	r30, 0xAC	; 172
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <__fp_powser>
     d86:	0e 94 26 08 	call	0x104c	; 0x104c <__fp_round>
     d8a:	2f 91       	pop	r18
     d8c:	3f 91       	pop	r19
     d8e:	4f 91       	pop	r20
     d90:	5f 91       	pop	r21
     d92:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <__mulsf3x>
     d96:	dd 23       	and	r29, r29
     d98:	51 f0       	breq	.+20     	; 0xdae <atan+0x58>
     d9a:	90 58       	subi	r25, 0x80	; 128
     d9c:	a2 ea       	ldi	r26, 0xA2	; 162
     d9e:	2a ed       	ldi	r18, 0xDA	; 218
     da0:	3f e0       	ldi	r19, 0x0F	; 15
     da2:	49 ec       	ldi	r20, 0xC9	; 201
     da4:	5f e3       	ldi	r21, 0x3F	; 63
     da6:	d0 78       	andi	r29, 0x80	; 128
     da8:	5d 27       	eor	r21, r29
     daa:	0e 94 13 06 	call	0xc26	; 0xc26 <__addsf3x>
     dae:	df 91       	pop	r29
     db0:	0c 94 26 08 	jmp	0x104c	; 0x104c <__fp_round>

00000db4 <__cmpsf2>:
     db4:	0e 94 c4 07 	call	0xf88	; 0xf88 <__fp_cmp>
     db8:	08 f4       	brcc	.+2      	; 0xdbc <__cmpsf2+0x8>
     dba:	81 e0       	ldi	r24, 0x01	; 1
     dbc:	08 95       	ret

00000dbe <__divsf3>:
     dbe:	0e 94 f3 06 	call	0xde6	; 0xde6 <__divsf3x>
     dc2:	0c 94 26 08 	jmp	0x104c	; 0x104c <__fp_round>
     dc6:	0e 94 1f 08 	call	0x103e	; 0x103e <__fp_pscB>
     dca:	58 f0       	brcs	.+22     	; 0xde2 <__divsf3+0x24>
     dcc:	0e 94 18 08 	call	0x1030	; 0x1030 <__fp_pscA>
     dd0:	40 f0       	brcs	.+16     	; 0xde2 <__divsf3+0x24>
     dd2:	29 f4       	brne	.+10     	; 0xdde <__divsf3+0x20>
     dd4:	5f 3f       	cpi	r21, 0xFF	; 255
     dd6:	29 f0       	breq	.+10     	; 0xde2 <__divsf3+0x24>
     dd8:	0c 94 e8 07 	jmp	0xfd0	; 0xfd0 <__fp_inf>
     ddc:	51 11       	cpse	r21, r1
     dde:	0c 94 5a 08 	jmp	0x10b4	; 0x10b4 <__fp_szero>
     de2:	0c 94 ee 07 	jmp	0xfdc	; 0xfdc <__fp_nan>

00000de6 <__divsf3x>:
     de6:	0e 94 37 08 	call	0x106e	; 0x106e <__fp_split3>
     dea:	68 f3       	brcs	.-38     	; 0xdc6 <__divsf3+0x8>

00000dec <__divsf3_pse>:
     dec:	99 23       	and	r25, r25
     dee:	b1 f3       	breq	.-20     	; 0xddc <__divsf3+0x1e>
     df0:	55 23       	and	r21, r21
     df2:	91 f3       	breq	.-28     	; 0xdd8 <__divsf3+0x1a>
     df4:	95 1b       	sub	r25, r21
     df6:	55 0b       	sbc	r21, r21
     df8:	bb 27       	eor	r27, r27
     dfa:	aa 27       	eor	r26, r26
     dfc:	62 17       	cp	r22, r18
     dfe:	73 07       	cpc	r23, r19
     e00:	84 07       	cpc	r24, r20
     e02:	38 f0       	brcs	.+14     	; 0xe12 <__divsf3_pse+0x26>
     e04:	9f 5f       	subi	r25, 0xFF	; 255
     e06:	5f 4f       	sbci	r21, 0xFF	; 255
     e08:	22 0f       	add	r18, r18
     e0a:	33 1f       	adc	r19, r19
     e0c:	44 1f       	adc	r20, r20
     e0e:	aa 1f       	adc	r26, r26
     e10:	a9 f3       	breq	.-22     	; 0xdfc <__divsf3_pse+0x10>
     e12:	35 d0       	rcall	.+106    	; 0xe7e <__divsf3_pse+0x92>
     e14:	0e 2e       	mov	r0, r30
     e16:	3a f0       	brmi	.+14     	; 0xe26 <__divsf3_pse+0x3a>
     e18:	e0 e8       	ldi	r30, 0x80	; 128
     e1a:	32 d0       	rcall	.+100    	; 0xe80 <__divsf3_pse+0x94>
     e1c:	91 50       	subi	r25, 0x01	; 1
     e1e:	50 40       	sbci	r21, 0x00	; 0
     e20:	e6 95       	lsr	r30
     e22:	00 1c       	adc	r0, r0
     e24:	ca f7       	brpl	.-14     	; 0xe18 <__divsf3_pse+0x2c>
     e26:	2b d0       	rcall	.+86     	; 0xe7e <__divsf3_pse+0x92>
     e28:	fe 2f       	mov	r31, r30
     e2a:	29 d0       	rcall	.+82     	; 0xe7e <__divsf3_pse+0x92>
     e2c:	66 0f       	add	r22, r22
     e2e:	77 1f       	adc	r23, r23
     e30:	88 1f       	adc	r24, r24
     e32:	bb 1f       	adc	r27, r27
     e34:	26 17       	cp	r18, r22
     e36:	37 07       	cpc	r19, r23
     e38:	48 07       	cpc	r20, r24
     e3a:	ab 07       	cpc	r26, r27
     e3c:	b0 e8       	ldi	r27, 0x80	; 128
     e3e:	09 f0       	breq	.+2      	; 0xe42 <__divsf3_pse+0x56>
     e40:	bb 0b       	sbc	r27, r27
     e42:	80 2d       	mov	r24, r0
     e44:	bf 01       	movw	r22, r30
     e46:	ff 27       	eor	r31, r31
     e48:	93 58       	subi	r25, 0x83	; 131
     e4a:	5f 4f       	sbci	r21, 0xFF	; 255
     e4c:	3a f0       	brmi	.+14     	; 0xe5c <__divsf3_pse+0x70>
     e4e:	9e 3f       	cpi	r25, 0xFE	; 254
     e50:	51 05       	cpc	r21, r1
     e52:	78 f0       	brcs	.+30     	; 0xe72 <__divsf3_pse+0x86>
     e54:	0c 94 e8 07 	jmp	0xfd0	; 0xfd0 <__fp_inf>
     e58:	0c 94 5a 08 	jmp	0x10b4	; 0x10b4 <__fp_szero>
     e5c:	5f 3f       	cpi	r21, 0xFF	; 255
     e5e:	e4 f3       	brlt	.-8      	; 0xe58 <__divsf3_pse+0x6c>
     e60:	98 3e       	cpi	r25, 0xE8	; 232
     e62:	d4 f3       	brlt	.-12     	; 0xe58 <__divsf3_pse+0x6c>
     e64:	86 95       	lsr	r24
     e66:	77 95       	ror	r23
     e68:	67 95       	ror	r22
     e6a:	b7 95       	ror	r27
     e6c:	f7 95       	ror	r31
     e6e:	9f 5f       	subi	r25, 0xFF	; 255
     e70:	c9 f7       	brne	.-14     	; 0xe64 <__divsf3_pse+0x78>
     e72:	88 0f       	add	r24, r24
     e74:	91 1d       	adc	r25, r1
     e76:	96 95       	lsr	r25
     e78:	87 95       	ror	r24
     e7a:	97 f9       	bld	r25, 7
     e7c:	08 95       	ret
     e7e:	e1 e0       	ldi	r30, 0x01	; 1
     e80:	66 0f       	add	r22, r22
     e82:	77 1f       	adc	r23, r23
     e84:	88 1f       	adc	r24, r24
     e86:	bb 1f       	adc	r27, r27
     e88:	62 17       	cp	r22, r18
     e8a:	73 07       	cpc	r23, r19
     e8c:	84 07       	cpc	r24, r20
     e8e:	ba 07       	cpc	r27, r26
     e90:	20 f0       	brcs	.+8      	; 0xe9a <__divsf3_pse+0xae>
     e92:	62 1b       	sub	r22, r18
     e94:	73 0b       	sbc	r23, r19
     e96:	84 0b       	sbc	r24, r20
     e98:	ba 0b       	sbc	r27, r26
     e9a:	ee 1f       	adc	r30, r30
     e9c:	88 f7       	brcc	.-30     	; 0xe80 <__divsf3_pse+0x94>
     e9e:	e0 95       	com	r30
     ea0:	08 95       	ret

00000ea2 <__fixsfsi>:
     ea2:	0e 94 58 07 	call	0xeb0	; 0xeb0 <__fixunssfsi>
     ea6:	68 94       	set
     ea8:	b1 11       	cpse	r27, r1
     eaa:	0c 94 5a 08 	jmp	0x10b4	; 0x10b4 <__fp_szero>
     eae:	08 95       	ret

00000eb0 <__fixunssfsi>:
     eb0:	0e 94 3f 08 	call	0x107e	; 0x107e <__fp_splitA>
     eb4:	88 f0       	brcs	.+34     	; 0xed8 <__fixunssfsi+0x28>
     eb6:	9f 57       	subi	r25, 0x7F	; 127
     eb8:	98 f0       	brcs	.+38     	; 0xee0 <__fixunssfsi+0x30>
     eba:	b9 2f       	mov	r27, r25
     ebc:	99 27       	eor	r25, r25
     ebe:	b7 51       	subi	r27, 0x17	; 23
     ec0:	b0 f0       	brcs	.+44     	; 0xeee <__fixunssfsi+0x3e>
     ec2:	e1 f0       	breq	.+56     	; 0xefc <__fixunssfsi+0x4c>
     ec4:	66 0f       	add	r22, r22
     ec6:	77 1f       	adc	r23, r23
     ec8:	88 1f       	adc	r24, r24
     eca:	99 1f       	adc	r25, r25
     ecc:	1a f0       	brmi	.+6      	; 0xed4 <__fixunssfsi+0x24>
     ece:	ba 95       	dec	r27
     ed0:	c9 f7       	brne	.-14     	; 0xec4 <__fixunssfsi+0x14>
     ed2:	14 c0       	rjmp	.+40     	; 0xefc <__fixunssfsi+0x4c>
     ed4:	b1 30       	cpi	r27, 0x01	; 1
     ed6:	91 f0       	breq	.+36     	; 0xefc <__fixunssfsi+0x4c>
     ed8:	0e 94 59 08 	call	0x10b2	; 0x10b2 <__fp_zero>
     edc:	b1 e0       	ldi	r27, 0x01	; 1
     ede:	08 95       	ret
     ee0:	0c 94 59 08 	jmp	0x10b2	; 0x10b2 <__fp_zero>
     ee4:	67 2f       	mov	r22, r23
     ee6:	78 2f       	mov	r23, r24
     ee8:	88 27       	eor	r24, r24
     eea:	b8 5f       	subi	r27, 0xF8	; 248
     eec:	39 f0       	breq	.+14     	; 0xefc <__fixunssfsi+0x4c>
     eee:	b9 3f       	cpi	r27, 0xF9	; 249
     ef0:	cc f3       	brlt	.-14     	; 0xee4 <__fixunssfsi+0x34>
     ef2:	86 95       	lsr	r24
     ef4:	77 95       	ror	r23
     ef6:	67 95       	ror	r22
     ef8:	b3 95       	inc	r27
     efa:	d9 f7       	brne	.-10     	; 0xef2 <__fixunssfsi+0x42>
     efc:	3e f4       	brtc	.+14     	; 0xf0c <__fixunssfsi+0x5c>
     efe:	90 95       	com	r25
     f00:	80 95       	com	r24
     f02:	70 95       	com	r23
     f04:	61 95       	neg	r22
     f06:	7f 4f       	sbci	r23, 0xFF	; 255
     f08:	8f 4f       	sbci	r24, 0xFF	; 255
     f0a:	9f 4f       	sbci	r25, 0xFF	; 255
     f0c:	08 95       	ret

00000f0e <__floatunsisf>:
     f0e:	e8 94       	clt
     f10:	09 c0       	rjmp	.+18     	; 0xf24 <__floatsisf+0x12>

00000f12 <__floatsisf>:
     f12:	97 fb       	bst	r25, 7
     f14:	3e f4       	brtc	.+14     	; 0xf24 <__floatsisf+0x12>
     f16:	90 95       	com	r25
     f18:	80 95       	com	r24
     f1a:	70 95       	com	r23
     f1c:	61 95       	neg	r22
     f1e:	7f 4f       	sbci	r23, 0xFF	; 255
     f20:	8f 4f       	sbci	r24, 0xFF	; 255
     f22:	9f 4f       	sbci	r25, 0xFF	; 255
     f24:	99 23       	and	r25, r25
     f26:	a9 f0       	breq	.+42     	; 0xf52 <__floatsisf+0x40>
     f28:	f9 2f       	mov	r31, r25
     f2a:	96 e9       	ldi	r25, 0x96	; 150
     f2c:	bb 27       	eor	r27, r27
     f2e:	93 95       	inc	r25
     f30:	f6 95       	lsr	r31
     f32:	87 95       	ror	r24
     f34:	77 95       	ror	r23
     f36:	67 95       	ror	r22
     f38:	b7 95       	ror	r27
     f3a:	f1 11       	cpse	r31, r1
     f3c:	f8 cf       	rjmp	.-16     	; 0xf2e <__floatsisf+0x1c>
     f3e:	fa f4       	brpl	.+62     	; 0xf7e <__floatsisf+0x6c>
     f40:	bb 0f       	add	r27, r27
     f42:	11 f4       	brne	.+4      	; 0xf48 <__floatsisf+0x36>
     f44:	60 ff       	sbrs	r22, 0
     f46:	1b c0       	rjmp	.+54     	; 0xf7e <__floatsisf+0x6c>
     f48:	6f 5f       	subi	r22, 0xFF	; 255
     f4a:	7f 4f       	sbci	r23, 0xFF	; 255
     f4c:	8f 4f       	sbci	r24, 0xFF	; 255
     f4e:	9f 4f       	sbci	r25, 0xFF	; 255
     f50:	16 c0       	rjmp	.+44     	; 0xf7e <__floatsisf+0x6c>
     f52:	88 23       	and	r24, r24
     f54:	11 f0       	breq	.+4      	; 0xf5a <__floatsisf+0x48>
     f56:	96 e9       	ldi	r25, 0x96	; 150
     f58:	11 c0       	rjmp	.+34     	; 0xf7c <__floatsisf+0x6a>
     f5a:	77 23       	and	r23, r23
     f5c:	21 f0       	breq	.+8      	; 0xf66 <__floatsisf+0x54>
     f5e:	9e e8       	ldi	r25, 0x8E	; 142
     f60:	87 2f       	mov	r24, r23
     f62:	76 2f       	mov	r23, r22
     f64:	05 c0       	rjmp	.+10     	; 0xf70 <__floatsisf+0x5e>
     f66:	66 23       	and	r22, r22
     f68:	71 f0       	breq	.+28     	; 0xf86 <__floatsisf+0x74>
     f6a:	96 e8       	ldi	r25, 0x86	; 134
     f6c:	86 2f       	mov	r24, r22
     f6e:	70 e0       	ldi	r23, 0x00	; 0
     f70:	60 e0       	ldi	r22, 0x00	; 0
     f72:	2a f0       	brmi	.+10     	; 0xf7e <__floatsisf+0x6c>
     f74:	9a 95       	dec	r25
     f76:	66 0f       	add	r22, r22
     f78:	77 1f       	adc	r23, r23
     f7a:	88 1f       	adc	r24, r24
     f7c:	da f7       	brpl	.-10     	; 0xf74 <__floatsisf+0x62>
     f7e:	88 0f       	add	r24, r24
     f80:	96 95       	lsr	r25
     f82:	87 95       	ror	r24
     f84:	97 f9       	bld	r25, 7
     f86:	08 95       	ret

00000f88 <__fp_cmp>:
     f88:	99 0f       	add	r25, r25
     f8a:	00 08       	sbc	r0, r0
     f8c:	55 0f       	add	r21, r21
     f8e:	aa 0b       	sbc	r26, r26
     f90:	e0 e8       	ldi	r30, 0x80	; 128
     f92:	fe ef       	ldi	r31, 0xFE	; 254
     f94:	16 16       	cp	r1, r22
     f96:	17 06       	cpc	r1, r23
     f98:	e8 07       	cpc	r30, r24
     f9a:	f9 07       	cpc	r31, r25
     f9c:	c0 f0       	brcs	.+48     	; 0xfce <__fp_cmp+0x46>
     f9e:	12 16       	cp	r1, r18
     fa0:	13 06       	cpc	r1, r19
     fa2:	e4 07       	cpc	r30, r20
     fa4:	f5 07       	cpc	r31, r21
     fa6:	98 f0       	brcs	.+38     	; 0xfce <__fp_cmp+0x46>
     fa8:	62 1b       	sub	r22, r18
     faa:	73 0b       	sbc	r23, r19
     fac:	84 0b       	sbc	r24, r20
     fae:	95 0b       	sbc	r25, r21
     fb0:	39 f4       	brne	.+14     	; 0xfc0 <__fp_cmp+0x38>
     fb2:	0a 26       	eor	r0, r26
     fb4:	61 f0       	breq	.+24     	; 0xfce <__fp_cmp+0x46>
     fb6:	23 2b       	or	r18, r19
     fb8:	24 2b       	or	r18, r20
     fba:	25 2b       	or	r18, r21
     fbc:	21 f4       	brne	.+8      	; 0xfc6 <__fp_cmp+0x3e>
     fbe:	08 95       	ret
     fc0:	0a 26       	eor	r0, r26
     fc2:	09 f4       	brne	.+2      	; 0xfc6 <__fp_cmp+0x3e>
     fc4:	a1 40       	sbci	r26, 0x01	; 1
     fc6:	a6 95       	lsr	r26
     fc8:	8f ef       	ldi	r24, 0xFF	; 255
     fca:	81 1d       	adc	r24, r1
     fcc:	81 1d       	adc	r24, r1
     fce:	08 95       	ret

00000fd0 <__fp_inf>:
     fd0:	97 f9       	bld	r25, 7
     fd2:	9f 67       	ori	r25, 0x7F	; 127
     fd4:	80 e8       	ldi	r24, 0x80	; 128
     fd6:	70 e0       	ldi	r23, 0x00	; 0
     fd8:	60 e0       	ldi	r22, 0x00	; 0
     fda:	08 95       	ret

00000fdc <__fp_nan>:
     fdc:	9f ef       	ldi	r25, 0xFF	; 255
     fde:	80 ec       	ldi	r24, 0xC0	; 192
     fe0:	08 95       	ret

00000fe2 <__fp_powser>:
     fe2:	df 93       	push	r29
     fe4:	cf 93       	push	r28
     fe6:	1f 93       	push	r17
     fe8:	0f 93       	push	r16
     fea:	ff 92       	push	r15
     fec:	ef 92       	push	r14
     fee:	df 92       	push	r13
     ff0:	7b 01       	movw	r14, r22
     ff2:	8c 01       	movw	r16, r24
     ff4:	68 94       	set
     ff6:	06 c0       	rjmp	.+12     	; 0x1004 <__fp_powser+0x22>
     ff8:	da 2e       	mov	r13, r26
     ffa:	ef 01       	movw	r28, r30
     ffc:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <__mulsf3x>
    1000:	fe 01       	movw	r30, r28
    1002:	e8 94       	clt
    1004:	a5 91       	lpm	r26, Z+
    1006:	25 91       	lpm	r18, Z+
    1008:	35 91       	lpm	r19, Z+
    100a:	45 91       	lpm	r20, Z+
    100c:	55 91       	lpm	r21, Z+
    100e:	a6 f3       	brts	.-24     	; 0xff8 <__fp_powser+0x16>
    1010:	ef 01       	movw	r28, r30
    1012:	0e 94 13 06 	call	0xc26	; 0xc26 <__addsf3x>
    1016:	fe 01       	movw	r30, r28
    1018:	97 01       	movw	r18, r14
    101a:	a8 01       	movw	r20, r16
    101c:	da 94       	dec	r13
    101e:	69 f7       	brne	.-38     	; 0xffa <__fp_powser+0x18>
    1020:	df 90       	pop	r13
    1022:	ef 90       	pop	r14
    1024:	ff 90       	pop	r15
    1026:	0f 91       	pop	r16
    1028:	1f 91       	pop	r17
    102a:	cf 91       	pop	r28
    102c:	df 91       	pop	r29
    102e:	08 95       	ret

00001030 <__fp_pscA>:
    1030:	00 24       	eor	r0, r0
    1032:	0a 94       	dec	r0
    1034:	16 16       	cp	r1, r22
    1036:	17 06       	cpc	r1, r23
    1038:	18 06       	cpc	r1, r24
    103a:	09 06       	cpc	r0, r25
    103c:	08 95       	ret

0000103e <__fp_pscB>:
    103e:	00 24       	eor	r0, r0
    1040:	0a 94       	dec	r0
    1042:	12 16       	cp	r1, r18
    1044:	13 06       	cpc	r1, r19
    1046:	14 06       	cpc	r1, r20
    1048:	05 06       	cpc	r0, r21
    104a:	08 95       	ret

0000104c <__fp_round>:
    104c:	09 2e       	mov	r0, r25
    104e:	03 94       	inc	r0
    1050:	00 0c       	add	r0, r0
    1052:	11 f4       	brne	.+4      	; 0x1058 <__fp_round+0xc>
    1054:	88 23       	and	r24, r24
    1056:	52 f0       	brmi	.+20     	; 0x106c <__fp_round+0x20>
    1058:	bb 0f       	add	r27, r27
    105a:	40 f4       	brcc	.+16     	; 0x106c <__fp_round+0x20>
    105c:	bf 2b       	or	r27, r31
    105e:	11 f4       	brne	.+4      	; 0x1064 <__fp_round+0x18>
    1060:	60 ff       	sbrs	r22, 0
    1062:	04 c0       	rjmp	.+8      	; 0x106c <__fp_round+0x20>
    1064:	6f 5f       	subi	r22, 0xFF	; 255
    1066:	7f 4f       	sbci	r23, 0xFF	; 255
    1068:	8f 4f       	sbci	r24, 0xFF	; 255
    106a:	9f 4f       	sbci	r25, 0xFF	; 255
    106c:	08 95       	ret

0000106e <__fp_split3>:
    106e:	57 fd       	sbrc	r21, 7
    1070:	90 58       	subi	r25, 0x80	; 128
    1072:	44 0f       	add	r20, r20
    1074:	55 1f       	adc	r21, r21
    1076:	59 f0       	breq	.+22     	; 0x108e <__fp_splitA+0x10>
    1078:	5f 3f       	cpi	r21, 0xFF	; 255
    107a:	71 f0       	breq	.+28     	; 0x1098 <__fp_splitA+0x1a>
    107c:	47 95       	ror	r20

0000107e <__fp_splitA>:
    107e:	88 0f       	add	r24, r24
    1080:	97 fb       	bst	r25, 7
    1082:	99 1f       	adc	r25, r25
    1084:	61 f0       	breq	.+24     	; 0x109e <__fp_splitA+0x20>
    1086:	9f 3f       	cpi	r25, 0xFF	; 255
    1088:	79 f0       	breq	.+30     	; 0x10a8 <__fp_splitA+0x2a>
    108a:	87 95       	ror	r24
    108c:	08 95       	ret
    108e:	12 16       	cp	r1, r18
    1090:	13 06       	cpc	r1, r19
    1092:	14 06       	cpc	r1, r20
    1094:	55 1f       	adc	r21, r21
    1096:	f2 cf       	rjmp	.-28     	; 0x107c <__fp_split3+0xe>
    1098:	46 95       	lsr	r20
    109a:	f1 df       	rcall	.-30     	; 0x107e <__fp_splitA>
    109c:	08 c0       	rjmp	.+16     	; 0x10ae <__fp_splitA+0x30>
    109e:	16 16       	cp	r1, r22
    10a0:	17 06       	cpc	r1, r23
    10a2:	18 06       	cpc	r1, r24
    10a4:	99 1f       	adc	r25, r25
    10a6:	f1 cf       	rjmp	.-30     	; 0x108a <__fp_splitA+0xc>
    10a8:	86 95       	lsr	r24
    10aa:	71 05       	cpc	r23, r1
    10ac:	61 05       	cpc	r22, r1
    10ae:	08 94       	sec
    10b0:	08 95       	ret

000010b2 <__fp_zero>:
    10b2:	e8 94       	clt

000010b4 <__fp_szero>:
    10b4:	bb 27       	eor	r27, r27
    10b6:	66 27       	eor	r22, r22
    10b8:	77 27       	eor	r23, r23
    10ba:	cb 01       	movw	r24, r22
    10bc:	97 f9       	bld	r25, 7
    10be:	08 95       	ret

000010c0 <inverse>:
    10c0:	9b 01       	movw	r18, r22
    10c2:	ac 01       	movw	r20, r24
    10c4:	60 e0       	ldi	r22, 0x00	; 0
    10c6:	70 e0       	ldi	r23, 0x00	; 0
    10c8:	80 e8       	ldi	r24, 0x80	; 128
    10ca:	9f e3       	ldi	r25, 0x3F	; 63
    10cc:	0c 94 df 06 	jmp	0xdbe	; 0xdbe <__divsf3>

000010d0 <__mulsf3>:
    10d0:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <__mulsf3x>
    10d4:	0c 94 26 08 	jmp	0x104c	; 0x104c <__fp_round>
    10d8:	0e 94 18 08 	call	0x1030	; 0x1030 <__fp_pscA>
    10dc:	38 f0       	brcs	.+14     	; 0x10ec <__mulsf3+0x1c>
    10de:	0e 94 1f 08 	call	0x103e	; 0x103e <__fp_pscB>
    10e2:	20 f0       	brcs	.+8      	; 0x10ec <__mulsf3+0x1c>
    10e4:	95 23       	and	r25, r21
    10e6:	11 f0       	breq	.+4      	; 0x10ec <__mulsf3+0x1c>
    10e8:	0c 94 e8 07 	jmp	0xfd0	; 0xfd0 <__fp_inf>
    10ec:	0c 94 ee 07 	jmp	0xfdc	; 0xfdc <__fp_nan>
    10f0:	11 24       	eor	r1, r1
    10f2:	0c 94 5a 08 	jmp	0x10b4	; 0x10b4 <__fp_szero>

000010f6 <__mulsf3x>:
    10f6:	0e 94 37 08 	call	0x106e	; 0x106e <__fp_split3>
    10fa:	70 f3       	brcs	.-36     	; 0x10d8 <__mulsf3+0x8>

000010fc <__mulsf3_pse>:
    10fc:	95 9f       	mul	r25, r21
    10fe:	c1 f3       	breq	.-16     	; 0x10f0 <__mulsf3+0x20>
    1100:	95 0f       	add	r25, r21
    1102:	50 e0       	ldi	r21, 0x00	; 0
    1104:	55 1f       	adc	r21, r21
    1106:	62 9f       	mul	r22, r18
    1108:	f0 01       	movw	r30, r0
    110a:	72 9f       	mul	r23, r18
    110c:	bb 27       	eor	r27, r27
    110e:	f0 0d       	add	r31, r0
    1110:	b1 1d       	adc	r27, r1
    1112:	63 9f       	mul	r22, r19
    1114:	aa 27       	eor	r26, r26
    1116:	f0 0d       	add	r31, r0
    1118:	b1 1d       	adc	r27, r1
    111a:	aa 1f       	adc	r26, r26
    111c:	64 9f       	mul	r22, r20
    111e:	66 27       	eor	r22, r22
    1120:	b0 0d       	add	r27, r0
    1122:	a1 1d       	adc	r26, r1
    1124:	66 1f       	adc	r22, r22
    1126:	82 9f       	mul	r24, r18
    1128:	22 27       	eor	r18, r18
    112a:	b0 0d       	add	r27, r0
    112c:	a1 1d       	adc	r26, r1
    112e:	62 1f       	adc	r22, r18
    1130:	73 9f       	mul	r23, r19
    1132:	b0 0d       	add	r27, r0
    1134:	a1 1d       	adc	r26, r1
    1136:	62 1f       	adc	r22, r18
    1138:	83 9f       	mul	r24, r19
    113a:	a0 0d       	add	r26, r0
    113c:	61 1d       	adc	r22, r1
    113e:	22 1f       	adc	r18, r18
    1140:	74 9f       	mul	r23, r20
    1142:	33 27       	eor	r19, r19
    1144:	a0 0d       	add	r26, r0
    1146:	61 1d       	adc	r22, r1
    1148:	23 1f       	adc	r18, r19
    114a:	84 9f       	mul	r24, r20
    114c:	60 0d       	add	r22, r0
    114e:	21 1d       	adc	r18, r1
    1150:	82 2f       	mov	r24, r18
    1152:	76 2f       	mov	r23, r22
    1154:	6a 2f       	mov	r22, r26
    1156:	11 24       	eor	r1, r1
    1158:	9f 57       	subi	r25, 0x7F	; 127
    115a:	50 40       	sbci	r21, 0x00	; 0
    115c:	9a f0       	brmi	.+38     	; 0x1184 <__mulsf3_pse+0x88>
    115e:	f1 f0       	breq	.+60     	; 0x119c <__mulsf3_pse+0xa0>
    1160:	88 23       	and	r24, r24
    1162:	4a f0       	brmi	.+18     	; 0x1176 <__mulsf3_pse+0x7a>
    1164:	ee 0f       	add	r30, r30
    1166:	ff 1f       	adc	r31, r31
    1168:	bb 1f       	adc	r27, r27
    116a:	66 1f       	adc	r22, r22
    116c:	77 1f       	adc	r23, r23
    116e:	88 1f       	adc	r24, r24
    1170:	91 50       	subi	r25, 0x01	; 1
    1172:	50 40       	sbci	r21, 0x00	; 0
    1174:	a9 f7       	brne	.-22     	; 0x1160 <__mulsf3_pse+0x64>
    1176:	9e 3f       	cpi	r25, 0xFE	; 254
    1178:	51 05       	cpc	r21, r1
    117a:	80 f0       	brcs	.+32     	; 0x119c <__mulsf3_pse+0xa0>
    117c:	0c 94 e8 07 	jmp	0xfd0	; 0xfd0 <__fp_inf>
    1180:	0c 94 5a 08 	jmp	0x10b4	; 0x10b4 <__fp_szero>
    1184:	5f 3f       	cpi	r21, 0xFF	; 255
    1186:	e4 f3       	brlt	.-8      	; 0x1180 <__mulsf3_pse+0x84>
    1188:	98 3e       	cpi	r25, 0xE8	; 232
    118a:	d4 f3       	brlt	.-12     	; 0x1180 <__mulsf3_pse+0x84>
    118c:	86 95       	lsr	r24
    118e:	77 95       	ror	r23
    1190:	67 95       	ror	r22
    1192:	b7 95       	ror	r27
    1194:	f7 95       	ror	r31
    1196:	e7 95       	ror	r30
    1198:	9f 5f       	subi	r25, 0xFF	; 255
    119a:	c1 f7       	brne	.-16     	; 0x118c <__mulsf3_pse+0x90>
    119c:	fe 2b       	or	r31, r30
    119e:	88 0f       	add	r24, r24
    11a0:	91 1d       	adc	r25, r1
    11a2:	96 95       	lsr	r25
    11a4:	87 95       	ror	r24
    11a6:	97 f9       	bld	r25, 7
    11a8:	08 95       	ret

000011aa <square>:
    11aa:	9b 01       	movw	r18, r22
    11ac:	ac 01       	movw	r20, r24
    11ae:	0c 94 68 08 	jmp	0x10d0	; 0x10d0 <__mulsf3>

000011b2 <eeprom_read_dword>:
    11b2:	a6 e1       	ldi	r26, 0x16	; 22
    11b4:	b0 e0       	ldi	r27, 0x00	; 0
    11b6:	44 e0       	ldi	r20, 0x04	; 4
    11b8:	50 e0       	ldi	r21, 0x00	; 0
    11ba:	0c 94 ed 08 	jmp	0x11da	; 0x11da <eeprom_read_blraw>

000011be <eeprom_update_dword>:
    11be:	03 96       	adiw	r24, 0x03	; 3
    11c0:	27 2f       	mov	r18, r23
    11c2:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <eeprom_update_r18>
    11c6:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <eeprom_update_byte>
    11ca:	25 2f       	mov	r18, r21
    11cc:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <eeprom_update_r18>
    11d0:	24 2f       	mov	r18, r20
    11d2:	0c 94 fc 08 	jmp	0x11f8	; 0x11f8 <eeprom_update_r18>

000011d6 <eeprom_read_block>:
    11d6:	dc 01       	movw	r26, r24
    11d8:	cb 01       	movw	r24, r22

000011da <eeprom_read_blraw>:
    11da:	fc 01       	movw	r30, r24
    11dc:	f9 99       	sbic	0x1f, 1	; 31
    11de:	fe cf       	rjmp	.-4      	; 0x11dc <eeprom_read_blraw+0x2>
    11e0:	06 c0       	rjmp	.+12     	; 0x11ee <eeprom_read_blraw+0x14>
    11e2:	f2 bd       	out	0x22, r31	; 34
    11e4:	e1 bd       	out	0x21, r30	; 33
    11e6:	f8 9a       	sbi	0x1f, 0	; 31
    11e8:	31 96       	adiw	r30, 0x01	; 1
    11ea:	00 b4       	in	r0, 0x20	; 32
    11ec:	0d 92       	st	X+, r0
    11ee:	41 50       	subi	r20, 0x01	; 1
    11f0:	50 40       	sbci	r21, 0x00	; 0
    11f2:	b8 f7       	brcc	.-18     	; 0x11e2 <eeprom_read_blraw+0x8>
    11f4:	08 95       	ret

000011f6 <eeprom_update_byte>:
    11f6:	26 2f       	mov	r18, r22

000011f8 <eeprom_update_r18>:
    11f8:	f9 99       	sbic	0x1f, 1	; 31
    11fa:	fe cf       	rjmp	.-4      	; 0x11f8 <eeprom_update_r18>
    11fc:	92 bd       	out	0x22, r25	; 34
    11fe:	81 bd       	out	0x21, r24	; 33
    1200:	f8 9a       	sbi	0x1f, 0	; 31
    1202:	01 97       	sbiw	r24, 0x01	; 1
    1204:	00 b4       	in	r0, 0x20	; 32
    1206:	02 16       	cp	r0, r18
    1208:	39 f0       	breq	.+14     	; 0x1218 <eeprom_update_r18+0x20>
    120a:	1f ba       	out	0x1f, r1	; 31
    120c:	20 bd       	out	0x20, r18	; 32
    120e:	0f b6       	in	r0, 0x3f	; 63
    1210:	f8 94       	cli
    1212:	fa 9a       	sbi	0x1f, 2	; 31
    1214:	f9 9a       	sbi	0x1f, 1	; 31
    1216:	0f be       	out	0x3f, r0	; 63
    1218:	08 95       	ret

0000121a <_exit>:
    121a:	f8 94       	cli

0000121c <__stop_program>:
    121c:	ff cf       	rjmp	.-2      	; 0x121c <__stop_program>
