
BalanceBot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  0000188a  0000195e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000188a  00000000  00000000  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000007a  00800114  00800114  00001972  2**0
                  ALLOC
  3 .eeprom       00000004  00810000  00810000  00001972  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fuse         00000003  00820000  00820000  00001976  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  5 .comment      00000030  00000000  00000000  00001979  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000019ac  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 00000260  00000000  00000000  000019f0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000270f  00000000  00000000  00001c50  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000128e  00000000  00000000  0000435f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000014d9  00000000  00000000  000055ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000628  00000000  00000000  00006ac8  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000a51  00000000  00000000  000070f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000140d  00000000  00000000  00007b41  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000001e8  00000000  00000000  00008f4e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6d 00 	jmp	0xda	; 0xda <__ctors_end>
       4:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
       8:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
       c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      10:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      14:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      18:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      1c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      20:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      24:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      28:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      2c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      30:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      34:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      38:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      3c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      40:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      44:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      48:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      4c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      50:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      54:	0c 94 5c 07 	jmp	0xeb8	; 0xeb8 <__vector_21>
      58:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      5c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      60:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      64:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      68:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      6c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      70:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      74:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      78:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      7c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      80:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      84:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      88:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      8c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      90:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      94:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      98:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      9c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      a0:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      a4:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      a8:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      ac:	08 4a       	sbci	r16, 0xA8	; 168
      ae:	d7 3b       	cpi	r29, 0xB7	; 183
      b0:	3b ce       	rjmp	.-906    	; 0xfffffd28 <__fuse+0xff7dfd28>
      b2:	01 6e       	ori	r16, 0xE1	; 225
      b4:	84 bc       	out	0x24, r8	; 36
      b6:	bf fd       	.word	0xfdbf	; ????
      b8:	c1 2f       	mov	r28, r17
      ba:	3d 6c       	ori	r19, 0xCD	; 205
      bc:	74 31       	cpi	r23, 0x14	; 20
      be:	9a bd       	out	0x2a, r25	; 42
      c0:	56 83       	std	Z+6, r21	; 0x06
      c2:	3d da       	rcall	.-2950   	; 0xfffff53e <__fuse+0xff7df53e>
      c4:	3d 00       	.word	0x003d	; ????
      c6:	c7 7f       	andi	r28, 0xF7	; 247
      c8:	11 be       	out	0x31, r1	; 49
      ca:	d9 e4       	ldi	r29, 0x49	; 73
      cc:	bb 4c       	sbci	r27, 0xCB	; 203
      ce:	3e 91       	ld	r19, -X
      d0:	6b aa       	std	Y+51, r6	; 0x33
      d2:	aa be       	out	0x3a, r10	; 58
      d4:	00 00       	nop
      d6:	00 80       	ld	r0, Z
      d8:	3f 00       	.word	0x003f	; ????

000000da <__ctors_end>:
      da:	11 24       	eor	r1, r1
      dc:	1f be       	out	0x3f, r1	; 63
      de:	cf ef       	ldi	r28, 0xFF	; 255
      e0:	da e0       	ldi	r29, 0x0A	; 10
      e2:	de bf       	out	0x3e, r29	; 62
      e4:	cd bf       	out	0x3d, r28	; 61

000000e6 <__do_copy_data>:
      e6:	11 e0       	ldi	r17, 0x01	; 1
      e8:	a0 e0       	ldi	r26, 0x00	; 0
      ea:	b1 e0       	ldi	r27, 0x01	; 1
      ec:	ea e8       	ldi	r30, 0x8A	; 138
      ee:	f8 e1       	ldi	r31, 0x18	; 24
      f0:	02 c0       	rjmp	.+4      	; 0xf6 <__do_copy_data+0x10>
      f2:	05 90       	lpm	r0, Z+
      f4:	0d 92       	st	X+, r0
      f6:	a4 31       	cpi	r26, 0x14	; 20
      f8:	b1 07       	cpc	r27, r17
      fa:	d9 f7       	brne	.-10     	; 0xf2 <__do_copy_data+0xc>

000000fc <__do_clear_bss>:
      fc:	21 e0       	ldi	r18, 0x01	; 1
      fe:	a4 e1       	ldi	r26, 0x14	; 20
     100:	b1 e0       	ldi	r27, 0x01	; 1
     102:	01 c0       	rjmp	.+2      	; 0x106 <.do_clear_bss_start>

00000104 <.do_clear_bss_loop>:
     104:	1d 92       	st	X+, r1

00000106 <.do_clear_bss_start>:
     106:	ae 38       	cpi	r26, 0x8E	; 142
     108:	b2 07       	cpc	r27, r18
     10a:	e1 f7       	brne	.-8      	; 0x104 <.do_clear_bss_loop>
     10c:	0e 94 67 05 	call	0xace	; 0xace <main>
     110:	0c 94 43 0c 	jmp	0x1886	; 0x1886 <_exit>

00000114 <__bad_interrupt>:
     114:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000118 <I2C_WriteConfigure>:
		
	}
	}

//Writes val to Reg
void I2C_WriteConfigure(uint8_t reg, uint8_t val){
     118:	cf 93       	push	r28
     11a:	df 93       	push	r29
     11c:	d8 2f       	mov	r29, r24
     11e:	c6 2f       	mov	r28, r22
			i2c_start( (MPU6050_ADDRESS_AD0_LOW<<1) + I2C_WRITE);
     120:	80 ed       	ldi	r24, 0xD0	; 208
     122:	0e 94 88 07 	call	0xf10	; 0xf10 <i2c_start>
			i2c_write(reg); 
     126:	8d 2f       	mov	r24, r29
     128:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <i2c_write>
			i2c_write(val); 
     12c:	8c 2f       	mov	r24, r28
     12e:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <i2c_write>
			i2c_stop();      // set stop condition = release bus
     132:	0e 94 da 07 	call	0xfb4	; 0xfb4 <i2c_stop>
	}
     136:	df 91       	pop	r29
     138:	cf 91       	pop	r28
     13a:	08 95       	ret

0000013c <Init_MPU6050>:

#include "I2C_MPU6050.h"

// Configure MPU6050 settings
void Init_MPU6050(){
	i2c_init();     // init I2C interface
     13c:	0e 94 82 07 	call	0xf04	; 0xf04 <i2c_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     140:	2f ef       	ldi	r18, 0xFF	; 255
     142:	83 ec       	ldi	r24, 0xC3	; 195
     144:	99 e0       	ldi	r25, 0x09	; 9
     146:	21 50       	subi	r18, 0x01	; 1
     148:	80 40       	sbci	r24, 0x00	; 0
     14a:	90 40       	sbci	r25, 0x00	; 0
     14c:	e1 f7       	brne	.-8      	; 0x146 <Init_MPU6050+0xa>
     14e:	00 c0       	rjmp	.+0      	; 0x150 <Init_MPU6050+0x14>
     150:	00 00       	nop
	_delay_ms(200);  // Wait for 200 ms.
	//
	MPU6050.tau = 0.004; //0.75 0.007
     152:	e0 e2       	ldi	r30, 0x20	; 32
     154:	f1 e0       	ldi	r31, 0x01	; 1
     156:	8f e6       	ldi	r24, 0x6F	; 111
     158:	92 e1       	ldi	r25, 0x12	; 18
     15a:	a3 e8       	ldi	r26, 0x83	; 131
     15c:	bb e3       	ldi	r27, 0x3B	; 59
     15e:	86 a3       	std	Z+38, r24	; 0x26
     160:	97 a3       	std	Z+39, r25	; 0x27
     162:	a0 a7       	std	Z+40, r26	; 0x28
     164:	b1 a7       	std	Z+41, r27	; 0x29
	float ControlUpdatePeriod = .001;		// 1kHz Max as per MPU6050 sampling limitations
	MPU6050.alpha = ((MPU6050.tau) / (MPU6050.tau + ControlUpdatePeriod));
     166:	8c ec       	ldi	r24, 0xCC	; 204
     168:	9c ec       	ldi	r25, 0xCC	; 204
     16a:	ac e4       	ldi	r26, 0x4C	; 76
     16c:	bf e3       	ldi	r27, 0x3F	; 63
     16e:	82 a3       	std	Z+34, r24	; 0x22
     170:	93 a3       	std	Z+35, r25	; 0x23
     172:	a4 a3       	std	Z+36, r26	; 0x24
     174:	b5 a3       	std	Z+37, r27	; 0x25
	MPU6050.PreviousTheta = 0;
     176:	16 8a       	std	Z+22, r1	; 0x16
     178:	17 8a       	std	Z+23, r1	; 0x17
     17a:	10 8e       	std	Z+24, r1	; 0x18
     17c:	11 8e       	std	Z+25, r1	; 0x19
	MPU6050.dt = ControlUpdatePeriod;
     17e:	8f e6       	ldi	r24, 0x6F	; 111
     180:	92 e1       	ldi	r25, 0x12	; 18
     182:	a3 e8       	ldi	r26, 0x83	; 131
     184:	ba e3       	ldi	r27, 0x3A	; 58
     186:	86 8f       	std	Z+30, r24	; 0x1e
     188:	97 8f       	std	Z+31, r25	; 0x1f
     18a:	a0 a3       	std	Z+32, r26	; 0x20
     18c:	b1 a3       	std	Z+33, r27	; 0x21
	//
	unsigned char ret = i2c_start((MPU6050_ADDRESS_AD0_LOW<<1) + I2C_WRITE);       // set device address and write mode
     18e:	80 ed       	ldi	r24, 0xD0	; 208
     190:	0e 94 88 07 	call	0xf10	; 0xf10 <i2c_start>
	if ( ret )
     194:	88 23       	and	r24, r24
     196:	21 f0       	breq	.+8      	; 0x1a0 <Init_MPU6050+0x64>
	{
		/* failed to issue start condition, possibly no device found */
		i2c_stop();
     198:	0e 94 da 07 	call	0xfb4	; 0xfb4 <i2c_stop>
		LED_ON(PORTF, DEBUG_LED4);    // Turn on the red LED immediately to signal the read is not ok
     19c:	88 9a       	sbi	0x11, 0	; 17
     19e:	ff cf       	rjmp	.-2      	; 0x19e <Init_MPU6050+0x62>
		while(1) {;;}  // lock program here as sensor init failed
	}else{
		/* issuing start condition ok, device accessible */
		i2c_write(MPU6050_RA_PWR_MGMT_1); // go to register 107
     1a0:	8b e6       	ldi	r24, 0x6B	; 107
     1a2:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <i2c_write>
		i2c_write(0x00); // set value to 0000 0000 and wake up sensor
     1a6:	80 e0       	ldi	r24, 0x00	; 0
     1a8:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <i2c_write>
		i2c_stop();      // set stop condition = release bus
     1ac:	0e 94 da 07 	call	0xfb4	; 0xfb4 <i2c_stop>
		
		I2C_WriteConfigure(MPU6050_RA_SMPLRT_DIV, 0x08); // set value to 0000 1000 for 1000 Hz
     1b0:	68 e0       	ldi	r22, 0x08	; 8
     1b2:	89 e1       	ldi	r24, 0x19	; 25
     1b4:	0e 94 8c 00 	call	0x118	; 0x118 <I2C_WriteConfigure>
		I2C_WriteConfigure(MPU6050_RA_ACCEL_CONFIG, 0x08); // set value to 0000 1000 for 4g, normal line tension is 2,7g
     1b8:	68 e0       	ldi	r22, 0x08	; 8
     1ba:	8c e1       	ldi	r24, 0x1C	; 28
     1bc:	0e 94 8c 00 	call	0x118	; 0x118 <I2C_WriteConfigure>
		I2C_WriteConfigure(MPU6050_RA_GYRO_CONFIG, 0x10); // set value to 0001 0000 for 1000 (deg/s) (Motor Max RPM is 100)
     1c0:	60 e1       	ldi	r22, 0x10	; 16
     1c2:	8b e1       	ldi	r24, 0x1B	; 27
     1c4:	0e 94 8c 00 	call	0x118	; 0x118 <I2C_WriteConfigure>
		I2C_WriteConfigure(MPU6050_RA_FIFO_EN, 0xF8); // set value to 1111 1000 for all sensors not slave
     1c8:	68 ef       	ldi	r22, 0xF8	; 248
     1ca:	83 e2       	ldi	r24, 0x23	; 35
     1cc:	0e 94 8c 00 	call	0x118	; 0x118 <I2C_WriteConfigure>
		I2C_WriteConfigure(MPU6050_RA_USER_CTRL,0x40); // set value to 0100 0000 FIFO enable
     1d0:	60 e4       	ldi	r22, 0x40	; 64
     1d2:	8a e6       	ldi	r24, 0x6A	; 106
     1d4:	0e 94 8c 00 	call	0x118	; 0x118 <I2C_WriteConfigure>
     1d8:	08 95       	ret

000001da <I2C_ReadSensorVals>:
			i2c_write(reg); 
			i2c_write(val); 
			i2c_stop();      // set stop condition = release bus
	}

void I2C_ReadSensorVals(){
     1da:	0f 93       	push	r16
     1dc:	1f 93       	push	r17
     1de:	cf 93       	push	r28
     1e0:	df 93       	push	r29

//Read X accel
i2c_start_wait((MPU6050_ADDRESS_AD0_LOW<<1) + I2C_WRITE);    // set device address and write mode
     1e2:	80 ed       	ldi	r24, 0xD0	; 208
     1e4:	0e 94 af 07 	call	0xf5e	; 0xf5e <i2c_start_wait>
i2c_write(MPU6050_RA_ACCEL_XOUT_H);                      // ACCEL_XOUT
     1e8:	8b e3       	ldi	r24, 0x3B	; 59
     1ea:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <i2c_write>
i2c_rep_start((MPU6050_ADDRESS_AD0_LOW<<1) + I2C_READ);      // set device address and read mode
     1ee:	81 ed       	ldi	r24, 0xD1	; 209
     1f0:	0e 94 d7 07 	call	0xfae	; 0xfae <i2c_rep_start>
MPU6050.rawXaccel = i2c_readAck();               // read one intermediate byte
     1f4:	0e 94 f5 07 	call	0xfea	; 0xfea <i2c_readAck>
     1f8:	c8 2f       	mov	r28, r24
     1fa:	d0 e0       	ldi	r29, 0x00	; 0
     1fc:	00 e2       	ldi	r16, 0x20	; 32
     1fe:	11 e0       	ldi	r17, 0x01	; 1
     200:	f8 01       	movw	r30, r16
     202:	d1 83       	std	Z+1, r29	; 0x01
     204:	c0 83       	st	Z, r28
MPU6050.rawXaccel = (MPU6050.rawXaccel<<8) | i2c_readNak(); // read last byte
     206:	0e 94 00 08 	call	0x1000	; 0x1000 <i2c_readNak>
     20a:	dc 2f       	mov	r29, r28
     20c:	cc 27       	eor	r28, r28
     20e:	c8 2b       	or	r28, r24
     210:	f8 01       	movw	r30, r16
     212:	d1 83       	std	Z+1, r29	; 0x01
     214:	c0 83       	st	Z, r28
i2c_stop();
     216:	0e 94 da 07 	call	0xfb4	; 0xfb4 <i2c_stop>

//Read Z accel
i2c_start_wait((MPU6050_ADDRESS_AD0_LOW<<1) + I2C_WRITE);    // set device address and write mode
     21a:	80 ed       	ldi	r24, 0xD0	; 208
     21c:	0e 94 af 07 	call	0xf5e	; 0xf5e <i2c_start_wait>
i2c_write(MPU6050_RA_ACCEL_ZOUT_H);                      // ACCEL_ZOUT
     220:	8f e3       	ldi	r24, 0x3F	; 63
     222:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <i2c_write>
i2c_rep_start((MPU6050_ADDRESS_AD0_LOW<<1) + I2C_READ);      // set device address and read mode
     226:	81 ed       	ldi	r24, 0xD1	; 209
     228:	0e 94 d7 07 	call	0xfae	; 0xfae <i2c_rep_start>
MPU6050.rawZaccel = i2c_readAck();               // read one intermediate byte
     22c:	0e 94 f5 07 	call	0xfea	; 0xfea <i2c_readAck>
     230:	c8 2f       	mov	r28, r24
     232:	d0 e0       	ldi	r29, 0x00	; 0
     234:	f8 01       	movw	r30, r16
     236:	d3 83       	std	Z+3, r29	; 0x03
     238:	c2 83       	std	Z+2, r28	; 0x02
MPU6050.rawZaccel = (MPU6050.rawZaccel<<8) | i2c_readNak(); // read last byte
     23a:	0e 94 00 08 	call	0x1000	; 0x1000 <i2c_readNak>
     23e:	dc 2f       	mov	r29, r28
     240:	cc 27       	eor	r28, r28
     242:	c8 2b       	or	r28, r24
     244:	f8 01       	movw	r30, r16
     246:	d3 83       	std	Z+3, r29	; 0x03
     248:	c2 83       	std	Z+2, r28	; 0x02
i2c_stop();
     24a:	0e 94 da 07 	call	0xfb4	; 0xfb4 <i2c_stop>


//Read Y gyro

i2c_start_wait((MPU6050_ADDRESS_AD0_LOW<<1) + I2C_WRITE);    // set device address and write mode
     24e:	80 ed       	ldi	r24, 0xD0	; 208
     250:	0e 94 af 07 	call	0xf5e	; 0xf5e <i2c_start_wait>
i2c_write(MPU6050_RA_GYRO_YOUT_H);                      // GYRO_YOUT
     254:	85 e4       	ldi	r24, 0x45	; 69
     256:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <i2c_write>
i2c_rep_start((MPU6050_ADDRESS_AD0_LOW<<1) + I2C_READ);      // set device address and read mode
     25a:	81 ed       	ldi	r24, 0xD1	; 209
     25c:	0e 94 d7 07 	call	0xfae	; 0xfae <i2c_rep_start>
MPU6050.rawYGyro = i2c_readAck();               // read one intermediate byte
     260:	0e 94 f5 07 	call	0xfea	; 0xfea <i2c_readAck>
     264:	c8 2f       	mov	r28, r24
     266:	d0 e0       	ldi	r29, 0x00	; 0
     268:	f8 01       	movw	r30, r16
     26a:	d5 83       	std	Z+5, r29	; 0x05
     26c:	c4 83       	std	Z+4, r28	; 0x04
MPU6050.rawYGyro = (MPU6050.rawYGyro<<8) | i2c_readNak(); // read last byte
     26e:	0e 94 00 08 	call	0x1000	; 0x1000 <i2c_readNak>
     272:	dc 2f       	mov	r29, r28
     274:	cc 27       	eor	r28, r28
     276:	c8 2b       	or	r28, r24
     278:	f8 01       	movw	r30, r16
     27a:	d5 83       	std	Z+5, r29	; 0x05
     27c:	c4 83       	std	Z+4, r28	; 0x04
i2c_stop();
     27e:	0e 94 da 07 	call	0xfb4	; 0xfb4 <i2c_stop>
}
     282:	df 91       	pop	r29
     284:	cf 91       	pop	r28
     286:	1f 91       	pop	r17
     288:	0f 91       	pop	r16
     28a:	08 95       	ret

0000028c <ConvertSensorVals>:

//Convert Sensor Values//Convert Sensor Values
void ConvertSensorVals(){
     28c:	4f 92       	push	r4
     28e:	5f 92       	push	r5
     290:	6f 92       	push	r6
     292:	7f 92       	push	r7
     294:	8f 92       	push	r8
     296:	9f 92       	push	r9
     298:	af 92       	push	r10
     29a:	bf 92       	push	r11
     29c:	cf 92       	push	r12
     29e:	df 92       	push	r13
     2a0:	ef 92       	push	r14
     2a2:	ff 92       	push	r15
     2a4:	cf 93       	push	r28
     2a6:	df 93       	push	r29
	float RAD_TO_DEG = 180.0 / M_PI;
	
	MPU6050.Xaccel = (((int16_t) MPU6050.rawXaccel) / 32767.0) * 4.0;
     2a8:	c0 e2       	ldi	r28, 0x20	; 32
     2aa:	d1 e0       	ldi	r29, 0x01	; 1
     2ac:	68 81       	ld	r22, Y
     2ae:	79 81       	ldd	r23, Y+1	; 0x01
     2b0:	07 2e       	mov	r0, r23
     2b2:	00 0c       	add	r0, r0
     2b4:	88 0b       	sbc	r24, r24
     2b6:	99 0b       	sbc	r25, r25
     2b8:	0e 94 99 09 	call	0x1332	; 0x1332 <__floatsisf>
     2bc:	20 e0       	ldi	r18, 0x00	; 0
     2be:	3e ef       	ldi	r19, 0xFE	; 254
     2c0:	4f ef       	ldi	r20, 0xFF	; 255
     2c2:	56 e4       	ldi	r21, 0x46	; 70
     2c4:	0e 94 ef 08 	call	0x11de	; 0x11de <__divsf3>
     2c8:	20 e0       	ldi	r18, 0x00	; 0
     2ca:	30 e0       	ldi	r19, 0x00	; 0
     2cc:	40 e8       	ldi	r20, 0x80	; 128
     2ce:	50 e4       	ldi	r21, 0x40	; 64
     2d0:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <__mulsf3>
     2d4:	6b 01       	movw	r12, r22
     2d6:	7c 01       	movw	r14, r24
     2d8:	6e 83       	std	Y+6, r22	; 0x06
     2da:	7f 83       	std	Y+7, r23	; 0x07
     2dc:	88 87       	std	Y+8, r24	; 0x08
     2de:	99 87       	std	Y+9, r25	; 0x09
	MPU6050.Zaccel = (((int16_t) MPU6050.rawZaccel) / 32767.0) * 4.0;
     2e0:	6a 81       	ldd	r22, Y+2	; 0x02
     2e2:	7b 81       	ldd	r23, Y+3	; 0x03
     2e4:	07 2e       	mov	r0, r23
     2e6:	00 0c       	add	r0, r0
     2e8:	88 0b       	sbc	r24, r24
     2ea:	99 0b       	sbc	r25, r25
     2ec:	0e 94 99 09 	call	0x1332	; 0x1332 <__floatsisf>
     2f0:	20 e0       	ldi	r18, 0x00	; 0
     2f2:	3e ef       	ldi	r19, 0xFE	; 254
     2f4:	4f ef       	ldi	r20, 0xFF	; 255
     2f6:	56 e4       	ldi	r21, 0x46	; 70
     2f8:	0e 94 ef 08 	call	0x11de	; 0x11de <__divsf3>
     2fc:	20 e0       	ldi	r18, 0x00	; 0
     2fe:	30 e0       	ldi	r19, 0x00	; 0
     300:	40 e8       	ldi	r20, 0x80	; 128
     302:	50 e4       	ldi	r21, 0x40	; 64
     304:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <__mulsf3>
     308:	4b 01       	movw	r8, r22
     30a:	5c 01       	movw	r10, r24
     30c:	6a 87       	std	Y+10, r22	; 0x0a
     30e:	7b 87       	std	Y+11, r23	; 0x0b
     310:	8c 87       	std	Y+12, r24	; 0x0c
     312:	9d 87       	std	Y+13, r25	; 0x0d
	
	MPU6050.YGyro = (((int16_t) MPU6050.rawYGyro) / 32767.0) * 1000.0;
     314:	6c 81       	ldd	r22, Y+4	; 0x04
     316:	7d 81       	ldd	r23, Y+5	; 0x05
     318:	07 2e       	mov	r0, r23
     31a:	00 0c       	add	r0, r0
     31c:	88 0b       	sbc	r24, r24
     31e:	99 0b       	sbc	r25, r25
     320:	0e 94 99 09 	call	0x1332	; 0x1332 <__floatsisf>
     324:	20 e0       	ldi	r18, 0x00	; 0
     326:	3e ef       	ldi	r19, 0xFE	; 254
     328:	4f ef       	ldi	r20, 0xFF	; 255
     32a:	56 e4       	ldi	r21, 0x46	; 70
     32c:	0e 94 ef 08 	call	0x11de	; 0x11de <__divsf3>
     330:	20 e0       	ldi	r18, 0x00	; 0
     332:	30 e0       	ldi	r19, 0x00	; 0
     334:	4a e7       	ldi	r20, 0x7A	; 122
     336:	54 e4       	ldi	r21, 0x44	; 68
     338:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <__mulsf3>
     33c:	6e 87       	std	Y+14, r22	; 0x0e
     33e:	7f 87       	std	Y+15, r23	; 0x0f
     340:	88 8b       	std	Y+16, r24	; 0x10
     342:	99 8b       	std	Y+17, r25	; 0x11
	MPU6050.GyroTheta = MPU6050.YGyro * (1.0 / RAD_TO_DEG) * MPU6050.dt;
     344:	26 e3       	ldi	r18, 0x36	; 54
     346:	3a ef       	ldi	r19, 0xFA	; 250
     348:	4e e8       	ldi	r20, 0x8E	; 142
     34a:	5c e3       	ldi	r21, 0x3C	; 60
     34c:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <__mulsf3>
     350:	2e 8d       	ldd	r18, Y+30	; 0x1e
     352:	3f 8d       	ldd	r19, Y+31	; 0x1f
     354:	48 a1       	ldd	r20, Y+32	; 0x20
     356:	59 a1       	ldd	r21, Y+33	; 0x21
     358:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <__mulsf3>
     35c:	2b 01       	movw	r4, r22
     35e:	3c 01       	movw	r6, r24
     360:	6a 8f       	std	Y+26, r22	; 0x1a
     362:	7b 8f       	std	Y+27, r23	; 0x1b
     364:	8c 8f       	std	Y+28, r24	; 0x1c
     366:	9d 8f       	std	Y+29, r25	; 0x1d
	
	MPU6050.theta = atan2((double) MPU6050.Xaccel, (double) MPU6050.Zaccel);
     368:	a5 01       	movw	r20, r10
     36a:	94 01       	movw	r18, r8
     36c:	c7 01       	movw	r24, r14
     36e:	b6 01       	movw	r22, r12
     370:	0e 94 8b 08 	call	0x1116	; 0x1116 <atan2>
     374:	6b 01       	movw	r12, r22
     376:	7c 01       	movw	r14, r24
     378:	6a 8b       	std	Y+18, r22	; 0x12
     37a:	7b 8b       	std	Y+19, r23	; 0x13
     37c:	8c 8b       	std	Y+20, r24	; 0x14
     37e:	9d 8b       	std	Y+21, r25	; 0x15
	
	MPU6050.CurrentTheta = (MPU6050.alpha * (MPU6050.PreviousTheta + MPU6050.GyroTheta )) + ((1 - MPU6050.alpha)*(MPU6050.theta));
     380:	8a a0       	ldd	r8, Y+34	; 0x22
     382:	9b a0       	ldd	r9, Y+35	; 0x23
     384:	ac a0       	ldd	r10, Y+36	; 0x24
     386:	bd a0       	ldd	r11, Y+37	; 0x25
     388:	2e 89       	ldd	r18, Y+22	; 0x16
     38a:	3f 89       	ldd	r19, Y+23	; 0x17
     38c:	48 8d       	ldd	r20, Y+24	; 0x18
     38e:	59 8d       	ldd	r21, Y+25	; 0x19
     390:	c3 01       	movw	r24, r6
     392:	b2 01       	movw	r22, r4
     394:	0e 94 0c 08 	call	0x1018	; 0x1018 <__addsf3>
     398:	a5 01       	movw	r20, r10
     39a:	94 01       	movw	r18, r8
     39c:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <__mulsf3>
     3a0:	2b 01       	movw	r4, r22
     3a2:	3c 01       	movw	r6, r24
     3a4:	a5 01       	movw	r20, r10
     3a6:	94 01       	movw	r18, r8
     3a8:	60 e0       	ldi	r22, 0x00	; 0
     3aa:	70 e0       	ldi	r23, 0x00	; 0
     3ac:	80 e8       	ldi	r24, 0x80	; 128
     3ae:	9f e3       	ldi	r25, 0x3F	; 63
     3b0:	0e 94 0b 08 	call	0x1016	; 0x1016 <__subsf3>
     3b4:	a7 01       	movw	r20, r14
     3b6:	96 01       	movw	r18, r12
     3b8:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <__mulsf3>
     3bc:	9b 01       	movw	r18, r22
     3be:	ac 01       	movw	r20, r24
     3c0:	c3 01       	movw	r24, r6
     3c2:	b2 01       	movw	r22, r4
     3c4:	0e 94 0c 08 	call	0x1018	; 0x1018 <__addsf3>
     3c8:	6a a7       	std	Y+42, r22	; 0x2a
     3ca:	7b a7       	std	Y+43, r23	; 0x2b
     3cc:	8c a7       	std	Y+44, r24	; 0x2c
     3ce:	9d a7       	std	Y+45, r25	; 0x2d
	/*MPU6050.CurrentTheta= MPU6050.theta;*/
     3d0:	df 91       	pop	r29
     3d2:	cf 91       	pop	r28
     3d4:	ff 90       	pop	r15
     3d6:	ef 90       	pop	r14
     3d8:	df 90       	pop	r13
     3da:	cf 90       	pop	r12
     3dc:	bf 90       	pop	r11
     3de:	af 90       	pop	r10
     3e0:	9f 90       	pop	r9
     3e2:	8f 90       	pop	r8
     3e4:	7f 90       	pop	r7
     3e6:	6f 90       	pop	r6
     3e8:	5f 90       	pop	r5
     3ea:	4f 90       	pop	r4
     3ec:	08 95       	ret

000003ee <Task_Balance>:
}


// **********Task functions********** 

void Task_Balance(){
     3ee:	4f 92       	push	r4
     3f0:	5f 92       	push	r5
     3f2:	6f 92       	push	r6
     3f4:	7f 92       	push	r7
     3f6:	8f 92       	push	r8
     3f8:	9f 92       	push	r9
     3fa:	af 92       	push	r10
     3fc:	bf 92       	push	r11
     3fe:	cf 92       	push	r12
     400:	df 92       	push	r13
     402:	ef 92       	push	r14
     404:	ff 92       	push	r15
     406:	cf 93       	push	r28
     408:	df 93       	push	r29
	
	
	
	
	// Take Measurement
	I2C_ReadSensorVals();
     40a:	0e 94 ed 00 	call	0x1da	; 0x1da <I2C_ReadSensorVals>
	ConvertSensorVals();
     40e:	0e 94 46 01 	call	0x28c	; 0x28c <ConvertSensorVals>
	
	
	/*uint16_t pwm = 100;*/
/*pwm = (ulast / 6) * 255*/
/*error = ((4.3*M_PI/ 180.0) + 0.0) - MPU6050.CurrentTheta;*/
error = 0 - MPU6050.CurrentTheta;
     412:	40 90 4a 01 	lds	r4, 0x014A	; 0x80014a <MPU6050+0x2a>
     416:	50 90 4b 01 	lds	r5, 0x014B	; 0x80014b <MPU6050+0x2b>
     41a:	60 90 4c 01 	lds	r6, 0x014C	; 0x80014c <MPU6050+0x2c>
     41e:	70 90 4d 01 	lds	r7, 0x014D	; 0x80014d <MPU6050+0x2d>
     422:	a3 01       	movw	r20, r6
     424:	92 01       	movw	r18, r4
     426:	60 e0       	ldi	r22, 0x00	; 0
     428:	70 e0       	ldi	r23, 0x00	; 0
     42a:	cb 01       	movw	r24, r22
     42c:	0e 94 0b 08 	call	0x1016	; 0x1016 <__subsf3>
     430:	6b 01       	movw	r12, r22
     432:	7c 01       	movw	r14, r24
     434:	60 93 18 01 	sts	0x0118, r22	; 0x800118 <error>
     438:	70 93 19 01 	sts	0x0119, r23	; 0x800119 <error+0x1>
     43c:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <error+0x2>
     440:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <error+0x3>
errorSum += error;
     444:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <__data_end>
     448:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <__data_end+0x1>
     44c:	40 91 16 01 	lds	r20, 0x0116	; 0x800116 <__data_end+0x2>
     450:	50 91 17 01 	lds	r21, 0x0117	; 0x800117 <__data_end+0x3>
     454:	0e 94 0c 08 	call	0x1018	; 0x1018 <__addsf3>
     458:	4b 01       	movw	r8, r22
     45a:	5c 01       	movw	r10, r24
if(errorSum> (30 * M_PI / 180)){
     45c:	22 e9       	ldi	r18, 0x92	; 146
     45e:	3a e0       	ldi	r19, 0x0A	; 10
     460:	46 e0       	ldi	r20, 0x06	; 6
     462:	5f e3       	ldi	r21, 0x3F	; 63
     464:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__gesf2>
     468:	18 16       	cp	r1, r24
     46a:	6c f4       	brge	.+26     	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
	errorSum = (30 * M_PI) / 180;
     46c:	82 e9       	ldi	r24, 0x92	; 146
     46e:	9a e0       	ldi	r25, 0x0A	; 10
     470:	a6 e0       	ldi	r26, 0x06	; 6
     472:	bf e3       	ldi	r27, 0x3F	; 63
     474:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
     478:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <__data_end+0x1>
     47c:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <__data_end+0x2>
     480:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <__data_end+0x3>
     484:	1f c0       	rjmp	.+62     	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
}else if (errorSum< -(30 * M_PI / 180))
     486:	22 e9       	ldi	r18, 0x92	; 146
     488:	3a e0       	ldi	r19, 0x0A	; 10
     48a:	46 e0       	ldi	r20, 0x06	; 6
     48c:	5f eb       	ldi	r21, 0xBF	; 191
     48e:	c5 01       	movw	r24, r10
     490:	b4 01       	movw	r22, r8
     492:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <__cmpsf2>
     496:	88 23       	and	r24, r24
     498:	4c f0       	brlt	.+18     	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
	
	/*uint16_t pwm = 100;*/
/*pwm = (ulast / 6) * 255*/
/*error = ((4.3*M_PI/ 180.0) + 0.0) - MPU6050.CurrentTheta;*/
error = 0 - MPU6050.CurrentTheta;
errorSum += error;
     49a:	80 92 14 01 	sts	0x0114, r8	; 0x800114 <__data_end>
     49e:	90 92 15 01 	sts	0x0115, r9	; 0x800115 <__data_end+0x1>
     4a2:	a0 92 16 01 	sts	0x0116, r10	; 0x800116 <__data_end+0x2>
     4a6:	b0 92 17 01 	sts	0x0117, r11	; 0x800117 <__data_end+0x3>
     4aa:	0c c0       	rjmp	.+24     	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
if(errorSum> (30 * M_PI / 180)){
	errorSum = (30 * M_PI) / 180;
}else if (errorSum< -(30 * M_PI / 180))
{
	errorSum = -(30 * M_PI) / 180;
     4ac:	82 e9       	ldi	r24, 0x92	; 146
     4ae:	9a e0       	ldi	r25, 0x0A	; 10
     4b0:	a6 e0       	ldi	r26, 0x06	; 6
     4b2:	bf eb       	ldi	r27, 0xBF	; 191
     4b4:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
     4b8:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <__data_end+0x1>
     4bc:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <__data_end+0x2>
     4c0:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <__data_end+0x3>
}
int16_t pwm = Kp*(error) - Kd*(MPU6050.CurrentTheta-MPU6050.PreviousTheta)/MPU6050.dt + Ki*(errorSum)*MPU6050.dt;
     4c4:	c0 e2       	ldi	r28, 0x20	; 32
     4c6:	d1 e0       	ldi	r29, 0x01	; 1
     4c8:	8e 8c       	ldd	r8, Y+30	; 0x1e
     4ca:	9f 8c       	ldd	r9, Y+31	; 0x1f
     4cc:	a8 a0       	ldd	r10, Y+32	; 0x20
     4ce:	b9 a0       	ldd	r11, Y+33	; 0x21
     4d0:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <Kp>
     4d4:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <Kp+0x1>
     4d8:	40 91 10 01 	lds	r20, 0x0110	; 0x800110 <Kp+0x2>
     4dc:	50 91 11 01 	lds	r21, 0x0111	; 0x800111 <Kp+0x3>
     4e0:	c7 01       	movw	r24, r14
     4e2:	b6 01       	movw	r22, r12
     4e4:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <__mulsf3>
     4e8:	6b 01       	movw	r12, r22
     4ea:	7c 01       	movw	r14, r24
     4ec:	2e 89       	ldd	r18, Y+22	; 0x16
     4ee:	3f 89       	ldd	r19, Y+23	; 0x17
     4f0:	48 8d       	ldd	r20, Y+24	; 0x18
     4f2:	59 8d       	ldd	r21, Y+25	; 0x19
     4f4:	c3 01       	movw	r24, r6
     4f6:	b2 01       	movw	r22, r4
     4f8:	0e 94 0b 08 	call	0x1016	; 0x1016 <__subsf3>
     4fc:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <Kd>
     500:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <Kd+0x1>
     504:	40 91 0c 01 	lds	r20, 0x010C	; 0x80010c <Kd+0x2>
     508:	50 91 0d 01 	lds	r21, 0x010D	; 0x80010d <Kd+0x3>
     50c:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <__mulsf3>
     510:	a5 01       	movw	r20, r10
     512:	94 01       	movw	r18, r8
     514:	0e 94 ef 08 	call	0x11de	; 0x11de <__divsf3>
     518:	9b 01       	movw	r18, r22
     51a:	ac 01       	movw	r20, r24
     51c:	c7 01       	movw	r24, r14
     51e:	b6 01       	movw	r22, r12
     520:	0e 94 0b 08 	call	0x1016	; 0x1016 <__subsf3>
     524:	6b 01       	movw	r12, r22
     526:	7c 01       	movw	r14, r24
     528:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <__data_end>
     52c:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <__data_end+0x1>
     530:	40 91 16 01 	lds	r20, 0x0116	; 0x800116 <__data_end+0x2>
     534:	50 91 17 01 	lds	r21, 0x0117	; 0x800117 <__data_end+0x3>
     538:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <Ki>
     53c:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <Ki+0x1>
     540:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <Ki+0x2>
     544:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <Ki+0x3>
     548:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <__mulsf3>
     54c:	a5 01       	movw	r20, r10
     54e:	94 01       	movw	r18, r8
     550:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <__mulsf3>
     554:	9b 01       	movw	r18, r22
     556:	ac 01       	movw	r20, r24
     558:	c7 01       	movw	r24, r14
     55a:	b6 01       	movw	r22, r12
     55c:	0e 94 0c 08 	call	0x1018	; 0x1018 <__addsf3>
     560:	0e 94 61 09 	call	0x12c2	; 0x12c2 <__fixsfsi>
     564:	6b 01       	movw	r12, r22
     566:	7c 01       	movw	r14, r24
	
Motor_PWM_Left(pwm);
     568:	cb 01       	movw	r24, r22
     56a:	0e 94 be 05 	call	0xb7c	; 0xb7c <Motor_PWM_Left>
Motor_PWM_Right(pwm);
     56e:	c6 01       	movw	r24, r12
     570:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <Motor_PWM_Right>
Motor_PWM_Enable(true);
     574:	81 e0       	ldi	r24, 0x01	; 1
     576:	0e 94 b0 05 	call	0xb60	; 0xb60 <Motor_PWM_Enable>

MPU6050.PreviousTheta = MPU6050.CurrentTheta;
     57a:	8a a5       	ldd	r24, Y+42	; 0x2a
     57c:	9b a5       	ldd	r25, Y+43	; 0x2b
     57e:	ac a5       	ldd	r26, Y+44	; 0x2c
     580:	bd a5       	ldd	r27, Y+45	; 0x2d
     582:	8e 8b       	std	Y+22, r24	; 0x16
     584:	9f 8b       	std	Y+23, r25	; 0x17
     586:	a8 8f       	std	Y+24, r26	; 0x18
     588:	b9 8f       	std	Y+25, r27	; 0x19
	
	
	
}
     58a:	df 91       	pop	r29
     58c:	cf 91       	pop	r28
     58e:	ff 90       	pop	r15
     590:	ef 90       	pop	r14
     592:	df 90       	pop	r13
     594:	cf 90       	pop	r12
     596:	bf 90       	pop	r11
     598:	af 90       	pop	r10
     59a:	9f 90       	pop	r9
     59c:	8f 90       	pop	r8
     59e:	7f 90       	pop	r7
     5a0:	6f 90       	pop	r6
     5a2:	5f 90       	pop	r5
     5a4:	4f 90       	pop	r4
     5a6:	08 95       	ret

000005a8 <Task_Calibrate>:

void Task_Calibrate(){
     5a8:	8f 92       	push	r8
     5aa:	9f 92       	push	r9
     5ac:	af 92       	push	r10
     5ae:	bf 92       	push	r11
     5b0:	cf 92       	push	r12
     5b2:	df 92       	push	r13
     5b4:	ef 92       	push	r14
     5b6:	ff 92       	push	r15
     5b8:	0f 93       	push	r16
     5ba:	1f 93       	push	r17
     5bc:	cf 93       	push	r28
     5be:	df 93       	push	r29
	
	

	I2C_ReadSensorVals();
     5c0:	0e 94 ed 00 	call	0x1da	; 0x1da <I2C_ReadSensorVals>
	ConvertSensorVals();
     5c4:	0e 94 46 01 	call	0x28c	; 0x28c <ConvertSensorVals>
	
	float AverageTheta = 0;
	int i = 1;
     5c8:	c1 e0       	ldi	r28, 0x01	; 1
     5ca:	d0 e0       	ldi	r29, 0x00	; 0
	

	I2C_ReadSensorVals();
	ConvertSensorVals();
	
	float AverageTheta = 0;
     5cc:	81 2c       	mov	r8, r1
     5ce:	91 2c       	mov	r9, r1
     5d0:	54 01       	movw	r10, r8
	while (i < 1000)
	{
		I2C_ReadSensorVals();
		ConvertSensorVals();
		
		AverageTheta = (AverageTheta * (i - 1) + (MPU6050.CurrentTheta)) / i;
     5d2:	00 e2       	ldi	r16, 0x20	; 32
     5d4:	11 e0       	ldi	r17, 0x01	; 1
	
	float AverageTheta = 0;
	int i = 1;
	while (i < 1000)
	{
		I2C_ReadSensorVals();
     5d6:	0e 94 ed 00 	call	0x1da	; 0x1da <I2C_ReadSensorVals>
		ConvertSensorVals();
     5da:	0e 94 46 01 	call	0x28c	; 0x28c <ConvertSensorVals>
		
		AverageTheta = (AverageTheta * (i - 1) + (MPU6050.CurrentTheta)) / i;
     5de:	f8 01       	movw	r30, r16
     5e0:	c2 a4       	ldd	r12, Z+42	; 0x2a
     5e2:	d3 a4       	ldd	r13, Z+43	; 0x2b
     5e4:	e4 a4       	ldd	r14, Z+44	; 0x2c
     5e6:	f5 a4       	ldd	r15, Z+45	; 0x2d
     5e8:	be 01       	movw	r22, r28
     5ea:	61 50       	subi	r22, 0x01	; 1
     5ec:	71 09       	sbc	r23, r1
     5ee:	07 2e       	mov	r0, r23
     5f0:	00 0c       	add	r0, r0
     5f2:	88 0b       	sbc	r24, r24
     5f4:	99 0b       	sbc	r25, r25
     5f6:	0e 94 99 09 	call	0x1332	; 0x1332 <__floatsisf>
     5fa:	a5 01       	movw	r20, r10
     5fc:	94 01       	movw	r18, r8
     5fe:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <__mulsf3>
     602:	a7 01       	movw	r20, r14
     604:	96 01       	movw	r18, r12
     606:	0e 94 0c 08 	call	0x1018	; 0x1018 <__addsf3>
     60a:	4b 01       	movw	r8, r22
     60c:	5c 01       	movw	r10, r24
     60e:	be 01       	movw	r22, r28
     610:	0d 2e       	mov	r0, r29
     612:	00 0c       	add	r0, r0
     614:	88 0b       	sbc	r24, r24
     616:	99 0b       	sbc	r25, r25
     618:	0e 94 99 09 	call	0x1332	; 0x1332 <__floatsisf>
     61c:	9b 01       	movw	r18, r22
     61e:	ac 01       	movw	r20, r24
     620:	c5 01       	movw	r24, r10
     622:	b4 01       	movw	r22, r8
     624:	0e 94 ef 08 	call	0x11de	; 0x11de <__divsf3>
     628:	4b 01       	movw	r8, r22
     62a:	5c 01       	movw	r10, r24
		MPU6050.PreviousTheta = MPU6050.CurrentTheta;
     62c:	f8 01       	movw	r30, r16
     62e:	c6 8a       	std	Z+22, r12	; 0x16
     630:	d7 8a       	std	Z+23, r13	; 0x17
     632:	e0 8e       	std	Z+24, r14	; 0x18
     634:	f1 8e       	std	Z+25, r15	; 0x19
		i++;
     636:	21 96       	adiw	r28, 0x01	; 1
	I2C_ReadSensorVals();
	ConvertSensorVals();
	
	float AverageTheta = 0;
	int i = 1;
	while (i < 1000)
     638:	c8 3e       	cpi	r28, 0xE8	; 232
     63a:	f3 e0       	ldi	r31, 0x03	; 3
     63c:	df 07       	cpc	r29, r31
     63e:	59 f6       	brne	.-106    	; 0x5d6 <Task_Calibrate+0x2e>

	float BalanceTheta = AverageTheta;
	


	Motor_PWM_Left(100);
     640:	84 e6       	ldi	r24, 0x64	; 100
     642:	90 e0       	ldi	r25, 0x00	; 0
     644:	0e 94 be 05 	call	0xb7c	; 0xb7c <Motor_PWM_Left>
	Motor_PWM_Right(100);
     648:	84 e6       	ldi	r24, 0x64	; 100
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <Motor_PWM_Right>
	Motor_PWM_Enable(true);
     650:	81 e0       	ldi	r24, 0x01	; 1
     652:	0e 94 b0 05 	call	0xb60	; 0xb60 <Motor_PWM_Enable>
		
 	if(eeprom_is_ready()){
     656:	f9 99       	sbic	0x1f, 1	; 31
     658:	06 c0       	rjmp	.+12     	; 0x666 <Task_Calibrate+0xbe>
 	eeprom_update_float(&EEPROM_ADDRESS, BalanceTheta);
     65a:	b5 01       	movw	r22, r10
     65c:	a4 01       	movw	r20, r8
     65e:	80 e0       	ldi	r24, 0x00	; 0
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	0e 94 15 0c 	call	0x182a	; 0x182a <eeprom_update_dword>
     666:	8f e3       	ldi	r24, 0x3F	; 63
     668:	9c e9       	ldi	r25, 0x9C	; 156
     66a:	01 97       	sbiw	r24, 0x01	; 1
     66c:	f1 f7       	brne	.-4      	; 0x66a <Task_Calibrate+0xc2>
     66e:	00 c0       	rjmp	.+0      	; 0x670 <Task_Calibrate+0xc8>
     670:	00 00       	nop
 	}
 	
		_delay_ms(10);
 	CalibratedBalancePoint = eeprom_read_float(&EEPROM_ADDRESS);
     672:	80 e0       	ldi	r24, 0x00	; 0
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	0e 94 0f 0c 	call	0x181e	; 0x181e <eeprom_read_dword>
     67a:	60 93 4e 01 	sts	0x014E, r22	; 0x80014e <CalibratedBalancePoint>
     67e:	70 93 4f 01 	sts	0x014F, r23	; 0x80014f <CalibratedBalancePoint+0x1>
     682:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <CalibratedBalancePoint+0x2>
     686:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <CalibratedBalancePoint+0x3>
 	
 
	
 	if ( fabs(CalibratedBalancePoint) < 1.72)
     68a:	9f 77       	andi	r25, 0x7F	; 127
     68c:	26 ef       	ldi	r18, 0xF6	; 246
     68e:	38 e2       	ldi	r19, 0x28	; 40
     690:	4c ed       	ldi	r20, 0xDC	; 220
     692:	5f e3       	ldi	r21, 0x3F	; 63
     694:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <__cmpsf2>
     698:	88 23       	and	r24, r24
     69a:	1c f4       	brge	.+6      	; 0x6a2 <Task_Calibrate+0xfa>
 	{
 		Motor_PWM_Enable(false);
     69c:	80 e0       	ldi	r24, 0x00	; 0
     69e:	0e 94 b0 05 	call	0xb60	; 0xb60 <Motor_PWM_Enable>
 	}
	

	
}
     6a2:	df 91       	pop	r29
     6a4:	cf 91       	pop	r28
     6a6:	1f 91       	pop	r17
     6a8:	0f 91       	pop	r16
     6aa:	ff 90       	pop	r15
     6ac:	ef 90       	pop	r14
     6ae:	df 90       	pop	r13
     6b0:	cf 90       	pop	r12
     6b2:	bf 90       	pop	r11
     6b4:	af 90       	pop	r10
     6b6:	9f 90       	pop	r9
     6b8:	8f 90       	pop	r8
     6ba:	08 95       	ret

000006bc <BalanceBotInit>:
	float** u;
	float** Bu;
	float** Lm;
	} BalanceBot;
	
void BalanceBotInit(){
     6bc:	cf 92       	push	r12
     6be:	df 92       	push	r13
     6c0:	ef 92       	push	r14
     6c2:	ff 92       	push	r15
     6c4:	cf 93       	push	r28
     6c6:	df 93       	push	r29
	BalanceBot.K = allocate_matrix(1,3);
     6c8:	63 e0       	ldi	r22, 0x03	; 3
     6ca:	70 e0       	ldi	r23, 0x00	; 0
     6cc:	81 e0       	ldi	r24, 0x01	; 1
     6ce:	90 e0       	ldi	r25, 0x00	; 0
     6d0:	0e 94 83 05 	call	0xb06	; 0xb06 <allocate_matrix>
     6d4:	c2 e5       	ldi	r28, 0x52	; 82
     6d6:	d1 e0       	ldi	r29, 0x01	; 1
     6d8:	99 83       	std	Y+1, r25	; 0x01
     6da:	88 83       	st	Y, r24
	BalanceBot.K[0][0] = -10.0389432396441;
     6dc:	dc 01       	movw	r26, r24
     6de:	ed 91       	ld	r30, X+
     6e0:	fc 91       	ld	r31, X
     6e2:	83 e8       	ldi	r24, 0x83	; 131
     6e4:	9f e9       	ldi	r25, 0x9F	; 159
     6e6:	a0 e2       	ldi	r26, 0x20	; 32
     6e8:	b1 ec       	ldi	r27, 0xC1	; 193
     6ea:	80 83       	st	Z, r24
     6ec:	91 83       	std	Z+1, r25	; 0x01
     6ee:	a2 83       	std	Z+2, r26	; 0x02
     6f0:	b3 83       	std	Z+3, r27	; 0x03
	BalanceBot.K[0][1] = -78.5368489286044;
     6f2:	e8 81       	ld	r30, Y
     6f4:	f9 81       	ldd	r31, Y+1	; 0x01
     6f6:	a0 81       	ld	r26, Z
     6f8:	b1 81       	ldd	r27, Z+1	; 0x01
     6fa:	4e ed       	ldi	r20, 0xDE	; 222
     6fc:	52 e1       	ldi	r21, 0x12	; 18
     6fe:	6d e9       	ldi	r22, 0x9D	; 157
     700:	72 ec       	ldi	r23, 0xC2	; 194
     702:	14 96       	adiw	r26, 0x04	; 4
     704:	4d 93       	st	X+, r20
     706:	5d 93       	st	X+, r21
     708:	6d 93       	st	X+, r22
     70a:	7c 93       	st	X, r23
     70c:	17 97       	sbiw	r26, 0x07	; 7
	BalanceBot.K[0][2] = -5.22263746115749;
     70e:	01 90       	ld	r0, Z+
     710:	f0 81       	ld	r31, Z
     712:	e0 2d       	mov	r30, r0
     714:	89 ed       	ldi	r24, 0xD9	; 217
     716:	9f e1       	ldi	r25, 0x1F	; 31
     718:	a7 ea       	ldi	r26, 0xA7	; 167
     71a:	b0 ec       	ldi	r27, 0xC0	; 192
     71c:	80 87       	std	Z+8, r24	; 0x08
     71e:	91 87       	std	Z+9, r25	; 0x09
     720:	a2 87       	std	Z+10, r26	; 0x0a
     722:	b3 87       	std	Z+11, r27	; 0x0b
	BalanceBot.Bu = allocate_matrix(3,1);
     724:	61 e0       	ldi	r22, 0x01	; 1
     726:	70 e0       	ldi	r23, 0x00	; 0
     728:	83 e0       	ldi	r24, 0x03	; 3
     72a:	90 e0       	ldi	r25, 0x00	; 0
     72c:	0e 94 83 05 	call	0xb06	; 0xb06 <allocate_matrix>
     730:	99 8f       	std	Y+25, r25	; 0x19
     732:	88 8f       	std	Y+24, r24	; 0x18
	BalanceBot.Bu[0][0] = 0;
     734:	dc 01       	movw	r26, r24
     736:	ed 91       	ld	r30, X+
     738:	fc 91       	ld	r31, X
     73a:	10 82       	st	Z, r1
     73c:	11 82       	std	Z+1, r1	; 0x01
     73e:	12 82       	std	Z+2, r1	; 0x02
     740:	13 82       	std	Z+3, r1	; 0x03
	BalanceBot.Bu[0][1] = 0;
     742:	e8 8d       	ldd	r30, Y+24	; 0x18
     744:	f9 8d       	ldd	r31, Y+25	; 0x19
     746:	01 90       	ld	r0, Z+
     748:	f0 81       	ld	r31, Z
     74a:	e0 2d       	mov	r30, r0
     74c:	14 82       	std	Z+4, r1	; 0x04
     74e:	15 82       	std	Z+5, r1	; 0x05
     750:	16 82       	std	Z+6, r1	; 0x06
     752:	17 82       	std	Z+7, r1	; 0x07
	BalanceBot.Bu[0][2] = 0;
     754:	e8 8d       	ldd	r30, Y+24	; 0x18
     756:	f9 8d       	ldd	r31, Y+25	; 0x19
     758:	01 90       	ld	r0, Z+
     75a:	f0 81       	ld	r31, Z
     75c:	e0 2d       	mov	r30, r0
     75e:	10 86       	std	Z+8, r1	; 0x08
     760:	11 86       	std	Z+9, r1	; 0x09
     762:	12 86       	std	Z+10, r1	; 0x0a
     764:	13 86       	std	Z+11, r1	; 0x0b
	BalanceBot.Lm = allocate_matrix(3,1);
     766:	61 e0       	ldi	r22, 0x01	; 1
     768:	70 e0       	ldi	r23, 0x00	; 0
     76a:	83 e0       	ldi	r24, 0x03	; 3
     76c:	90 e0       	ldi	r25, 0x00	; 0
     76e:	0e 94 83 05 	call	0xb06	; 0xb06 <allocate_matrix>
     772:	9b 8f       	std	Y+27, r25	; 0x1b
     774:	8a 8f       	std	Y+26, r24	; 0x1a
	BalanceBot.Lm[0][0] = 0;
     776:	dc 01       	movw	r26, r24
     778:	ed 91       	ld	r30, X+
     77a:	fc 91       	ld	r31, X
     77c:	10 82       	st	Z, r1
     77e:	11 82       	std	Z+1, r1	; 0x01
     780:	12 82       	std	Z+2, r1	; 0x02
     782:	13 82       	std	Z+3, r1	; 0x03
	BalanceBot.Lm[0][1] = 0;
     784:	ea 8d       	ldd	r30, Y+26	; 0x1a
     786:	fb 8d       	ldd	r31, Y+27	; 0x1b
     788:	01 90       	ld	r0, Z+
     78a:	f0 81       	ld	r31, Z
     78c:	e0 2d       	mov	r30, r0
     78e:	14 82       	std	Z+4, r1	; 0x04
     790:	15 82       	std	Z+5, r1	; 0x05
     792:	16 82       	std	Z+6, r1	; 0x06
     794:	17 82       	std	Z+7, r1	; 0x07
	BalanceBot.Lm[0][2] = 0;
     796:	ea 8d       	ldd	r30, Y+26	; 0x1a
     798:	fb 8d       	ldd	r31, Y+27	; 0x1b
     79a:	01 90       	ld	r0, Z+
     79c:	f0 81       	ld	r31, Z
     79e:	e0 2d       	mov	r30, r0
     7a0:	10 86       	std	Z+8, r1	; 0x08
     7a2:	11 86       	std	Z+9, r1	; 0x09
     7a4:	12 86       	std	Z+10, r1	; 0x0a
     7a6:	13 86       	std	Z+11, r1	; 0x0b
	BalanceBot.L = allocate_matrix(3,1);
     7a8:	61 e0       	ldi	r22, 0x01	; 1
     7aa:	70 e0       	ldi	r23, 0x00	; 0
     7ac:	83 e0       	ldi	r24, 0x03	; 3
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	0e 94 83 05 	call	0xb06	; 0xb06 <allocate_matrix>
     7b4:	9b 83       	std	Y+3, r25	; 0x03
     7b6:	8a 83       	std	Y+2, r24	; 0x02
	BalanceBot.L[0][0] = 0.0332983580509553;
     7b8:	dc 01       	movw	r26, r24
     7ba:	ed 91       	ld	r30, X+
     7bc:	fc 91       	ld	r31, X
     7be:	8c ed       	ldi	r24, 0xDC	; 220
     7c0:	93 e6       	ldi	r25, 0x63	; 99
     7c2:	a8 e0       	ldi	r26, 0x08	; 8
     7c4:	bd e3       	ldi	r27, 0x3D	; 61
     7c6:	80 83       	st	Z, r24
     7c8:	91 83       	std	Z+1, r25	; 0x01
     7ca:	a2 83       	std	Z+2, r26	; 0x02
     7cc:	b3 83       	std	Z+3, r27	; 0x03
	BalanceBot.L[1][0] = 0.0477709335719864;
     7ce:	ea 81       	ldd	r30, Y+2	; 0x02
     7d0:	fb 81       	ldd	r31, Y+3	; 0x03
     7d2:	02 80       	ldd	r0, Z+2	; 0x02
     7d4:	f3 81       	ldd	r31, Z+3	; 0x03
     7d6:	e0 2d       	mov	r30, r0
     7d8:	84 e7       	ldi	r24, 0x74	; 116
     7da:	9b ea       	ldi	r25, 0xAB	; 171
     7dc:	a3 e4       	ldi	r26, 0x43	; 67
     7de:	bd e3       	ldi	r27, 0x3D	; 61
     7e0:	80 83       	st	Z, r24
     7e2:	91 83       	std	Z+1, r25	; 0x01
     7e4:	a2 83       	std	Z+2, r26	; 0x02
     7e6:	b3 83       	std	Z+3, r27	; 0x03
	BalanceBot.L[2][0] = 0.862378691970006;
     7e8:	ea 81       	ldd	r30, Y+2	; 0x02
     7ea:	fb 81       	ldd	r31, Y+3	; 0x03
     7ec:	04 80       	ldd	r0, Z+4	; 0x04
     7ee:	f5 81       	ldd	r31, Z+5	; 0x05
     7f0:	e0 2d       	mov	r30, r0
     7f2:	8a ed       	ldi	r24, 0xDA	; 218
     7f4:	94 ec       	ldi	r25, 0xC4	; 196
     7f6:	ac e5       	ldi	r26, 0x5C	; 92
     7f8:	bf e3       	ldi	r27, 0x3F	; 63
     7fa:	80 83       	st	Z, r24
     7fc:	91 83       	std	Z+1, r25	; 0x01
     7fe:	a2 83       	std	Z+2, r26	; 0x02
     800:	b3 83       	std	Z+3, r27	; 0x03
	BalanceBot.xd = allocate_matrix(3,1);
     802:	61 e0       	ldi	r22, 0x01	; 1
     804:	70 e0       	ldi	r23, 0x00	; 0
     806:	83 e0       	ldi	r24, 0x03	; 3
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	0e 94 83 05 	call	0xb06	; 0xb06 <allocate_matrix>
     80e:	9d 83       	std	Y+5, r25	; 0x05
     810:	8c 83       	std	Y+4, r24	; 0x04
	BalanceBot.xd[0][0] = 0;
     812:	dc 01       	movw	r26, r24
     814:	ed 91       	ld	r30, X+
     816:	fc 91       	ld	r31, X
     818:	10 82       	st	Z, r1
     81a:	11 82       	std	Z+1, r1	; 0x01
     81c:	12 82       	std	Z+2, r1	; 0x02
     81e:	13 82       	std	Z+3, r1	; 0x03
	BalanceBot.xd[1][0] = M_PI;
     820:	ec 81       	ldd	r30, Y+4	; 0x04
     822:	fd 81       	ldd	r31, Y+5	; 0x05
     824:	02 80       	ldd	r0, Z+2	; 0x02
     826:	f3 81       	ldd	r31, Z+3	; 0x03
     828:	e0 2d       	mov	r30, r0
     82a:	0f 2e       	mov	r0, r31
     82c:	fb ed       	ldi	r31, 0xDB	; 219
     82e:	cf 2e       	mov	r12, r31
     830:	ff e0       	ldi	r31, 0x0F	; 15
     832:	df 2e       	mov	r13, r31
     834:	f9 e4       	ldi	r31, 0x49	; 73
     836:	ef 2e       	mov	r14, r31
     838:	f0 e4       	ldi	r31, 0x40	; 64
     83a:	ff 2e       	mov	r15, r31
     83c:	f0 2d       	mov	r31, r0
     83e:	c0 82       	st	Z, r12
     840:	d1 82       	std	Z+1, r13	; 0x01
     842:	e2 82       	std	Z+2, r14	; 0x02
     844:	f3 82       	std	Z+3, r15	; 0x03
	BalanceBot.xd[2][0] = 0;
     846:	ec 81       	ldd	r30, Y+4	; 0x04
     848:	fd 81       	ldd	r31, Y+5	; 0x05
     84a:	04 80       	ldd	r0, Z+4	; 0x04
     84c:	f5 81       	ldd	r31, Z+5	; 0x05
     84e:	e0 2d       	mov	r30, r0
     850:	10 82       	st	Z, r1
     852:	11 82       	std	Z+1, r1	; 0x01
     854:	12 82       	std	Z+2, r1	; 0x02
     856:	13 82       	std	Z+3, r1	; 0x03
	BalanceBot.uLast = allocate_matrix(1,1);
     858:	61 e0       	ldi	r22, 0x01	; 1
     85a:	70 e0       	ldi	r23, 0x00	; 0
     85c:	81 e0       	ldi	r24, 0x01	; 1
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	0e 94 83 05 	call	0xb06	; 0xb06 <allocate_matrix>
     864:	9f 83       	std	Y+7, r25	; 0x07
     866:	8e 83       	std	Y+6, r24	; 0x06
	BalanceBot.uLast[0][0] = 0;
     868:	dc 01       	movw	r26, r24
     86a:	ed 91       	ld	r30, X+
     86c:	fc 91       	ld	r31, X
     86e:	10 82       	st	Z, r1
     870:	11 82       	std	Z+1, r1	; 0x01
     872:	12 82       	std	Z+2, r1	; 0x02
     874:	13 82       	std	Z+3, r1	; 0x03
	BalanceBot.measError = allocate_matrix(1,1);
     876:	61 e0       	ldi	r22, 0x01	; 1
     878:	70 e0       	ldi	r23, 0x00	; 0
     87a:	81 e0       	ldi	r24, 0x01	; 1
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	0e 94 83 05 	call	0xb06	; 0xb06 <allocate_matrix>
     882:	99 8b       	std	Y+17, r25	; 0x11
     884:	88 8b       	std	Y+16, r24	; 0x10
	BalanceBot.measError[0][0] = 0;
     886:	dc 01       	movw	r26, r24
     888:	ed 91       	ld	r30, X+
     88a:	fc 91       	ld	r31, X
     88c:	10 82       	st	Z, r1
     88e:	11 82       	std	Z+1, r1	; 0x01
     890:	12 82       	std	Z+2, r1	; 0x02
     892:	13 82       	std	Z+3, r1	; 0x03
	BalanceBot.x_est = allocate_matrix(3,1);
     894:	61 e0       	ldi	r22, 0x01	; 1
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	83 e0       	ldi	r24, 0x03	; 3
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	0e 94 83 05 	call	0xb06	; 0xb06 <allocate_matrix>
     8a0:	99 87       	std	Y+9, r25	; 0x09
     8a2:	88 87       	std	Y+8, r24	; 0x08
	BalanceBot.x_est[0][0] = 0;
     8a4:	dc 01       	movw	r26, r24
     8a6:	ed 91       	ld	r30, X+
     8a8:	fc 91       	ld	r31, X
     8aa:	10 82       	st	Z, r1
     8ac:	11 82       	std	Z+1, r1	; 0x01
     8ae:	12 82       	std	Z+2, r1	; 0x02
     8b0:	13 82       	std	Z+3, r1	; 0x03
	BalanceBot.x_est[1][0] = M_PI;
     8b2:	e8 85       	ldd	r30, Y+8	; 0x08
     8b4:	f9 85       	ldd	r31, Y+9	; 0x09
     8b6:	02 80       	ldd	r0, Z+2	; 0x02
     8b8:	f3 81       	ldd	r31, Z+3	; 0x03
     8ba:	e0 2d       	mov	r30, r0
     8bc:	c0 82       	st	Z, r12
     8be:	d1 82       	std	Z+1, r13	; 0x01
     8c0:	e2 82       	std	Z+2, r14	; 0x02
     8c2:	f3 82       	std	Z+3, r15	; 0x03
	BalanceBot.x_est[2][0] = 0;
     8c4:	e8 85       	ldd	r30, Y+8	; 0x08
     8c6:	f9 85       	ldd	r31, Y+9	; 0x09
     8c8:	04 80       	ldd	r0, Z+4	; 0x04
     8ca:	f5 81       	ldd	r31, Z+5	; 0x05
     8cc:	e0 2d       	mov	r30, r0
     8ce:	10 82       	st	Z, r1
     8d0:	11 82       	std	Z+1, r1	; 0x01
     8d2:	12 82       	std	Z+2, r1	; 0x02
     8d4:	13 82       	std	Z+3, r1	; 0x03
	BalanceBot.y_est = allocate_matrix(1,1);
     8d6:	61 e0       	ldi	r22, 0x01	; 1
     8d8:	70 e0       	ldi	r23, 0x00	; 0
     8da:	81 e0       	ldi	r24, 0x01	; 1
     8dc:	90 e0       	ldi	r25, 0x00	; 0
     8de:	0e 94 83 05 	call	0xb06	; 0xb06 <allocate_matrix>
     8e2:	9b 87       	std	Y+11, r25	; 0x0b
     8e4:	8a 87       	std	Y+10, r24	; 0x0a
	BalanceBot.y_est[0][0] = M_PI;
     8e6:	dc 01       	movw	r26, r24
     8e8:	ed 91       	ld	r30, X+
     8ea:	fc 91       	ld	r31, X
     8ec:	c0 82       	st	Z, r12
     8ee:	d1 82       	std	Z+1, r13	; 0x01
     8f0:	e2 82       	std	Z+2, r14	; 0x02
     8f2:	f3 82       	std	Z+3, r15	; 0x03
	BalanceBot.y = allocate_matrix(1,1);
     8f4:	61 e0       	ldi	r22, 0x01	; 1
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	81 e0       	ldi	r24, 0x01	; 1
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	0e 94 83 05 	call	0xb06	; 0xb06 <allocate_matrix>
     900:	9b 8b       	std	Y+19, r25	; 0x13
     902:	8a 8b       	std	Y+18, r24	; 0x12
	BalanceBot.y[0][0] = 0;
     904:	dc 01       	movw	r26, r24
     906:	ed 91       	ld	r30, X+
     908:	fc 91       	ld	r31, X
     90a:	10 82       	st	Z, r1
     90c:	11 82       	std	Z+1, r1	; 0x01
     90e:	12 82       	std	Z+2, r1	; 0x02
     910:	13 82       	std	Z+3, r1	; 0x03
	BalanceBot.Ad = allocate_matrix(3,3);
     912:	63 e0       	ldi	r22, 0x03	; 3
     914:	70 e0       	ldi	r23, 0x00	; 0
     916:	83 e0       	ldi	r24, 0x03	; 3
     918:	90 e0       	ldi	r25, 0x00	; 0
     91a:	0e 94 83 05 	call	0xb06	; 0xb06 <allocate_matrix>
     91e:	9d 87       	std	Y+13, r25	; 0x0d
     920:	8c 87       	std	Y+12, r24	; 0x0c
	BalanceBot.Ad[0][0] = 0.991982012478150;
     922:	dc 01       	movw	r26, r24
     924:	ed 91       	ld	r30, X+
     926:	fc 91       	ld	r31, X
     928:	88 e8       	ldi	r24, 0x88	; 136
     92a:	92 ef       	ldi	r25, 0xF2	; 242
     92c:	ad e7       	ldi	r26, 0x7D	; 125
     92e:	bf e3       	ldi	r27, 0x3F	; 63
     930:	80 83       	st	Z, r24
     932:	91 83       	std	Z+1, r25	; 0x01
     934:	a2 83       	std	Z+2, r26	; 0x02
     936:	b3 83       	std	Z+3, r27	; 0x03
	BalanceBot.Ad[0][1] = 0.00509492179608207;
     938:	ec 85       	ldd	r30, Y+12	; 0x0c
     93a:	fd 85       	ldd	r31, Y+13	; 0x0d
     93c:	01 90       	ld	r0, Z+
     93e:	f0 81       	ld	r31, Z
     940:	e0 2d       	mov	r30, r0
     942:	8d e4       	ldi	r24, 0x4D	; 77
     944:	93 ef       	ldi	r25, 0xF3	; 243
     946:	a6 ea       	ldi	r26, 0xA6	; 166
     948:	bb e3       	ldi	r27, 0x3B	; 59
     94a:	84 83       	std	Z+4, r24	; 0x04
     94c:	95 83       	std	Z+5, r25	; 0x05
     94e:	a6 83       	std	Z+6, r26	; 0x06
     950:	b7 83       	std	Z+7, r27	; 0x07
	BalanceBot.Ad[0][2] = 0.00000255083713775875;
     952:	ec 85       	ldd	r30, Y+12	; 0x0c
     954:	fd 85       	ldd	r31, Y+13	; 0x0d
     956:	01 90       	ld	r0, Z+
     958:	f0 81       	ld	r31, Z
     95a:	e0 2d       	mov	r30, r0
     95c:	8c e0       	ldi	r24, 0x0C	; 12
     95e:	9f e2       	ldi	r25, 0x2F	; 47
     960:	ab e2       	ldi	r26, 0x2B	; 43
     962:	b6 e3       	ldi	r27, 0x36	; 54
     964:	80 87       	std	Z+8, r24	; 0x08
     966:	91 87       	std	Z+9, r25	; 0x09
     968:	a2 87       	std	Z+10, r26	; 0x0a
     96a:	b3 87       	std	Z+11, r27	; 0x0b
	BalanceBot.Ad[1][0] = 0.0000223804723377318;
     96c:	ec 85       	ldd	r30, Y+12	; 0x0c
     96e:	fd 85       	ldd	r31, Y+13	; 0x0d
     970:	02 80       	ldd	r0, Z+2	; 0x02
     972:	f3 81       	ldd	r31, Z+3	; 0x03
     974:	e0 2d       	mov	r30, r0
     976:	83 eb       	ldi	r24, 0xB3	; 179
     978:	9d eb       	ldi	r25, 0xBD	; 189
     97a:	ab eb       	ldi	r26, 0xBB	; 187
     97c:	b7 e3       	ldi	r27, 0x37	; 55
     97e:	80 83       	st	Z, r24
     980:	91 83       	std	Z+1, r25	; 0x01
     982:	a2 83       	std	Z+2, r26	; 0x02
     984:	b3 83       	std	Z+3, r27	; 0x03
	BalanceBot.Ad[1][1] = 1.00009790913983;
     986:	ec 85       	ldd	r30, Y+12	; 0x0c
     988:	fd 85       	ldd	r31, Y+13	; 0x0d
     98a:	02 80       	ldd	r0, Z+2	; 0x02
     98c:	f3 81       	ldd	r31, Z+3	; 0x03
     98e:	e0 2d       	mov	r30, r0
     990:	85 e3       	ldi	r24, 0x35	; 53
     992:	93 e0       	ldi	r25, 0x03	; 3
     994:	a0 e8       	ldi	r26, 0x80	; 128
     996:	bf e3       	ldi	r27, 0x3F	; 63
     998:	84 83       	std	Z+4, r24	; 0x04
     99a:	95 83       	std	Z+5, r25	; 0x05
     99c:	a6 83       	std	Z+6, r26	; 0x06
     99e:	b7 83       	std	Z+7, r27	; 0x07
	BalanceBot.Ad[1][2] = 0.00100003263298865;
     9a0:	ec 85       	ldd	r30, Y+12	; 0x0c
     9a2:	fd 85       	ldd	r31, Y+13	; 0x0d
     9a4:	02 80       	ldd	r0, Z+2	; 0x02
     9a6:	f3 81       	ldd	r31, Z+3	; 0x03
     9a8:	e0 2d       	mov	r30, r0
     9aa:	47 e8       	ldi	r20, 0x87	; 135
     9ac:	53 e1       	ldi	r21, 0x13	; 19
     9ae:	63 e8       	ldi	r22, 0x83	; 131
     9b0:	7a e3       	ldi	r23, 0x3A	; 58
     9b2:	40 87       	std	Z+8, r20	; 0x08
     9b4:	51 87       	std	Z+9, r21	; 0x09
     9b6:	62 87       	std	Z+10, r22	; 0x0a
     9b8:	73 87       	std	Z+11, r23	; 0x0b
	BalanceBot.Ad[2][0] = 0.0447016999369507;
     9ba:	ec 85       	ldd	r30, Y+12	; 0x0c
     9bc:	fd 85       	ldd	r31, Y+13	; 0x0d
     9be:	04 80       	ldd	r0, Z+4	; 0x04
     9c0:	f5 81       	ldd	r31, Z+5	; 0x05
     9c2:	e0 2d       	mov	r30, r0
     9c4:	41 e2       	ldi	r20, 0x21	; 33
     9c6:	59 e1       	ldi	r21, 0x19	; 25
     9c8:	67 e3       	ldi	r22, 0x37	; 55
     9ca:	7d e3       	ldi	r23, 0x3D	; 61
     9cc:	40 83       	st	Z, r20
     9ce:	51 83       	std	Z+1, r21	; 0x01
     9d0:	62 83       	std	Z+2, r22	; 0x02
     9d2:	73 83       	std	Z+3, r23	; 0x03
	BalanceBot.Ad[2][1] = 0.195859583825295;
     9d4:	ec 85       	ldd	r30, Y+12	; 0x0c
     9d6:	fd 85       	ldd	r31, Y+13	; 0x0d
     9d8:	04 80       	ldd	r0, Z+4	; 0x04
     9da:	f5 81       	ldd	r31, Z+5	; 0x05
     9dc:	e0 2d       	mov	r30, r0
     9de:	4a e6       	ldi	r20, 0x6A	; 106
     9e0:	5f e8       	ldi	r21, 0x8F	; 143
     9e2:	68 e4       	ldi	r22, 0x48	; 72
     9e4:	7e e3       	ldi	r23, 0x3E	; 62
     9e6:	44 83       	std	Z+4, r20	; 0x04
     9e8:	55 83       	std	Z+5, r21	; 0x05
     9ea:	66 83       	std	Z+6, r22	; 0x06
     9ec:	77 83       	std	Z+7, r23	; 0x07
	BalanceBot.Ad[2][2] = 1.00009790913983;
     9ee:	ec 85       	ldd	r30, Y+12	; 0x0c
     9f0:	fd 85       	ldd	r31, Y+13	; 0x0d
     9f2:	04 80       	ldd	r0, Z+4	; 0x04
     9f4:	f5 81       	ldd	r31, Z+5	; 0x05
     9f6:	e0 2d       	mov	r30, r0
     9f8:	80 87       	std	Z+8, r24	; 0x08
     9fa:	91 87       	std	Z+9, r25	; 0x09
     9fc:	a2 87       	std	Z+10, r26	; 0x0a
     9fe:	b3 87       	std	Z+11, r27	; 0x0b
	BalanceBot.Bd = allocate_matrix(3,1);
     a00:	61 e0       	ldi	r22, 0x01	; 1
     a02:	70 e0       	ldi	r23, 0x00	; 0
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	0e 94 83 05 	call	0xb06	; 0xb06 <allocate_matrix>
     a0c:	9f 87       	std	Y+15, r25	; 0x0f
     a0e:	8e 87       	std	Y+14, r24	; 0x0e
	BalanceBot.Bd[0][0] = 0.000909862410824434;
     a10:	dc 01       	movw	r26, r24
     a12:	ed 91       	ld	r30, X+
     a14:	fc 91       	ld	r31, X
     a16:	85 ed       	ldi	r24, 0xD5	; 213
     a18:	93 e8       	ldi	r25, 0x83	; 131
     a1a:	ae e6       	ldi	r26, 0x6E	; 110
     a1c:	ba e3       	ldi	r27, 0x3A	; 58
     a1e:	80 83       	st	Z, r24
     a20:	91 83       	std	Z+1, r25	; 0x01
     a22:	a2 83       	std	Z+2, r26	; 0x02
     a24:	b3 83       	std	Z+3, r27	; 0x03
	BalanceBot.Bd[1][0] = -0.00000253968348804726;
     a26:	ee 85       	ldd	r30, Y+14	; 0x0e
     a28:	ff 85       	ldd	r31, Y+15	; 0x0f
     a2a:	02 80       	ldd	r0, Z+2	; 0x02
     a2c:	f3 81       	ldd	r31, Z+3	; 0x03
     a2e:	e0 2d       	mov	r30, r0
     a30:	8e e6       	ldi	r24, 0x6E	; 110
     a32:	9f e6       	ldi	r25, 0x6F	; 111
     a34:	aa e2       	ldi	r26, 0x2A	; 42
     a36:	b6 eb       	ldi	r27, 0xB6	; 182
     a38:	80 83       	st	Z, r24
     a3a:	91 83       	std	Z+1, r25	; 0x01
     a3c:	a2 83       	std	Z+2, r26	; 0x02
     a3e:	b3 83       	std	Z+3, r27	; 0x03
	BalanceBot.Bd[2][0] = -0.00507264402217493;
     a40:	ee 85       	ldd	r30, Y+14	; 0x0e
     a42:	ff 85       	ldd	r31, Y+15	; 0x0f
     a44:	04 80       	ldd	r0, Z+4	; 0x04
     a46:	f5 81       	ldd	r31, Z+5	; 0x05
     a48:	e0 2d       	mov	r30, r0
     a4a:	8c e6       	ldi	r24, 0x6C	; 108
     a4c:	98 e3       	ldi	r25, 0x38	; 56
     a4e:	a6 ea       	ldi	r26, 0xA6	; 166
     a50:	bb eb       	ldi	r27, 0xBB	; 187
     a52:	80 83       	st	Z, r24
     a54:	91 83       	std	Z+1, r25	; 0x01
     a56:	a2 83       	std	Z+2, r26	; 0x02
     a58:	b3 83       	std	Z+3, r27	; 0x03
	BalanceBot.stateError = allocate_matrix(3,1);
     a5a:	61 e0       	ldi	r22, 0x01	; 1
     a5c:	70 e0       	ldi	r23, 0x00	; 0
     a5e:	83 e0       	ldi	r24, 0x03	; 3
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	0e 94 83 05 	call	0xb06	; 0xb06 <allocate_matrix>
     a66:	9d 8b       	std	Y+21, r25	; 0x15
     a68:	8c 8b       	std	Y+20, r24	; 0x14
	BalanceBot.u = allocate_matrix(1,1);
     a6a:	61 e0       	ldi	r22, 0x01	; 1
     a6c:	70 e0       	ldi	r23, 0x00	; 0
     a6e:	81 e0       	ldi	r24, 0x01	; 1
     a70:	90 e0       	ldi	r25, 0x00	; 0
     a72:	0e 94 83 05 	call	0xb06	; 0xb06 <allocate_matrix>
     a76:	9f 8b       	std	Y+23, r25	; 0x17
     a78:	8e 8b       	std	Y+22, r24	; 0x16
}
     a7a:	df 91       	pop	r29
     a7c:	cf 91       	pop	r28
     a7e:	ff 90       	pop	r15
     a80:	ef 90       	pop	r14
     a82:	df 90       	pop	r13
     a84:	cf 90       	pop	r12
     a86:	08 95       	ret

00000a88 <InitializeModules>:
	.extended = 0b11110100,
};

void InitializeModules(){
	
	initialize_LED(DDRF, PORTF0);
     a88:	80 9a       	sbi	0x10, 0	; 16
	initialize_LED(DDRF, PORTF1);
     a8a:	81 9a       	sbi	0x10, 1	; 16
	
	BalanceBotInit();
     a8c:	0e 94 5e 03 	call	0x6bc	; 0x6bc <BalanceBotInit>
	Initialize_Timing();		//Starts Timer 0, used to count millis/micros to keep track of tasks and other timing functions
     a90:	0e 94 8f 06 	call	0xd1e	; 0xd1e <Initialize_Timing>
	Motor_PWM_Init();
     a94:	0e 94 03 06 	call	0xc06	; 0xc06 <Motor_PWM_Init>
	Initialize_Task(&task_Balance, MPU6050.dt, Task_Balance);
     a98:	40 91 3e 01 	lds	r20, 0x013E	; 0x80013e <MPU6050+0x1e>
     a9c:	50 91 3f 01 	lds	r21, 0x013F	; 0x80013f <MPU6050+0x1f>
     aa0:	60 91 40 01 	lds	r22, 0x0140	; 0x800140 <MPU6050+0x20>
     aa4:	70 91 41 01 	lds	r23, 0x0141	; 0x800141 <MPU6050+0x21>
     aa8:	27 ef       	ldi	r18, 0xF7	; 247
     aaa:	31 e0       	ldi	r19, 0x01	; 1
     aac:	8d e7       	ldi	r24, 0x7D	; 125
     aae:	91 e0       	ldi	r25, 0x01	; 1
     ab0:	0e 94 3c 06 	call	0xc78	; 0xc78 <Initialize_Task>
	Initialize_Task(&task_Calibrate, -1, Task_Calibrate);
     ab4:	24 ed       	ldi	r18, 0xD4	; 212
     ab6:	32 e0       	ldi	r19, 0x02	; 2
     ab8:	40 e0       	ldi	r20, 0x00	; 0
     aba:	50 e0       	ldi	r21, 0x00	; 0
     abc:	60 e8       	ldi	r22, 0x80	; 128
     abe:	7f eb       	ldi	r23, 0xBF	; 191
     ac0:	8e e6       	ldi	r24, 0x6E	; 110
     ac2:	91 e0       	ldi	r25, 0x01	; 1
     ac4:	0e 94 3c 06 	call	0xc78	; 0xc78 <Initialize_Task>
	Init_MPU6050();
     ac8:	0e 94 9e 00 	call	0x13c	; 0x13c <Init_MPU6050>
     acc:	08 95       	ret

00000ace <main>:
}

int main(void)
{
	
	InitializeModules();
     ace:	0e 94 44 05 	call	0xa88	; 0xa88 <InitializeModules>
	CalibratedBalancePoint = eeprom_read_float(&EEPROM_ADDRESS);
     ad2:	80 e0       	ldi	r24, 0x00	; 0
     ad4:	90 e0       	ldi	r25, 0x00	; 0
     ad6:	0e 94 0f 0c 	call	0x181e	; 0x181e <eeprom_read_dword>
     ada:	60 93 4e 01 	sts	0x014E, r22	; 0x80014e <CalibratedBalancePoint>
     ade:	70 93 4f 01 	sts	0x014F, r23	; 0x80014f <CalibratedBalancePoint+0x1>
     ae2:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <CalibratedBalancePoint+0x2>
     ae6:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <CalibratedBalancePoint+0x3>
	task_Balance.is_active = true;
     aea:	81 e0       	ldi	r24, 0x01	; 1
     aec:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <task_Balance>
	task_Calibrate.is_active = false;
     af0:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <task_Calibrate>

while (1)
{
	Task_Run_If_Ready(&task_Balance);
     af4:	8d e7       	ldi	r24, 0x7D	; 125
     af6:	91 e0       	ldi	r25, 0x01	; 1
     af8:	0e 94 69 06 	call	0xcd2	; 0xcd2 <Task_Run_If_Ready>
	Task_Run_If_Ready(&task_Calibrate);	
     afc:	8e e6       	ldi	r24, 0x6E	; 110
     afe:	91 e0       	ldi	r25, 0x01	; 1
     b00:	0e 94 69 06 	call	0xcd2	; 0xcd2 <Task_Run_If_Ready>
     b04:	f7 cf       	rjmp	.-18     	; 0xaf4 <main+0x26>

00000b06 <allocate_matrix>:
 *	rows: number of rows desired for the matrix
 *	columns: number of columns desired for the matrix
 *
 *	returns: An int** of size [rows][columns]
 */
float** allocate_matrix(int rows, int columns) {
     b06:	cf 92       	push	r12
     b08:	df 92       	push	r13
     b0a:	ef 92       	push	r14
     b0c:	ff 92       	push	r15
     b0e:	0f 93       	push	r16
     b10:	1f 93       	push	r17
     b12:	cf 93       	push	r28
     b14:	df 93       	push	r29
     b16:	ec 01       	movw	r28, r24
     b18:	7b 01       	movw	r14, r22
    float ** arr = (float **) malloc(rows * sizeof(float *));
     b1a:	8c 01       	movw	r16, r24
     b1c:	00 0f       	add	r16, r16
     b1e:	11 1f       	adc	r17, r17
     b20:	c8 01       	movw	r24, r16
     b22:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <malloc>
     b26:	6c 01       	movw	r12, r24
    for(int i = 0; i < rows; i++) {
     b28:	1c 16       	cp	r1, r28
     b2a:	1d 06       	cpc	r1, r29
     b2c:	7c f4       	brge	.+30     	; 0xb4c <allocate_matrix+0x46>
        arr[i] = (float *) malloc(columns * sizeof(float));
     b2e:	ee 0c       	add	r14, r14
     b30:	ff 1c       	adc	r15, r15
     b32:	ee 0c       	add	r14, r14
     b34:	ff 1c       	adc	r15, r15
     b36:	ec 01       	movw	r28, r24
     b38:	08 0f       	add	r16, r24
     b3a:	19 1f       	adc	r17, r25
     b3c:	c7 01       	movw	r24, r14
     b3e:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <malloc>
     b42:	89 93       	st	Y+, r24
     b44:	99 93       	st	Y+, r25
 *
 *	returns: An int** of size [rows][columns]
 */
float** allocate_matrix(int rows, int columns) {
    float ** arr = (float **) malloc(rows * sizeof(float *));
    for(int i = 0; i < rows; i++) {
     b46:	c0 17       	cp	r28, r16
     b48:	d1 07       	cpc	r29, r17
     b4a:	c1 f7       	brne	.-16     	; 0xb3c <allocate_matrix+0x36>
        arr[i] = (float *) malloc(columns * sizeof(float));
    }
    return arr;
}
     b4c:	c6 01       	movw	r24, r12
     b4e:	df 91       	pop	r29
     b50:	cf 91       	pop	r28
     b52:	1f 91       	pop	r17
     b54:	0f 91       	pop	r16
     b56:	ff 90       	pop	r15
     b58:	ef 90       	pop	r14
     b5a:	df 90       	pop	r13
     b5c:	cf 90       	pop	r12
     b5e:	08 95       	ret

00000b60 <Motor_PWM_Enable>:
 * @param [bool] true if enabled, false if disabled
 */
bool Is_Motor_PWM_Enabled(){
    if(((DDRB & 0b01100000 ) == 0b01100000) && (DDRC & 0b10000000) && (DDRD & 0b10000000)){return true;}
    return false;
}
     b60:	88 23       	and	r24, r24
     b62:	31 f0       	breq	.+12     	; 0xb70 <Motor_PWM_Enable+0x10>
     b64:	84 b1       	in	r24, 0x04	; 4
     b66:	80 66       	ori	r24, 0x60	; 96
     b68:	84 b9       	out	0x04, r24	; 4
     b6a:	3f 9a       	sbi	0x07, 7	; 7
     b6c:	57 9a       	sbi	0x0a, 7	; 10
     b6e:	08 95       	ret
     b70:	84 b1       	in	r24, 0x04	; 4
     b72:	8f 79       	andi	r24, 0x9F	; 159
     b74:	84 b9       	out	0x04, r24	; 4
     b76:	3f 98       	cbi	0x07, 7	; 7
     b78:	57 98       	cbi	0x0a, 7	; 10
     b7a:	08 95       	ret

00000b7c <Motor_PWM_Left>:
 * Function Motor_PWM_Left sets the PWM duty cycle for the left motor.
 * @return [int32_t] The count number.
 */
void Motor_PWM_Left( int16_t pwm ){
	int16_t sign = pwm;
	pwm = abs(pwm);
     b7c:	9c 01       	movw	r18, r24
     b7e:	99 23       	and	r25, r25
     b80:	24 f4       	brge	.+8      	; 0xb8a <Motor_PWM_Left+0xe>
     b82:	22 27       	eor	r18, r18
     b84:	33 27       	eor	r19, r19
     b86:	28 1b       	sub	r18, r24
     b88:	39 0b       	sbc	r19, r25
	
	if(pwm > MAX_PWM_COUNT){pwm = MAX_PWM_COUNT;}
     b8a:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <MAX_PWM_COUNT>
     b8e:	50 e0       	ldi	r21, 0x00	; 0
	union {
		uint16_t word;
		uint8_t arr[2];
	}WordToBytes;
	
	WordToBytes.word = pwm; // / ICR_Split.word;
     b90:	42 17       	cp	r20, r18
     b92:	53 07       	cpc	r21, r19
     b94:	0c f4       	brge	.+2      	; 0xb98 <Motor_PWM_Left+0x1c>
     b96:	9a 01       	movw	r18, r20
	
	//if (WordToBytes.arr[0] != 200){WordToBytes.word = 100;}

    if(sign < 0){
     b98:	99 23       	and	r25, r25
     b9a:	3c f4       	brge	.+14     	; 0xbaa <Motor_PWM_Left+0x2e>
		
        OCR4A = WordToBytes.arr[0];
     b9c:	20 93 cf 00 	sts	0x00CF, r18	; 0x8000cf <__DATA_REGION_ORIGIN__+0x6f>
		//if(OCR4A == 200){LED_ON(DDRF, PORTF0);}
		OCR1AH = 0;
     ba0:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
		OCR1AL = 0;
     ba4:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
     ba8:	08 95       	ret
    }else{
		
        OCR4A = 0;
     baa:	10 92 cf 00 	sts	0x00CF, r1	; 0x8000cf <__DATA_REGION_ORIGIN__+0x6f>
        OCR1AH = 0;
     bae:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
        OCR1AL = WordToBytes.arr[0];
     bb2:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
     bb6:	08 95       	ret

00000bb8 <Motor_PWM_Right>:
 * Function Motor_PWM_Right sets the PWM duty cycle for the right motor.
 * @return [int32_t] The count number.
 */
void Motor_PWM_Right( int16_t pwm ){
	int16_t sign = pwm;
	pwm = abs(pwm);
     bb8:	9c 01       	movw	r18, r24
     bba:	99 23       	and	r25, r25
     bbc:	24 f4       	brge	.+8      	; 0xbc6 <Motor_PWM_Right+0xe>
     bbe:	22 27       	eor	r18, r18
     bc0:	33 27       	eor	r19, r19
     bc2:	28 1b       	sub	r18, r24
     bc4:	39 0b       	sbc	r19, r25
	
	if(pwm>MAX_PWM_COUNT){pwm = MAX_PWM_COUNT;}
     bc6:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <MAX_PWM_COUNT>
     bca:	50 e0       	ldi	r21, 0x00	; 0
	union {
		uint16_t word;
		uint8_t arr[2];
	}WordToBytes;
	
	WordToBytes.word = pwm; // / ICR_Split.word;
     bcc:	42 17       	cp	r20, r18
     bce:	53 07       	cpc	r21, r19
     bd0:	0c f4       	brge	.+2      	; 0xbd4 <Motor_PWM_Right+0x1c>
     bd2:	9a 01       	movw	r18, r20
	if(sign < 0){
     bd4:	99 23       	and	r25, r25
     bd6:	3c f4       	brge	.+14     	; 0xbe6 <Motor_PWM_Right+0x2e>
		
		OCR4D = WordToBytes.arr[0];
     bd8:	20 93 d2 00 	sts	0x00D2, r18	; 0x8000d2 <__DATA_REGION_ORIGIN__+0x72>
		OCR1BH = 0;
     bdc:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
		OCR1BL = 0;
     be0:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
     be4:	08 95       	ret
		
		}else{
		OCR4D = 0;
     be6:	10 92 d2 00 	sts	0x00D2, r1	; 0x8000d2 <__DATA_REGION_ORIGIN__+0x72>
		OCR1BH = 0;
     bea:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
		OCR1BL = WordToBytes.arr[0];
     bee:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
     bf2:	08 95       	ret

00000bf4 <Set_MAX_Motor_PWM>:
 * Function Set_MAX_Motor_PWM sets the maximum pwm count. This function sets the timer counts to zero because
 * the ICR1 can cause undesired behaviors if change dynamically below the current counts.  See page 128 of the
 * atmega32U4 datasheat.
 */
void Set_MAX_Motor_PWM( ){
    ICR1L = MAX_PWM_COUNT;		//Timer 1 TOP
     bf4:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <MAX_PWM_COUNT>
     bf8:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__DATA_REGION_ORIGIN__+0x26>
	OCR4C = MAX_PWM_COUNT;		//Timer 4 TOP
     bfc:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <MAX_PWM_COUNT>
     c00:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__DATA_REGION_ORIGIN__+0x71>
     c04:	08 95       	ret

00000c06 <Motor_PWM_Init>:
 */

uint8_t MAX_PWM_COUNT = 255;			// Maximum PWM Count for all timers


void Motor_PWM_Init( ){
     c06:	0f 93       	push	r16
     c08:	1f 93       	push	r17
     c0a:	cf 93       	push	r28
     c0c:	df 93       	push	r29
 
    DDRB &= 0b10011111;         //Set pins PB5 (AIN1) and PB6 (BIN1) to low
     c0e:	84 b1       	in	r24, 0x04	; 4
     c10:	8f 79       	andi	r24, 0x9F	; 159
     c12:	84 b9       	out	0x04, r24	; 4
	DDRC &= 0b01111111;			//Set pin PC7 (AIN2) to low
     c14:	3f 98       	cbi	0x07, 7	; 7
	DDRD &= 0b01111111;			//Set pin PD7 (BIN2) to low
     c16:	57 98       	cbi	0x0a, 7	; 10
	
    

    //Setting Output Compare Match Mode to Toggle on compare match
    TCCR1A |= (1<<COM1A1);
     c18:	e0 e8       	ldi	r30, 0x80	; 128
     c1a:	f0 e0       	ldi	r31, 0x00	; 0
     c1c:	80 81       	ld	r24, Z
     c1e:	80 68       	ori	r24, 0x80	; 128
     c20:	80 83       	st	Z, r24
    TCCR1A |= (1<<COM1B1);
     c22:	80 81       	ld	r24, Z
     c24:	80 62       	ori	r24, 0x20	; 32
     c26:	80 83       	st	Z, r24
	
	
	TCCR4A |= (1<<COM4A1);
     c28:	00 ec       	ldi	r16, 0xC0	; 192
     c2a:	10 e0       	ldi	r17, 0x00	; 0
     c2c:	f8 01       	movw	r30, r16
     c2e:	80 81       	ld	r24, Z
     c30:	80 68       	ori	r24, 0x80	; 128
     c32:	80 83       	st	Z, r24
	TCCR4C |= (1<<COM4D1);
     c34:	c2 ec       	ldi	r28, 0xC2	; 194
     c36:	d0 e0       	ldi	r29, 0x00	; 0
     c38:	88 81       	ld	r24, Y
     c3a:	88 60       	ori	r24, 0x08	; 8
     c3c:	88 83       	st	Y, r24


    Set_MAX_Motor_PWM();
     c3e:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <Set_MAX_Motor_PWM>


    //Set mode to Phase and frequency correct and clock prescalar to 256
    // Sets Max ICR value to 8191
    TCCR1B |= (1<<WGM13) | (1<<CS10);
     c42:	e1 e8       	ldi	r30, 0x81	; 129
     c44:	f0 e0       	ldi	r31, 0x00	; 0
     c46:	80 81       	ld	r24, Z
     c48:	81 61       	ori	r24, 0x11	; 17
     c4a:	80 83       	st	Z, r24
	
	//Set mode to Phase and frequency correct and clock prescalar to 256
	TCCR4A |= (1<<PWM4A);
     c4c:	f8 01       	movw	r30, r16
     c4e:	80 81       	ld	r24, Z
     c50:	82 60       	ori	r24, 0x02	; 2
     c52:	80 83       	st	Z, r24
	TCCR4B |= (1<<CS40);
     c54:	e1 ec       	ldi	r30, 0xC1	; 193
     c56:	f0 e0       	ldi	r31, 0x00	; 0
     c58:	80 81       	ld	r24, Z
     c5a:	81 60       	ori	r24, 0x01	; 1
     c5c:	80 83       	st	Z, r24
	TCCR4C |= (1<<PWM4D);
     c5e:	88 81       	ld	r24, Y
     c60:	81 60       	ori	r24, 0x01	; 1
     c62:	88 83       	st	Y, r24
	TCCR4D |= (1<<WGM40);
     c64:	e3 ec       	ldi	r30, 0xC3	; 195
     c66:	f0 e0       	ldi	r31, 0x00	; 0
     c68:	80 81       	ld	r24, Z
     c6a:	81 60       	ori	r24, 0x01	; 1
     c6c:	80 83       	st	Z, r24
}
     c6e:	df 91       	pop	r29
     c70:	cf 91       	pop	r28
     c72:	1f 91       	pop	r17
     c74:	0f 91       	pop	r16
     c76:	08 95       	ret

00000c78 <Initialize_Task>:
}

/** Function Task_Cancel changes the internal state to disable the task **/
void Task_Cancel( Task_t* task )
{
    task->is_active = false;
     c78:	fc 01       	movw	r30, r24
     c7a:	10 82       	st	Z, r1
     c7c:	41 83       	std	Z+1, r20	; 0x01
     c7e:	52 83       	std	Z+2, r21	; 0x02
     c80:	63 83       	std	Z+3, r22	; 0x03
     c82:	74 83       	std	Z+4, r23	; 0x04
     c84:	12 86       	std	Z+10, r1	; 0x0a
     c86:	11 86       	std	Z+9, r1	; 0x09
     c88:	15 82       	std	Z+5, r1	; 0x05
     c8a:	16 82       	std	Z+6, r1	; 0x06
     c8c:	17 82       	std	Z+7, r1	; 0x07
     c8e:	10 86       	std	Z+8, r1	; 0x08
     c90:	34 87       	std	Z+12, r19	; 0x0c
     c92:	23 87       	std	Z+11, r18	; 0x0b
     c94:	08 95       	ret

00000c96 <Task_Is_Ready>:

/** Function Task_Is_Ready indicates if the task should be run. It checks both
 * the active status and the timing.
 */
bool Task_Is_Ready( Task_t* task )
{
     c96:	cf 92       	push	r12
     c98:	df 92       	push	r13
     c9a:	ef 92       	push	r14
     c9c:	ff 92       	push	r15
     c9e:	fc 01       	movw	r30, r24
    if(task->is_active && task->run_period < Timing_Seconds_Since(&task->time_last_ran)){ //___ > task->run_period
     ca0:	80 81       	ld	r24, Z
     ca2:	88 23       	and	r24, r24
     ca4:	89 f0       	breq	.+34     	; 0xcc8 <Task_Is_Ready+0x32>
     ca6:	c1 80       	ldd	r12, Z+1	; 0x01
     ca8:	d2 80       	ldd	r13, Z+2	; 0x02
     caa:	e3 80       	ldd	r14, Z+3	; 0x03
     cac:	f4 80       	ldd	r15, Z+4	; 0x04
     cae:	cf 01       	movw	r24, r30
     cb0:	05 96       	adiw	r24, 0x05	; 5
     cb2:	0e 94 0c 07 	call	0xe18	; 0xe18 <Timing_Seconds_Since>
     cb6:	9b 01       	movw	r18, r22
     cb8:	ac 01       	movw	r20, r24
     cba:	c7 01       	movw	r24, r14
     cbc:	b6 01       	movw	r22, r12
     cbe:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <__cmpsf2>
     cc2:	88 1f       	adc	r24, r24
     cc4:	88 27       	eor	r24, r24
     cc6:	88 1f       	adc	r24, r24
        
    }else{
        return false;
    }
     // MEGN540 Update to set the return statement based on is_active and time_last_ran. 
}
     cc8:	ff 90       	pop	r15
     cca:	ef 90       	pop	r14
     ccc:	df 90       	pop	r13
     cce:	cf 90       	pop	r12
     cd0:	08 95       	ret

00000cd2 <Task_Run_If_Ready>:
/** Function Task_Run_If_Ready Function Task_Run_If_Ready checks to see if the given task is ready for execution, executes the task, 
 *  and resets the time_last_ran appropriately. If the task function pointer is NULL then it just 
 *  returns if the task is ready and resets the time_last_ran.
 */ 
bool Task_Run_If_Ready( Task_t* task )
{
     cd2:	1f 93       	push	r17
     cd4:	cf 93       	push	r28
     cd6:	df 93       	push	r29
     cd8:	ec 01       	movw	r28, r24
    // Check to see if the task is ready to run.
    if( Task_Is_Ready(task)) 
     cda:	0e 94 4b 06 	call	0xc96	; 0xc96 <Task_Is_Ready>
     cde:	18 2f       	mov	r17, r24
     ce0:	88 23       	and	r24, r24
     ce2:	c1 f0       	breq	.+48     	; 0xd14 <Task_Run_If_Ready+0x42>
    {        
        if(task->run_period == -1)
     ce4:	20 e0       	ldi	r18, 0x00	; 0
     ce6:	30 e0       	ldi	r19, 0x00	; 0
     ce8:	40 e8       	ldi	r20, 0x80	; 128
     cea:	5f eb       	ldi	r21, 0xBF	; 191
     cec:	69 81       	ldd	r22, Y+1	; 0x01
     cee:	7a 81       	ldd	r23, Y+2	; 0x02
     cf0:	8b 81       	ldd	r24, Y+3	; 0x03
     cf2:	9c 81       	ldd	r25, Y+4	; 0x04
     cf4:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <__cmpsf2>
     cf8:	81 11       	cpse	r24, r1
     cfa:	01 c0       	rjmp	.+2      	; 0xcfe <Task_Run_If_Ready+0x2c>
            task->is_active = false;
     cfc:	18 82       	st	Y, r1
                
        (*task->task_fcn_ptr)();
     cfe:	eb 85       	ldd	r30, Y+11	; 0x0b
     d00:	fc 85       	ldd	r31, Y+12	; 0x0c
     d02:	09 95       	icall

        task->time_last_ran = Timing_Get_Time();
     d04:	0e 94 a3 06 	call	0xd46	; 0xd46 <Timing_Get_Time>
     d08:	2d 83       	std	Y+5, r18	; 0x05
     d0a:	3e 83       	std	Y+6, r19	; 0x06
     d0c:	4f 83       	std	Y+7, r20	; 0x07
     d0e:	58 87       	std	Y+8, r21	; 0x08
     d10:	69 87       	std	Y+9, r22	; 0x09
     d12:	7a 87       	std	Y+10, r23	; 0x0a
    // Run it if it is ready
    // Update time_last_ran and is_active as appropriate. 
    // To call a void functor (function pointer):  (*functor_variable)(); 

    return false; // true if it ran, false if it did not run
}
     d14:	81 2f       	mov	r24, r17
     d16:	df 91       	pop	r29
     d18:	cf 91       	pop	r28
     d1a:	1f 91       	pop	r17
     d1c:	08 95       	ret

00000d1e <Initialize_Timing>:
    return _count_ms;
}
uint16_t Timing_Get_Micro()
{
    return TCNT0 * 4;
}
     d1e:	85 b5       	in	r24, 0x25	; 37
     d20:	83 60       	ori	r24, 0x03	; 3
     d22:	85 bd       	out	0x25, r24	; 37
     d24:	89 ef       	ldi	r24, 0xF9	; 249
     d26:	87 bd       	out	0x27, r24	; 39
     d28:	ee e6       	ldi	r30, 0x6E	; 110
     d2a:	f0 e0       	ldi	r31, 0x00	; 0
     d2c:	80 81       	ld	r24, Z
     d2e:	82 60       	ori	r24, 0x02	; 2
     d30:	80 83       	st	Z, r24
     d32:	78 94       	sei
     d34:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <_count_ms>
     d38:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <_count_ms+0x1>
     d3c:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <_count_ms+0x2>
     d40:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <_count_ms+0x3>
     d44:	08 95       	ret

00000d46 <Timing_Get_Time>:
     d46:	cf 93       	push	r28
     d48:	df 93       	push	r29
     d4a:	00 d0       	rcall	.+0      	; 0xd4c <Timing_Get_Time+0x6>
     d4c:	00 d0       	rcall	.+0      	; 0xd4e <Timing_Get_Time+0x8>
     d4e:	00 d0       	rcall	.+0      	; 0xd50 <Timing_Get_Time+0xa>
     d50:	cd b7       	in	r28, 0x3d	; 61
     d52:	de b7       	in	r29, 0x3e	; 62
     d54:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <_count_ms>
     d58:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <_count_ms+0x1>
     d5c:	a0 91 1e 01 	lds	r26, 0x011E	; 0x80011e <_count_ms+0x2>
     d60:	b0 91 1f 01 	lds	r27, 0x011F	; 0x80011f <_count_ms+0x3>
     d64:	66 b5       	in	r22, 0x26	; 38
     d66:	89 83       	std	Y+1, r24	; 0x01
     d68:	9a 83       	std	Y+2, r25	; 0x02
     d6a:	ab 83       	std	Y+3, r26	; 0x03
     d6c:	bc 83       	std	Y+4, r27	; 0x04
     d6e:	70 e0       	ldi	r23, 0x00	; 0
     d70:	66 0f       	add	r22, r22
     d72:	77 1f       	adc	r23, r23
     d74:	66 0f       	add	r22, r22
     d76:	77 1f       	adc	r23, r23
     d78:	7e 83       	std	Y+6, r23	; 0x06
     d7a:	6d 83       	std	Y+5, r22	; 0x05
     d7c:	28 2f       	mov	r18, r24
     d7e:	3a 81       	ldd	r19, Y+2	; 0x02
     d80:	4b 81       	ldd	r20, Y+3	; 0x03
     d82:	5c 81       	ldd	r21, Y+4	; 0x04
     d84:	7e 81       	ldd	r23, Y+6	; 0x06
     d86:	80 e0       	ldi	r24, 0x00	; 0
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	26 96       	adiw	r28, 0x06	; 6
     d8c:	0f b6       	in	r0, 0x3f	; 63
     d8e:	f8 94       	cli
     d90:	de bf       	out	0x3e, r29	; 62
     d92:	0f be       	out	0x3f, r0	; 63
     d94:	cd bf       	out	0x3d, r28	; 61
     d96:	df 91       	pop	r29
     d98:	cf 91       	pop	r28
     d9a:	08 95       	ret

00000d9c <Timing_Get_Time_Sec>:
     d9c:	cf 92       	push	r12
     d9e:	df 92       	push	r13
     da0:	ef 92       	push	r14
     da2:	ff 92       	push	r15
     da4:	cf 93       	push	r28
     da6:	df 93       	push	r29
     da8:	00 d0       	rcall	.+0      	; 0xdaa <Timing_Get_Time_Sec+0xe>
     daa:	00 d0       	rcall	.+0      	; 0xdac <Timing_Get_Time_Sec+0x10>
     dac:	00 d0       	rcall	.+0      	; 0xdae <Timing_Get_Time_Sec+0x12>
     dae:	cd b7       	in	r28, 0x3d	; 61
     db0:	de b7       	in	r29, 0x3e	; 62
     db2:	0e 94 a3 06 	call	0xd46	; 0xd46 <Timing_Get_Time>
     db6:	29 83       	std	Y+1, r18	; 0x01
     db8:	3a 83       	std	Y+2, r19	; 0x02
     dba:	4b 83       	std	Y+3, r20	; 0x03
     dbc:	5c 83       	std	Y+4, r21	; 0x04
     dbe:	6d 83       	std	Y+5, r22	; 0x05
     dc0:	7e 83       	std	Y+6, r23	; 0x06
     dc2:	69 81       	ldd	r22, Y+1	; 0x01
     dc4:	7a 81       	ldd	r23, Y+2	; 0x02
     dc6:	8b 81       	ldd	r24, Y+3	; 0x03
     dc8:	9c 81       	ldd	r25, Y+4	; 0x04
     dca:	0e 94 97 09 	call	0x132e	; 0x132e <__floatunsisf>
     dce:	20 e0       	ldi	r18, 0x00	; 0
     dd0:	30 e0       	ldi	r19, 0x00	; 0
     dd2:	4a e7       	ldi	r20, 0x7A	; 122
     dd4:	54 e4       	ldi	r21, 0x44	; 68
     dd6:	0e 94 ef 08 	call	0x11de	; 0x11de <__divsf3>
     dda:	6b 01       	movw	r12, r22
     ddc:	7c 01       	movw	r14, r24
     dde:	6d 81       	ldd	r22, Y+5	; 0x05
     de0:	7e 81       	ldd	r23, Y+6	; 0x06
     de2:	80 e0       	ldi	r24, 0x00	; 0
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	0e 94 97 09 	call	0x132e	; 0x132e <__floatunsisf>
     dea:	20 e0       	ldi	r18, 0x00	; 0
     dec:	34 e2       	ldi	r19, 0x24	; 36
     dee:	44 e7       	ldi	r20, 0x74	; 116
     df0:	59 e4       	ldi	r21, 0x49	; 73
     df2:	0e 94 ef 08 	call	0x11de	; 0x11de <__divsf3>
     df6:	a7 01       	movw	r20, r14
     df8:	96 01       	movw	r18, r12
     dfa:	0e 94 0c 08 	call	0x1018	; 0x1018 <__addsf3>
     dfe:	26 96       	adiw	r28, 0x06	; 6
     e00:	0f b6       	in	r0, 0x3f	; 63
     e02:	f8 94       	cli
     e04:	de bf       	out	0x3e, r29	; 62
     e06:	0f be       	out	0x3f, r0	; 63
     e08:	cd bf       	out	0x3d, r28	; 61
     e0a:	df 91       	pop	r29
     e0c:	cf 91       	pop	r28
     e0e:	ff 90       	pop	r15
     e10:	ef 90       	pop	r14
     e12:	df 90       	pop	r13
     e14:	cf 90       	pop	r12
     e16:	08 95       	ret

00000e18 <Timing_Seconds_Since>:
 * This function takes a start time and calculates the time since that time, it returns it in the Time struct.
 * @param p_time_start a pointer to a start time struct
 * @return (Time_t) Time since the other time.
 */
float  Timing_Seconds_Since(const Time_t* time_start_p )
{
     e18:	4f 92       	push	r4
     e1a:	5f 92       	push	r5
     e1c:	6f 92       	push	r6
     e1e:	7f 92       	push	r7
     e20:	8f 92       	push	r8
     e22:	9f 92       	push	r9
     e24:	af 92       	push	r10
     e26:	bf 92       	push	r11
     e28:	cf 92       	push	r12
     e2a:	df 92       	push	r13
     e2c:	ef 92       	push	r14
     e2e:	ff 92       	push	r15
     e30:	cf 93       	push	r28
     e32:	df 93       	push	r29
     e34:	ec 01       	movw	r28, r24
    float currTime = Timing_Get_Time_Sec();
     e36:	0e 94 ce 06 	call	0xd9c	; 0xd9c <Timing_Get_Time_Sec>
     e3a:	6b 01       	movw	r12, r22
     e3c:	7c 01       	movw	r14, r24

    float updateMilli = time_start_p->millisec;
     e3e:	68 81       	ld	r22, Y
     e40:	79 81       	ldd	r23, Y+1	; 0x01
     e42:	8a 81       	ldd	r24, Y+2	; 0x02
     e44:	9b 81       	ldd	r25, Y+3	; 0x03
     e46:	0e 94 97 09 	call	0x132e	; 0x132e <__floatunsisf>
     e4a:	4b 01       	movw	r8, r22
     e4c:	5c 01       	movw	r10, r24
    updateMilli /= 1000.0;
    float updateMicro = time_start_p->microsec;
     e4e:	6c 81       	ldd	r22, Y+4	; 0x04
     e50:	7d 81       	ldd	r23, Y+5	; 0x05
     e52:	80 e0       	ldi	r24, 0x00	; 0
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	0e 94 97 09 	call	0x132e	; 0x132e <__floatunsisf>
     e5a:	2b 01       	movw	r4, r22
     e5c:	3c 01       	movw	r6, r24
    updateMicro /= 1000000.0;

    float delta_time = currTime - (updateMicro + updateMilli);

    return delta_time;
     e5e:	20 e0       	ldi	r18, 0x00	; 0
     e60:	30 e0       	ldi	r19, 0x00	; 0
     e62:	4a e7       	ldi	r20, 0x7A	; 122
     e64:	54 e4       	ldi	r21, 0x44	; 68
     e66:	c5 01       	movw	r24, r10
     e68:	b4 01       	movw	r22, r8
     e6a:	0e 94 ef 08 	call	0x11de	; 0x11de <__divsf3>
     e6e:	4b 01       	movw	r8, r22
     e70:	5c 01       	movw	r10, r24
     e72:	20 e0       	ldi	r18, 0x00	; 0
     e74:	34 e2       	ldi	r19, 0x24	; 36
     e76:	44 e7       	ldi	r20, 0x74	; 116
     e78:	59 e4       	ldi	r21, 0x49	; 73
     e7a:	c3 01       	movw	r24, r6
     e7c:	b2 01       	movw	r22, r4
     e7e:	0e 94 ef 08 	call	0x11de	; 0x11de <__divsf3>
     e82:	9b 01       	movw	r18, r22
     e84:	ac 01       	movw	r20, r24
     e86:	c5 01       	movw	r24, r10
     e88:	b4 01       	movw	r22, r8
     e8a:	0e 94 0c 08 	call	0x1018	; 0x1018 <__addsf3>
     e8e:	9b 01       	movw	r18, r22
     e90:	ac 01       	movw	r20, r24
     e92:	c7 01       	movw	r24, r14
     e94:	b6 01       	movw	r22, r12
     e96:	0e 94 0b 08 	call	0x1016	; 0x1016 <__subsf3>
}
     e9a:	df 91       	pop	r29
     e9c:	cf 91       	pop	r28
     e9e:	ff 90       	pop	r15
     ea0:	ef 90       	pop	r14
     ea2:	df 90       	pop	r13
     ea4:	cf 90       	pop	r12
     ea6:	bf 90       	pop	r11
     ea8:	af 90       	pop	r10
     eaa:	9f 90       	pop	r9
     eac:	8f 90       	pop	r8
     eae:	7f 90       	pop	r7
     eb0:	6f 90       	pop	r6
     eb2:	5f 90       	pop	r5
     eb4:	4f 90       	pop	r4
     eb6:	08 95       	ret

00000eb8 <__vector_21>:

/** This is the Interrupt Service Routine for the Timer0 Compare A feature.
 * You'll need to set the compare flags properly for it to work.
 */
ISR(TIMER0_COMPA_vect)
{
     eb8:	1f 92       	push	r1
     eba:	0f 92       	push	r0
     ebc:	0f b6       	in	r0, 0x3f	; 63
     ebe:	0f 92       	push	r0
     ec0:	11 24       	eor	r1, r1
     ec2:	8f 93       	push	r24
     ec4:	9f 93       	push	r25
     ec6:	af 93       	push	r26
     ec8:	bf 93       	push	r27
    
    // YOU NEED TO RESET THE Timer0 Value to 0 again!
    TCNT0 = 0;
     eca:	16 bc       	out	0x26, r1	; 38
    // take care of upticks of both our internal and external variables.
    _count_ms ++;
     ecc:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <_count_ms>
     ed0:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <_count_ms+0x1>
     ed4:	a0 91 1e 01 	lds	r26, 0x011E	; 0x80011e <_count_ms+0x2>
     ed8:	b0 91 1f 01 	lds	r27, 0x011F	; 0x80011f <_count_ms+0x3>
     edc:	01 96       	adiw	r24, 0x01	; 1
     ede:	a1 1d       	adc	r26, r1
     ee0:	b1 1d       	adc	r27, r1
     ee2:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <_count_ms>
     ee6:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <_count_ms+0x1>
     eea:	a0 93 1e 01 	sts	0x011E, r26	; 0x80011e <_count_ms+0x2>
     eee:	b0 93 1f 01 	sts	0x011F, r27	; 0x80011f <_count_ms+0x3>

}
     ef2:	bf 91       	pop	r27
     ef4:	af 91       	pop	r26
     ef6:	9f 91       	pop	r25
     ef8:	8f 91       	pop	r24
     efa:	0f 90       	pop	r0
     efc:	0f be       	out	0x3f, r0	; 63
     efe:	0f 90       	pop	r0
     f00:	1f 90       	pop	r1
     f02:	18 95       	reti

00000f04 <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
     f04:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
     f08:	88 e4       	ldi	r24, 0x48	; 72
     f0a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
     f0e:	08 95       	ret

00000f10 <i2c_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     f10:	94 ea       	ldi	r25, 0xA4	; 164
     f12:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
     f16:	ec eb       	ldi	r30, 0xBC	; 188
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	90 81       	ld	r25, Z
     f1c:	99 23       	and	r25, r25
     f1e:	ec f7       	brge	.-6      	; 0xf1a <i2c_start+0xa>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
     f20:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
     f24:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
     f26:	98 30       	cpi	r25, 0x08	; 8
     f28:	11 f0       	breq	.+4      	; 0xf2e <i2c_start+0x1e>
     f2a:	90 31       	cpi	r25, 0x10	; 16
     f2c:	a1 f4       	brne	.+40     	; 0xf56 <i2c_start+0x46>

	// send device address
	TWDR = address;
     f2e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
	TWCR = (1<<TWINT) | (1<<TWEN);
     f32:	84 e8       	ldi	r24, 0x84	; 132
     f34:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
     f38:	ec eb       	ldi	r30, 0xBC	; 188
     f3a:	f0 e0       	ldi	r31, 0x00	; 0
     f3c:	80 81       	ld	r24, Z
     f3e:	88 23       	and	r24, r24
     f40:	ec f7       	brge	.-6      	; 0xf3c <i2c_start+0x2c>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
     f42:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
     f46:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
     f48:	98 31       	cpi	r25, 0x18	; 24
     f4a:	39 f0       	breq	.+14     	; 0xf5a <i2c_start+0x4a>
	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
     f4c:	81 e0       	ldi	r24, 0x01	; 1
     f4e:	90 34       	cpi	r25, 0x40	; 64
     f50:	29 f4       	brne	.+10     	; 0xf5c <i2c_start+0x4c>
     f52:	80 e0       	ldi	r24, 0x00	; 0
     f54:	08 95       	ret
     f56:	81 e0       	ldi	r24, 0x01	; 1
     f58:	08 95       	ret

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;

	return 0;
     f5a:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
     f5c:	08 95       	ret

00000f5e <i2c_start_wait>:
 If device is busy, use ack polling to wait until device is ready
 
 Input:   address and transfer direction of I2C device
*************************************************************************/
void i2c_start_wait(unsigned char address)
{
     f5e:	cf 93       	push	r28
     f60:	df 93       	push	r29


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     f62:	ec eb       	ldi	r30, 0xBC	; 188
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	24 ea       	ldi	r18, 0xA4	; 164
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
     f68:	a9 eb       	ldi	r26, 0xB9	; 185
     f6a:	b0 e0       	ldi	r27, 0x00	; 0
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
     f6c:	cb eb       	ldi	r28, 0xBB	; 187
     f6e:	d0 e0       	ldi	r29, 0x00	; 0
    	TWCR = (1<<TWINT) | (1<<TWEN);
     f70:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     f72:	44 e9       	ldi	r20, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     f74:	20 83       	st	Z, r18
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
     f76:	90 81       	ld	r25, Z
     f78:	99 23       	and	r25, r25
     f7a:	ec f7       	brge	.-6      	; 0xf76 <i2c_start_wait+0x18>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
     f7c:	9c 91       	ld	r25, X
     f7e:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
     f80:	98 30       	cpi	r25, 0x08	; 8
     f82:	11 f0       	breq	.+4      	; 0xf88 <i2c_start_wait+0x2a>
     f84:	90 31       	cpi	r25, 0x10	; 16
     f86:	b1 f7       	brne	.-20     	; 0xf74 <i2c_start_wait+0x16>
    
    	// send device address
    	TWDR = address;
     f88:	88 83       	st	Y, r24
    	TWCR = (1<<TWINT) | (1<<TWEN);
     f8a:	30 83       	st	Z, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
     f8c:	90 81       	ld	r25, Z
     f8e:	99 23       	and	r25, r25
     f90:	ec f7       	brge	.-6      	; 0xf8c <i2c_start_wait+0x2e>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
     f92:	9c 91       	ld	r25, X
     f94:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
     f96:	90 32       	cpi	r25, 0x20	; 32
     f98:	11 f0       	breq	.+4      	; 0xf9e <i2c_start_wait+0x40>
     f9a:	98 35       	cpi	r25, 0x58	; 88
     f9c:	29 f4       	brne	.+10     	; 0xfa8 <i2c_start_wait+0x4a>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     f9e:	40 83       	st	Z, r20
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
     fa0:	90 81       	ld	r25, Z
     fa2:	94 fd       	sbrc	r25, 4
     fa4:	fd cf       	rjmp	.-6      	; 0xfa0 <i2c_start_wait+0x42>
     fa6:	e6 cf       	rjmp	.-52     	; 0xf74 <i2c_start_wait+0x16>
    	}
    	//if( twst != TW_MT_SLA_ACK) return 1;
    	break;
     }

}/* i2c_start_wait */
     fa8:	df 91       	pop	r29
     faa:	cf 91       	pop	r28
     fac:	08 95       	ret

00000fae <i2c_rep_start>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
     fae:	0e 94 88 07 	call	0xf10	; 0xf10 <i2c_start>

}/* i2c_rep_start */
     fb2:	08 95       	ret

00000fb4 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     fb4:	84 e9       	ldi	r24, 0x94	; 148
     fb6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
     fba:	ec eb       	ldi	r30, 0xBC	; 188
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	80 81       	ld	r24, Z
     fc0:	84 fd       	sbrc	r24, 4
     fc2:	fd cf       	rjmp	.-6      	; 0xfbe <i2c_stop+0xa>

}/* i2c_stop */
     fc4:	08 95       	ret

00000fc6 <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
     fc6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
	TWCR = (1<<TWINT) | (1<<TWEN);
     fca:	84 e8       	ldi	r24, 0x84	; 132
     fcc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
     fd0:	ec eb       	ldi	r30, 0xBC	; 188
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	80 81       	ld	r24, Z
     fd6:	88 23       	and	r24, r24
     fd8:	ec f7       	brge	.-6      	; 0xfd4 <i2c_write+0xe>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
     fda:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
     fde:	98 7f       	andi	r25, 0xF8	; 248
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	98 32       	cpi	r25, 0x28	; 40
     fe4:	09 f4       	brne	.+2      	; 0xfe8 <i2c_write+0x22>
     fe6:	80 e0       	ldi	r24, 0x00	; 0
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
     fe8:	08 95       	ret

00000fea <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     fea:	84 ec       	ldi	r24, 0xC4	; 196
     fec:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while(!(TWCR & (1<<TWINT)));    
     ff0:	ec eb       	ldi	r30, 0xBC	; 188
     ff2:	f0 e0       	ldi	r31, 0x00	; 0
     ff4:	80 81       	ld	r24, Z
     ff6:	88 23       	and	r24, r24
     ff8:	ec f7       	brge	.-6      	; 0xff4 <i2c_readAck+0xa>

    return TWDR;
     ffa:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>

}/* i2c_readAck */
     ffe:	08 95       	ret

00001000 <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
    1000:	84 e8       	ldi	r24, 0x84	; 132
    1002:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while(!(TWCR & (1<<TWINT)));
    1006:	ec eb       	ldi	r30, 0xBC	; 188
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	80 81       	ld	r24, Z
    100c:	88 23       	and	r24, r24
    100e:	ec f7       	brge	.-6      	; 0x100a <i2c_readNak+0xa>
	
    return TWDR;
    1010:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>

}/* i2c_readNak */
    1014:	08 95       	ret

00001016 <__subsf3>:
    1016:	50 58       	subi	r21, 0x80	; 128

00001018 <__addsf3>:
    1018:	bb 27       	eor	r27, r27
    101a:	aa 27       	eor	r26, r26
    101c:	0e 94 23 08 	call	0x1046	; 0x1046 <__addsf3x>
    1020:	0c 94 36 0a 	jmp	0x146c	; 0x146c <__fp_round>
    1024:	0e 94 28 0a 	call	0x1450	; 0x1450 <__fp_pscA>
    1028:	38 f0       	brcs	.+14     	; 0x1038 <__addsf3+0x20>
    102a:	0e 94 2f 0a 	call	0x145e	; 0x145e <__fp_pscB>
    102e:	20 f0       	brcs	.+8      	; 0x1038 <__addsf3+0x20>
    1030:	39 f4       	brne	.+14     	; 0x1040 <__addsf3+0x28>
    1032:	9f 3f       	cpi	r25, 0xFF	; 255
    1034:	19 f4       	brne	.+6      	; 0x103c <__addsf3+0x24>
    1036:	26 f4       	brtc	.+8      	; 0x1040 <__addsf3+0x28>
    1038:	0c 94 fe 09 	jmp	0x13fc	; 0x13fc <__fp_nan>
    103c:	0e f4       	brtc	.+2      	; 0x1040 <__addsf3+0x28>
    103e:	e0 95       	com	r30
    1040:	e7 fb       	bst	r30, 7
    1042:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <__fp_inf>

00001046 <__addsf3x>:
    1046:	e9 2f       	mov	r30, r25
    1048:	0e 94 47 0a 	call	0x148e	; 0x148e <__fp_split3>
    104c:	58 f3       	brcs	.-42     	; 0x1024 <__addsf3+0xc>
    104e:	ba 17       	cp	r27, r26
    1050:	62 07       	cpc	r22, r18
    1052:	73 07       	cpc	r23, r19
    1054:	84 07       	cpc	r24, r20
    1056:	95 07       	cpc	r25, r21
    1058:	20 f0       	brcs	.+8      	; 0x1062 <__addsf3x+0x1c>
    105a:	79 f4       	brne	.+30     	; 0x107a <__addsf3x+0x34>
    105c:	a6 f5       	brtc	.+104    	; 0x10c6 <__addsf3x+0x80>
    105e:	0c 94 69 0a 	jmp	0x14d2	; 0x14d2 <__fp_zero>
    1062:	0e f4       	brtc	.+2      	; 0x1066 <__addsf3x+0x20>
    1064:	e0 95       	com	r30
    1066:	0b 2e       	mov	r0, r27
    1068:	ba 2f       	mov	r27, r26
    106a:	a0 2d       	mov	r26, r0
    106c:	0b 01       	movw	r0, r22
    106e:	b9 01       	movw	r22, r18
    1070:	90 01       	movw	r18, r0
    1072:	0c 01       	movw	r0, r24
    1074:	ca 01       	movw	r24, r20
    1076:	a0 01       	movw	r20, r0
    1078:	11 24       	eor	r1, r1
    107a:	ff 27       	eor	r31, r31
    107c:	59 1b       	sub	r21, r25
    107e:	99 f0       	breq	.+38     	; 0x10a6 <__addsf3x+0x60>
    1080:	59 3f       	cpi	r21, 0xF9	; 249
    1082:	50 f4       	brcc	.+20     	; 0x1098 <__addsf3x+0x52>
    1084:	50 3e       	cpi	r21, 0xE0	; 224
    1086:	68 f1       	brcs	.+90     	; 0x10e2 <__addsf3x+0x9c>
    1088:	1a 16       	cp	r1, r26
    108a:	f0 40       	sbci	r31, 0x00	; 0
    108c:	a2 2f       	mov	r26, r18
    108e:	23 2f       	mov	r18, r19
    1090:	34 2f       	mov	r19, r20
    1092:	44 27       	eor	r20, r20
    1094:	58 5f       	subi	r21, 0xF8	; 248
    1096:	f3 cf       	rjmp	.-26     	; 0x107e <__addsf3x+0x38>
    1098:	46 95       	lsr	r20
    109a:	37 95       	ror	r19
    109c:	27 95       	ror	r18
    109e:	a7 95       	ror	r26
    10a0:	f0 40       	sbci	r31, 0x00	; 0
    10a2:	53 95       	inc	r21
    10a4:	c9 f7       	brne	.-14     	; 0x1098 <__addsf3x+0x52>
    10a6:	7e f4       	brtc	.+30     	; 0x10c6 <__addsf3x+0x80>
    10a8:	1f 16       	cp	r1, r31
    10aa:	ba 0b       	sbc	r27, r26
    10ac:	62 0b       	sbc	r22, r18
    10ae:	73 0b       	sbc	r23, r19
    10b0:	84 0b       	sbc	r24, r20
    10b2:	ba f0       	brmi	.+46     	; 0x10e2 <__addsf3x+0x9c>
    10b4:	91 50       	subi	r25, 0x01	; 1
    10b6:	a1 f0       	breq	.+40     	; 0x10e0 <__addsf3x+0x9a>
    10b8:	ff 0f       	add	r31, r31
    10ba:	bb 1f       	adc	r27, r27
    10bc:	66 1f       	adc	r22, r22
    10be:	77 1f       	adc	r23, r23
    10c0:	88 1f       	adc	r24, r24
    10c2:	c2 f7       	brpl	.-16     	; 0x10b4 <__addsf3x+0x6e>
    10c4:	0e c0       	rjmp	.+28     	; 0x10e2 <__addsf3x+0x9c>
    10c6:	ba 0f       	add	r27, r26
    10c8:	62 1f       	adc	r22, r18
    10ca:	73 1f       	adc	r23, r19
    10cc:	84 1f       	adc	r24, r20
    10ce:	48 f4       	brcc	.+18     	; 0x10e2 <__addsf3x+0x9c>
    10d0:	87 95       	ror	r24
    10d2:	77 95       	ror	r23
    10d4:	67 95       	ror	r22
    10d6:	b7 95       	ror	r27
    10d8:	f7 95       	ror	r31
    10da:	9e 3f       	cpi	r25, 0xFE	; 254
    10dc:	08 f0       	brcs	.+2      	; 0x10e0 <__addsf3x+0x9a>
    10de:	b0 cf       	rjmp	.-160    	; 0x1040 <__addsf3+0x28>
    10e0:	93 95       	inc	r25
    10e2:	88 0f       	add	r24, r24
    10e4:	08 f0       	brcs	.+2      	; 0x10e8 <__addsf3x+0xa2>
    10e6:	99 27       	eor	r25, r25
    10e8:	ee 0f       	add	r30, r30
    10ea:	97 95       	ror	r25
    10ec:	87 95       	ror	r24
    10ee:	08 95       	ret
    10f0:	0e 94 28 0a 	call	0x1450	; 0x1450 <__fp_pscA>
    10f4:	60 f0       	brcs	.+24     	; 0x110e <__addsf3x+0xc8>
    10f6:	80 e8       	ldi	r24, 0x80	; 128
    10f8:	91 e0       	ldi	r25, 0x01	; 1
    10fa:	09 f4       	brne	.+2      	; 0x10fe <__addsf3x+0xb8>
    10fc:	9e ef       	ldi	r25, 0xFE	; 254
    10fe:	0e 94 2f 0a 	call	0x145e	; 0x145e <__fp_pscB>
    1102:	28 f0       	brcs	.+10     	; 0x110e <__addsf3x+0xc8>
    1104:	40 e8       	ldi	r20, 0x80	; 128
    1106:	51 e0       	ldi	r21, 0x01	; 1
    1108:	71 f4       	brne	.+28     	; 0x1126 <atan2+0x10>
    110a:	5e ef       	ldi	r21, 0xFE	; 254
    110c:	0c c0       	rjmp	.+24     	; 0x1126 <atan2+0x10>
    110e:	0c 94 fe 09 	jmp	0x13fc	; 0x13fc <__fp_nan>
    1112:	0c 94 69 0a 	jmp	0x14d2	; 0x14d2 <__fp_zero>

00001116 <atan2>:
    1116:	e9 2f       	mov	r30, r25
    1118:	e0 78       	andi	r30, 0x80	; 128
    111a:	0e 94 47 0a 	call	0x148e	; 0x148e <__fp_split3>
    111e:	40 f3       	brcs	.-48     	; 0x10f0 <__addsf3x+0xaa>
    1120:	09 2e       	mov	r0, r25
    1122:	05 2a       	or	r0, r21
    1124:	b1 f3       	breq	.-20     	; 0x1112 <__addsf3x+0xcc>
    1126:	26 17       	cp	r18, r22
    1128:	37 07       	cpc	r19, r23
    112a:	48 07       	cpc	r20, r24
    112c:	59 07       	cpc	r21, r25
    112e:	38 f0       	brcs	.+14     	; 0x113e <atan2+0x28>
    1130:	0e 2e       	mov	r0, r30
    1132:	07 f8       	bld	r0, 7
    1134:	e0 25       	eor	r30, r0
    1136:	69 f0       	breq	.+26     	; 0x1152 <atan2+0x3c>
    1138:	e0 25       	eor	r30, r0
    113a:	e0 64       	ori	r30, 0x40	; 64
    113c:	0a c0       	rjmp	.+20     	; 0x1152 <atan2+0x3c>
    113e:	ef 63       	ori	r30, 0x3F	; 63
    1140:	07 f8       	bld	r0, 7
    1142:	00 94       	com	r0
    1144:	07 fa       	bst	r0, 7
    1146:	db 01       	movw	r26, r22
    1148:	b9 01       	movw	r22, r18
    114a:	9d 01       	movw	r18, r26
    114c:	dc 01       	movw	r26, r24
    114e:	ca 01       	movw	r24, r20
    1150:	ad 01       	movw	r20, r26
    1152:	ef 93       	push	r30
    1154:	0e 94 06 09 	call	0x120c	; 0x120c <__divsf3_pse>
    1158:	0e 94 36 0a 	call	0x146c	; 0x146c <__fp_round>
    115c:	0e 94 bb 08 	call	0x1176	; 0x1176 <atan>
    1160:	5f 91       	pop	r21
    1162:	55 23       	and	r21, r21
    1164:	39 f0       	breq	.+14     	; 0x1174 <atan2+0x5e>
    1166:	2b ed       	ldi	r18, 0xDB	; 219
    1168:	3f e0       	ldi	r19, 0x0F	; 15
    116a:	49 e4       	ldi	r20, 0x49	; 73
    116c:	50 fd       	sbrc	r21, 0
    116e:	49 ec       	ldi	r20, 0xC9	; 201
    1170:	0c 94 0c 08 	jmp	0x1018	; 0x1018 <__addsf3>
    1174:	08 95       	ret

00001176 <atan>:
    1176:	df 93       	push	r29
    1178:	dd 27       	eor	r29, r29
    117a:	b9 2f       	mov	r27, r25
    117c:	bf 77       	andi	r27, 0x7F	; 127
    117e:	40 e8       	ldi	r20, 0x80	; 128
    1180:	5f e3       	ldi	r21, 0x3F	; 63
    1182:	16 16       	cp	r1, r22
    1184:	17 06       	cpc	r1, r23
    1186:	48 07       	cpc	r20, r24
    1188:	5b 07       	cpc	r21, r27
    118a:	18 f4       	brcc	.+6      	; 0x1192 <atan+0x1c>
    118c:	d9 2f       	mov	r29, r25
    118e:	0e 94 75 0a 	call	0x14ea	; 0x14ea <inverse>
    1192:	9f 93       	push	r25
    1194:	8f 93       	push	r24
    1196:	7f 93       	push	r23
    1198:	6f 93       	push	r22
    119a:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <square>
    119e:	ec ea       	ldi	r30, 0xAC	; 172
    11a0:	f0 e0       	ldi	r31, 0x00	; 0
    11a2:	0e 94 01 0a 	call	0x1402	; 0x1402 <__fp_powser>
    11a6:	0e 94 36 0a 	call	0x146c	; 0x146c <__fp_round>
    11aa:	2f 91       	pop	r18
    11ac:	3f 91       	pop	r19
    11ae:	4f 91       	pop	r20
    11b0:	5f 91       	pop	r21
    11b2:	0e 94 90 0a 	call	0x1520	; 0x1520 <__mulsf3x>
    11b6:	dd 23       	and	r29, r29
    11b8:	51 f0       	breq	.+20     	; 0x11ce <atan+0x58>
    11ba:	90 58       	subi	r25, 0x80	; 128
    11bc:	a2 ea       	ldi	r26, 0xA2	; 162
    11be:	2a ed       	ldi	r18, 0xDA	; 218
    11c0:	3f e0       	ldi	r19, 0x0F	; 15
    11c2:	49 ec       	ldi	r20, 0xC9	; 201
    11c4:	5f e3       	ldi	r21, 0x3F	; 63
    11c6:	d0 78       	andi	r29, 0x80	; 128
    11c8:	5d 27       	eor	r21, r29
    11ca:	0e 94 23 08 	call	0x1046	; 0x1046 <__addsf3x>
    11ce:	df 91       	pop	r29
    11d0:	0c 94 36 0a 	jmp	0x146c	; 0x146c <__fp_round>

000011d4 <__cmpsf2>:
    11d4:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <__fp_cmp>
    11d8:	08 f4       	brcc	.+2      	; 0x11dc <__cmpsf2+0x8>
    11da:	81 e0       	ldi	r24, 0x01	; 1
    11dc:	08 95       	ret

000011de <__divsf3>:
    11de:	0e 94 03 09 	call	0x1206	; 0x1206 <__divsf3x>
    11e2:	0c 94 36 0a 	jmp	0x146c	; 0x146c <__fp_round>
    11e6:	0e 94 2f 0a 	call	0x145e	; 0x145e <__fp_pscB>
    11ea:	58 f0       	brcs	.+22     	; 0x1202 <__divsf3+0x24>
    11ec:	0e 94 28 0a 	call	0x1450	; 0x1450 <__fp_pscA>
    11f0:	40 f0       	brcs	.+16     	; 0x1202 <__divsf3+0x24>
    11f2:	29 f4       	brne	.+10     	; 0x11fe <__divsf3+0x20>
    11f4:	5f 3f       	cpi	r21, 0xFF	; 255
    11f6:	29 f0       	breq	.+10     	; 0x1202 <__divsf3+0x24>
    11f8:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <__fp_inf>
    11fc:	51 11       	cpse	r21, r1
    11fe:	0c 94 6a 0a 	jmp	0x14d4	; 0x14d4 <__fp_szero>
    1202:	0c 94 fe 09 	jmp	0x13fc	; 0x13fc <__fp_nan>

00001206 <__divsf3x>:
    1206:	0e 94 47 0a 	call	0x148e	; 0x148e <__fp_split3>
    120a:	68 f3       	brcs	.-38     	; 0x11e6 <__divsf3+0x8>

0000120c <__divsf3_pse>:
    120c:	99 23       	and	r25, r25
    120e:	b1 f3       	breq	.-20     	; 0x11fc <__divsf3+0x1e>
    1210:	55 23       	and	r21, r21
    1212:	91 f3       	breq	.-28     	; 0x11f8 <__divsf3+0x1a>
    1214:	95 1b       	sub	r25, r21
    1216:	55 0b       	sbc	r21, r21
    1218:	bb 27       	eor	r27, r27
    121a:	aa 27       	eor	r26, r26
    121c:	62 17       	cp	r22, r18
    121e:	73 07       	cpc	r23, r19
    1220:	84 07       	cpc	r24, r20
    1222:	38 f0       	brcs	.+14     	; 0x1232 <__divsf3_pse+0x26>
    1224:	9f 5f       	subi	r25, 0xFF	; 255
    1226:	5f 4f       	sbci	r21, 0xFF	; 255
    1228:	22 0f       	add	r18, r18
    122a:	33 1f       	adc	r19, r19
    122c:	44 1f       	adc	r20, r20
    122e:	aa 1f       	adc	r26, r26
    1230:	a9 f3       	breq	.-22     	; 0x121c <__divsf3_pse+0x10>
    1232:	35 d0       	rcall	.+106    	; 0x129e <__divsf3_pse+0x92>
    1234:	0e 2e       	mov	r0, r30
    1236:	3a f0       	brmi	.+14     	; 0x1246 <__divsf3_pse+0x3a>
    1238:	e0 e8       	ldi	r30, 0x80	; 128
    123a:	32 d0       	rcall	.+100    	; 0x12a0 <__divsf3_pse+0x94>
    123c:	91 50       	subi	r25, 0x01	; 1
    123e:	50 40       	sbci	r21, 0x00	; 0
    1240:	e6 95       	lsr	r30
    1242:	00 1c       	adc	r0, r0
    1244:	ca f7       	brpl	.-14     	; 0x1238 <__divsf3_pse+0x2c>
    1246:	2b d0       	rcall	.+86     	; 0x129e <__divsf3_pse+0x92>
    1248:	fe 2f       	mov	r31, r30
    124a:	29 d0       	rcall	.+82     	; 0x129e <__divsf3_pse+0x92>
    124c:	66 0f       	add	r22, r22
    124e:	77 1f       	adc	r23, r23
    1250:	88 1f       	adc	r24, r24
    1252:	bb 1f       	adc	r27, r27
    1254:	26 17       	cp	r18, r22
    1256:	37 07       	cpc	r19, r23
    1258:	48 07       	cpc	r20, r24
    125a:	ab 07       	cpc	r26, r27
    125c:	b0 e8       	ldi	r27, 0x80	; 128
    125e:	09 f0       	breq	.+2      	; 0x1262 <__divsf3_pse+0x56>
    1260:	bb 0b       	sbc	r27, r27
    1262:	80 2d       	mov	r24, r0
    1264:	bf 01       	movw	r22, r30
    1266:	ff 27       	eor	r31, r31
    1268:	93 58       	subi	r25, 0x83	; 131
    126a:	5f 4f       	sbci	r21, 0xFF	; 255
    126c:	3a f0       	brmi	.+14     	; 0x127c <__divsf3_pse+0x70>
    126e:	9e 3f       	cpi	r25, 0xFE	; 254
    1270:	51 05       	cpc	r21, r1
    1272:	78 f0       	brcs	.+30     	; 0x1292 <__divsf3_pse+0x86>
    1274:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <__fp_inf>
    1278:	0c 94 6a 0a 	jmp	0x14d4	; 0x14d4 <__fp_szero>
    127c:	5f 3f       	cpi	r21, 0xFF	; 255
    127e:	e4 f3       	brlt	.-8      	; 0x1278 <__divsf3_pse+0x6c>
    1280:	98 3e       	cpi	r25, 0xE8	; 232
    1282:	d4 f3       	brlt	.-12     	; 0x1278 <__divsf3_pse+0x6c>
    1284:	86 95       	lsr	r24
    1286:	77 95       	ror	r23
    1288:	67 95       	ror	r22
    128a:	b7 95       	ror	r27
    128c:	f7 95       	ror	r31
    128e:	9f 5f       	subi	r25, 0xFF	; 255
    1290:	c9 f7       	brne	.-14     	; 0x1284 <__divsf3_pse+0x78>
    1292:	88 0f       	add	r24, r24
    1294:	91 1d       	adc	r25, r1
    1296:	96 95       	lsr	r25
    1298:	87 95       	ror	r24
    129a:	97 f9       	bld	r25, 7
    129c:	08 95       	ret
    129e:	e1 e0       	ldi	r30, 0x01	; 1
    12a0:	66 0f       	add	r22, r22
    12a2:	77 1f       	adc	r23, r23
    12a4:	88 1f       	adc	r24, r24
    12a6:	bb 1f       	adc	r27, r27
    12a8:	62 17       	cp	r22, r18
    12aa:	73 07       	cpc	r23, r19
    12ac:	84 07       	cpc	r24, r20
    12ae:	ba 07       	cpc	r27, r26
    12b0:	20 f0       	brcs	.+8      	; 0x12ba <__divsf3_pse+0xae>
    12b2:	62 1b       	sub	r22, r18
    12b4:	73 0b       	sbc	r23, r19
    12b6:	84 0b       	sbc	r24, r20
    12b8:	ba 0b       	sbc	r27, r26
    12ba:	ee 1f       	adc	r30, r30
    12bc:	88 f7       	brcc	.-30     	; 0x12a0 <__divsf3_pse+0x94>
    12be:	e0 95       	com	r30
    12c0:	08 95       	ret

000012c2 <__fixsfsi>:
    12c2:	0e 94 68 09 	call	0x12d0	; 0x12d0 <__fixunssfsi>
    12c6:	68 94       	set
    12c8:	b1 11       	cpse	r27, r1
    12ca:	0c 94 6a 0a 	jmp	0x14d4	; 0x14d4 <__fp_szero>
    12ce:	08 95       	ret

000012d0 <__fixunssfsi>:
    12d0:	0e 94 4f 0a 	call	0x149e	; 0x149e <__fp_splitA>
    12d4:	88 f0       	brcs	.+34     	; 0x12f8 <__fixunssfsi+0x28>
    12d6:	9f 57       	subi	r25, 0x7F	; 127
    12d8:	98 f0       	brcs	.+38     	; 0x1300 <__fixunssfsi+0x30>
    12da:	b9 2f       	mov	r27, r25
    12dc:	99 27       	eor	r25, r25
    12de:	b7 51       	subi	r27, 0x17	; 23
    12e0:	b0 f0       	brcs	.+44     	; 0x130e <__fixunssfsi+0x3e>
    12e2:	e1 f0       	breq	.+56     	; 0x131c <__fixunssfsi+0x4c>
    12e4:	66 0f       	add	r22, r22
    12e6:	77 1f       	adc	r23, r23
    12e8:	88 1f       	adc	r24, r24
    12ea:	99 1f       	adc	r25, r25
    12ec:	1a f0       	brmi	.+6      	; 0x12f4 <__fixunssfsi+0x24>
    12ee:	ba 95       	dec	r27
    12f0:	c9 f7       	brne	.-14     	; 0x12e4 <__fixunssfsi+0x14>
    12f2:	14 c0       	rjmp	.+40     	; 0x131c <__fixunssfsi+0x4c>
    12f4:	b1 30       	cpi	r27, 0x01	; 1
    12f6:	91 f0       	breq	.+36     	; 0x131c <__fixunssfsi+0x4c>
    12f8:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <__fp_zero>
    12fc:	b1 e0       	ldi	r27, 0x01	; 1
    12fe:	08 95       	ret
    1300:	0c 94 69 0a 	jmp	0x14d2	; 0x14d2 <__fp_zero>
    1304:	67 2f       	mov	r22, r23
    1306:	78 2f       	mov	r23, r24
    1308:	88 27       	eor	r24, r24
    130a:	b8 5f       	subi	r27, 0xF8	; 248
    130c:	39 f0       	breq	.+14     	; 0x131c <__fixunssfsi+0x4c>
    130e:	b9 3f       	cpi	r27, 0xF9	; 249
    1310:	cc f3       	brlt	.-14     	; 0x1304 <__fixunssfsi+0x34>
    1312:	86 95       	lsr	r24
    1314:	77 95       	ror	r23
    1316:	67 95       	ror	r22
    1318:	b3 95       	inc	r27
    131a:	d9 f7       	brne	.-10     	; 0x1312 <__fixunssfsi+0x42>
    131c:	3e f4       	brtc	.+14     	; 0x132c <__fixunssfsi+0x5c>
    131e:	90 95       	com	r25
    1320:	80 95       	com	r24
    1322:	70 95       	com	r23
    1324:	61 95       	neg	r22
    1326:	7f 4f       	sbci	r23, 0xFF	; 255
    1328:	8f 4f       	sbci	r24, 0xFF	; 255
    132a:	9f 4f       	sbci	r25, 0xFF	; 255
    132c:	08 95       	ret

0000132e <__floatunsisf>:
    132e:	e8 94       	clt
    1330:	09 c0       	rjmp	.+18     	; 0x1344 <__floatsisf+0x12>

00001332 <__floatsisf>:
    1332:	97 fb       	bst	r25, 7
    1334:	3e f4       	brtc	.+14     	; 0x1344 <__floatsisf+0x12>
    1336:	90 95       	com	r25
    1338:	80 95       	com	r24
    133a:	70 95       	com	r23
    133c:	61 95       	neg	r22
    133e:	7f 4f       	sbci	r23, 0xFF	; 255
    1340:	8f 4f       	sbci	r24, 0xFF	; 255
    1342:	9f 4f       	sbci	r25, 0xFF	; 255
    1344:	99 23       	and	r25, r25
    1346:	a9 f0       	breq	.+42     	; 0x1372 <__floatsisf+0x40>
    1348:	f9 2f       	mov	r31, r25
    134a:	96 e9       	ldi	r25, 0x96	; 150
    134c:	bb 27       	eor	r27, r27
    134e:	93 95       	inc	r25
    1350:	f6 95       	lsr	r31
    1352:	87 95       	ror	r24
    1354:	77 95       	ror	r23
    1356:	67 95       	ror	r22
    1358:	b7 95       	ror	r27
    135a:	f1 11       	cpse	r31, r1
    135c:	f8 cf       	rjmp	.-16     	; 0x134e <__floatsisf+0x1c>
    135e:	fa f4       	brpl	.+62     	; 0x139e <__floatsisf+0x6c>
    1360:	bb 0f       	add	r27, r27
    1362:	11 f4       	brne	.+4      	; 0x1368 <__floatsisf+0x36>
    1364:	60 ff       	sbrs	r22, 0
    1366:	1b c0       	rjmp	.+54     	; 0x139e <__floatsisf+0x6c>
    1368:	6f 5f       	subi	r22, 0xFF	; 255
    136a:	7f 4f       	sbci	r23, 0xFF	; 255
    136c:	8f 4f       	sbci	r24, 0xFF	; 255
    136e:	9f 4f       	sbci	r25, 0xFF	; 255
    1370:	16 c0       	rjmp	.+44     	; 0x139e <__floatsisf+0x6c>
    1372:	88 23       	and	r24, r24
    1374:	11 f0       	breq	.+4      	; 0x137a <__floatsisf+0x48>
    1376:	96 e9       	ldi	r25, 0x96	; 150
    1378:	11 c0       	rjmp	.+34     	; 0x139c <__floatsisf+0x6a>
    137a:	77 23       	and	r23, r23
    137c:	21 f0       	breq	.+8      	; 0x1386 <__floatsisf+0x54>
    137e:	9e e8       	ldi	r25, 0x8E	; 142
    1380:	87 2f       	mov	r24, r23
    1382:	76 2f       	mov	r23, r22
    1384:	05 c0       	rjmp	.+10     	; 0x1390 <__floatsisf+0x5e>
    1386:	66 23       	and	r22, r22
    1388:	71 f0       	breq	.+28     	; 0x13a6 <__floatsisf+0x74>
    138a:	96 e8       	ldi	r25, 0x86	; 134
    138c:	86 2f       	mov	r24, r22
    138e:	70 e0       	ldi	r23, 0x00	; 0
    1390:	60 e0       	ldi	r22, 0x00	; 0
    1392:	2a f0       	brmi	.+10     	; 0x139e <__floatsisf+0x6c>
    1394:	9a 95       	dec	r25
    1396:	66 0f       	add	r22, r22
    1398:	77 1f       	adc	r23, r23
    139a:	88 1f       	adc	r24, r24
    139c:	da f7       	brpl	.-10     	; 0x1394 <__floatsisf+0x62>
    139e:	88 0f       	add	r24, r24
    13a0:	96 95       	lsr	r25
    13a2:	87 95       	ror	r24
    13a4:	97 f9       	bld	r25, 7
    13a6:	08 95       	ret

000013a8 <__fp_cmp>:
    13a8:	99 0f       	add	r25, r25
    13aa:	00 08       	sbc	r0, r0
    13ac:	55 0f       	add	r21, r21
    13ae:	aa 0b       	sbc	r26, r26
    13b0:	e0 e8       	ldi	r30, 0x80	; 128
    13b2:	fe ef       	ldi	r31, 0xFE	; 254
    13b4:	16 16       	cp	r1, r22
    13b6:	17 06       	cpc	r1, r23
    13b8:	e8 07       	cpc	r30, r24
    13ba:	f9 07       	cpc	r31, r25
    13bc:	c0 f0       	brcs	.+48     	; 0x13ee <__fp_cmp+0x46>
    13be:	12 16       	cp	r1, r18
    13c0:	13 06       	cpc	r1, r19
    13c2:	e4 07       	cpc	r30, r20
    13c4:	f5 07       	cpc	r31, r21
    13c6:	98 f0       	brcs	.+38     	; 0x13ee <__fp_cmp+0x46>
    13c8:	62 1b       	sub	r22, r18
    13ca:	73 0b       	sbc	r23, r19
    13cc:	84 0b       	sbc	r24, r20
    13ce:	95 0b       	sbc	r25, r21
    13d0:	39 f4       	brne	.+14     	; 0x13e0 <__fp_cmp+0x38>
    13d2:	0a 26       	eor	r0, r26
    13d4:	61 f0       	breq	.+24     	; 0x13ee <__fp_cmp+0x46>
    13d6:	23 2b       	or	r18, r19
    13d8:	24 2b       	or	r18, r20
    13da:	25 2b       	or	r18, r21
    13dc:	21 f4       	brne	.+8      	; 0x13e6 <__fp_cmp+0x3e>
    13de:	08 95       	ret
    13e0:	0a 26       	eor	r0, r26
    13e2:	09 f4       	brne	.+2      	; 0x13e6 <__fp_cmp+0x3e>
    13e4:	a1 40       	sbci	r26, 0x01	; 1
    13e6:	a6 95       	lsr	r26
    13e8:	8f ef       	ldi	r24, 0xFF	; 255
    13ea:	81 1d       	adc	r24, r1
    13ec:	81 1d       	adc	r24, r1
    13ee:	08 95       	ret

000013f0 <__fp_inf>:
    13f0:	97 f9       	bld	r25, 7
    13f2:	9f 67       	ori	r25, 0x7F	; 127
    13f4:	80 e8       	ldi	r24, 0x80	; 128
    13f6:	70 e0       	ldi	r23, 0x00	; 0
    13f8:	60 e0       	ldi	r22, 0x00	; 0
    13fa:	08 95       	ret

000013fc <__fp_nan>:
    13fc:	9f ef       	ldi	r25, 0xFF	; 255
    13fe:	80 ec       	ldi	r24, 0xC0	; 192
    1400:	08 95       	ret

00001402 <__fp_powser>:
    1402:	df 93       	push	r29
    1404:	cf 93       	push	r28
    1406:	1f 93       	push	r17
    1408:	0f 93       	push	r16
    140a:	ff 92       	push	r15
    140c:	ef 92       	push	r14
    140e:	df 92       	push	r13
    1410:	7b 01       	movw	r14, r22
    1412:	8c 01       	movw	r16, r24
    1414:	68 94       	set
    1416:	06 c0       	rjmp	.+12     	; 0x1424 <__fp_powser+0x22>
    1418:	da 2e       	mov	r13, r26
    141a:	ef 01       	movw	r28, r30
    141c:	0e 94 90 0a 	call	0x1520	; 0x1520 <__mulsf3x>
    1420:	fe 01       	movw	r30, r28
    1422:	e8 94       	clt
    1424:	a5 91       	lpm	r26, Z+
    1426:	25 91       	lpm	r18, Z+
    1428:	35 91       	lpm	r19, Z+
    142a:	45 91       	lpm	r20, Z+
    142c:	55 91       	lpm	r21, Z+
    142e:	a6 f3       	brts	.-24     	; 0x1418 <__fp_powser+0x16>
    1430:	ef 01       	movw	r28, r30
    1432:	0e 94 23 08 	call	0x1046	; 0x1046 <__addsf3x>
    1436:	fe 01       	movw	r30, r28
    1438:	97 01       	movw	r18, r14
    143a:	a8 01       	movw	r20, r16
    143c:	da 94       	dec	r13
    143e:	69 f7       	brne	.-38     	; 0x141a <__fp_powser+0x18>
    1440:	df 90       	pop	r13
    1442:	ef 90       	pop	r14
    1444:	ff 90       	pop	r15
    1446:	0f 91       	pop	r16
    1448:	1f 91       	pop	r17
    144a:	cf 91       	pop	r28
    144c:	df 91       	pop	r29
    144e:	08 95       	ret

00001450 <__fp_pscA>:
    1450:	00 24       	eor	r0, r0
    1452:	0a 94       	dec	r0
    1454:	16 16       	cp	r1, r22
    1456:	17 06       	cpc	r1, r23
    1458:	18 06       	cpc	r1, r24
    145a:	09 06       	cpc	r0, r25
    145c:	08 95       	ret

0000145e <__fp_pscB>:
    145e:	00 24       	eor	r0, r0
    1460:	0a 94       	dec	r0
    1462:	12 16       	cp	r1, r18
    1464:	13 06       	cpc	r1, r19
    1466:	14 06       	cpc	r1, r20
    1468:	05 06       	cpc	r0, r21
    146a:	08 95       	ret

0000146c <__fp_round>:
    146c:	09 2e       	mov	r0, r25
    146e:	03 94       	inc	r0
    1470:	00 0c       	add	r0, r0
    1472:	11 f4       	brne	.+4      	; 0x1478 <__fp_round+0xc>
    1474:	88 23       	and	r24, r24
    1476:	52 f0       	brmi	.+20     	; 0x148c <__fp_round+0x20>
    1478:	bb 0f       	add	r27, r27
    147a:	40 f4       	brcc	.+16     	; 0x148c <__fp_round+0x20>
    147c:	bf 2b       	or	r27, r31
    147e:	11 f4       	brne	.+4      	; 0x1484 <__fp_round+0x18>
    1480:	60 ff       	sbrs	r22, 0
    1482:	04 c0       	rjmp	.+8      	; 0x148c <__fp_round+0x20>
    1484:	6f 5f       	subi	r22, 0xFF	; 255
    1486:	7f 4f       	sbci	r23, 0xFF	; 255
    1488:	8f 4f       	sbci	r24, 0xFF	; 255
    148a:	9f 4f       	sbci	r25, 0xFF	; 255
    148c:	08 95       	ret

0000148e <__fp_split3>:
    148e:	57 fd       	sbrc	r21, 7
    1490:	90 58       	subi	r25, 0x80	; 128
    1492:	44 0f       	add	r20, r20
    1494:	55 1f       	adc	r21, r21
    1496:	59 f0       	breq	.+22     	; 0x14ae <__fp_splitA+0x10>
    1498:	5f 3f       	cpi	r21, 0xFF	; 255
    149a:	71 f0       	breq	.+28     	; 0x14b8 <__fp_splitA+0x1a>
    149c:	47 95       	ror	r20

0000149e <__fp_splitA>:
    149e:	88 0f       	add	r24, r24
    14a0:	97 fb       	bst	r25, 7
    14a2:	99 1f       	adc	r25, r25
    14a4:	61 f0       	breq	.+24     	; 0x14be <__fp_splitA+0x20>
    14a6:	9f 3f       	cpi	r25, 0xFF	; 255
    14a8:	79 f0       	breq	.+30     	; 0x14c8 <__fp_splitA+0x2a>
    14aa:	87 95       	ror	r24
    14ac:	08 95       	ret
    14ae:	12 16       	cp	r1, r18
    14b0:	13 06       	cpc	r1, r19
    14b2:	14 06       	cpc	r1, r20
    14b4:	55 1f       	adc	r21, r21
    14b6:	f2 cf       	rjmp	.-28     	; 0x149c <__fp_split3+0xe>
    14b8:	46 95       	lsr	r20
    14ba:	f1 df       	rcall	.-30     	; 0x149e <__fp_splitA>
    14bc:	08 c0       	rjmp	.+16     	; 0x14ce <__fp_splitA+0x30>
    14be:	16 16       	cp	r1, r22
    14c0:	17 06       	cpc	r1, r23
    14c2:	18 06       	cpc	r1, r24
    14c4:	99 1f       	adc	r25, r25
    14c6:	f1 cf       	rjmp	.-30     	; 0x14aa <__fp_splitA+0xc>
    14c8:	86 95       	lsr	r24
    14ca:	71 05       	cpc	r23, r1
    14cc:	61 05       	cpc	r22, r1
    14ce:	08 94       	sec
    14d0:	08 95       	ret

000014d2 <__fp_zero>:
    14d2:	e8 94       	clt

000014d4 <__fp_szero>:
    14d4:	bb 27       	eor	r27, r27
    14d6:	66 27       	eor	r22, r22
    14d8:	77 27       	eor	r23, r23
    14da:	cb 01       	movw	r24, r22
    14dc:	97 f9       	bld	r25, 7
    14de:	08 95       	ret

000014e0 <__gesf2>:
    14e0:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <__fp_cmp>
    14e4:	08 f4       	brcc	.+2      	; 0x14e8 <__gesf2+0x8>
    14e6:	8f ef       	ldi	r24, 0xFF	; 255
    14e8:	08 95       	ret

000014ea <inverse>:
    14ea:	9b 01       	movw	r18, r22
    14ec:	ac 01       	movw	r20, r24
    14ee:	60 e0       	ldi	r22, 0x00	; 0
    14f0:	70 e0       	ldi	r23, 0x00	; 0
    14f2:	80 e8       	ldi	r24, 0x80	; 128
    14f4:	9f e3       	ldi	r25, 0x3F	; 63
    14f6:	0c 94 ef 08 	jmp	0x11de	; 0x11de <__divsf3>

000014fa <__mulsf3>:
    14fa:	0e 94 90 0a 	call	0x1520	; 0x1520 <__mulsf3x>
    14fe:	0c 94 36 0a 	jmp	0x146c	; 0x146c <__fp_round>
    1502:	0e 94 28 0a 	call	0x1450	; 0x1450 <__fp_pscA>
    1506:	38 f0       	brcs	.+14     	; 0x1516 <__mulsf3+0x1c>
    1508:	0e 94 2f 0a 	call	0x145e	; 0x145e <__fp_pscB>
    150c:	20 f0       	brcs	.+8      	; 0x1516 <__mulsf3+0x1c>
    150e:	95 23       	and	r25, r21
    1510:	11 f0       	breq	.+4      	; 0x1516 <__mulsf3+0x1c>
    1512:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <__fp_inf>
    1516:	0c 94 fe 09 	jmp	0x13fc	; 0x13fc <__fp_nan>
    151a:	11 24       	eor	r1, r1
    151c:	0c 94 6a 0a 	jmp	0x14d4	; 0x14d4 <__fp_szero>

00001520 <__mulsf3x>:
    1520:	0e 94 47 0a 	call	0x148e	; 0x148e <__fp_split3>
    1524:	70 f3       	brcs	.-36     	; 0x1502 <__mulsf3+0x8>

00001526 <__mulsf3_pse>:
    1526:	95 9f       	mul	r25, r21
    1528:	c1 f3       	breq	.-16     	; 0x151a <__mulsf3+0x20>
    152a:	95 0f       	add	r25, r21
    152c:	50 e0       	ldi	r21, 0x00	; 0
    152e:	55 1f       	adc	r21, r21
    1530:	62 9f       	mul	r22, r18
    1532:	f0 01       	movw	r30, r0
    1534:	72 9f       	mul	r23, r18
    1536:	bb 27       	eor	r27, r27
    1538:	f0 0d       	add	r31, r0
    153a:	b1 1d       	adc	r27, r1
    153c:	63 9f       	mul	r22, r19
    153e:	aa 27       	eor	r26, r26
    1540:	f0 0d       	add	r31, r0
    1542:	b1 1d       	adc	r27, r1
    1544:	aa 1f       	adc	r26, r26
    1546:	64 9f       	mul	r22, r20
    1548:	66 27       	eor	r22, r22
    154a:	b0 0d       	add	r27, r0
    154c:	a1 1d       	adc	r26, r1
    154e:	66 1f       	adc	r22, r22
    1550:	82 9f       	mul	r24, r18
    1552:	22 27       	eor	r18, r18
    1554:	b0 0d       	add	r27, r0
    1556:	a1 1d       	adc	r26, r1
    1558:	62 1f       	adc	r22, r18
    155a:	73 9f       	mul	r23, r19
    155c:	b0 0d       	add	r27, r0
    155e:	a1 1d       	adc	r26, r1
    1560:	62 1f       	adc	r22, r18
    1562:	83 9f       	mul	r24, r19
    1564:	a0 0d       	add	r26, r0
    1566:	61 1d       	adc	r22, r1
    1568:	22 1f       	adc	r18, r18
    156a:	74 9f       	mul	r23, r20
    156c:	33 27       	eor	r19, r19
    156e:	a0 0d       	add	r26, r0
    1570:	61 1d       	adc	r22, r1
    1572:	23 1f       	adc	r18, r19
    1574:	84 9f       	mul	r24, r20
    1576:	60 0d       	add	r22, r0
    1578:	21 1d       	adc	r18, r1
    157a:	82 2f       	mov	r24, r18
    157c:	76 2f       	mov	r23, r22
    157e:	6a 2f       	mov	r22, r26
    1580:	11 24       	eor	r1, r1
    1582:	9f 57       	subi	r25, 0x7F	; 127
    1584:	50 40       	sbci	r21, 0x00	; 0
    1586:	9a f0       	brmi	.+38     	; 0x15ae <__mulsf3_pse+0x88>
    1588:	f1 f0       	breq	.+60     	; 0x15c6 <__mulsf3_pse+0xa0>
    158a:	88 23       	and	r24, r24
    158c:	4a f0       	brmi	.+18     	; 0x15a0 <__mulsf3_pse+0x7a>
    158e:	ee 0f       	add	r30, r30
    1590:	ff 1f       	adc	r31, r31
    1592:	bb 1f       	adc	r27, r27
    1594:	66 1f       	adc	r22, r22
    1596:	77 1f       	adc	r23, r23
    1598:	88 1f       	adc	r24, r24
    159a:	91 50       	subi	r25, 0x01	; 1
    159c:	50 40       	sbci	r21, 0x00	; 0
    159e:	a9 f7       	brne	.-22     	; 0x158a <__mulsf3_pse+0x64>
    15a0:	9e 3f       	cpi	r25, 0xFE	; 254
    15a2:	51 05       	cpc	r21, r1
    15a4:	80 f0       	brcs	.+32     	; 0x15c6 <__mulsf3_pse+0xa0>
    15a6:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <__fp_inf>
    15aa:	0c 94 6a 0a 	jmp	0x14d4	; 0x14d4 <__fp_szero>
    15ae:	5f 3f       	cpi	r21, 0xFF	; 255
    15b0:	e4 f3       	brlt	.-8      	; 0x15aa <__mulsf3_pse+0x84>
    15b2:	98 3e       	cpi	r25, 0xE8	; 232
    15b4:	d4 f3       	brlt	.-12     	; 0x15aa <__mulsf3_pse+0x84>
    15b6:	86 95       	lsr	r24
    15b8:	77 95       	ror	r23
    15ba:	67 95       	ror	r22
    15bc:	b7 95       	ror	r27
    15be:	f7 95       	ror	r31
    15c0:	e7 95       	ror	r30
    15c2:	9f 5f       	subi	r25, 0xFF	; 255
    15c4:	c1 f7       	brne	.-16     	; 0x15b6 <__mulsf3_pse+0x90>
    15c6:	fe 2b       	or	r31, r30
    15c8:	88 0f       	add	r24, r24
    15ca:	91 1d       	adc	r25, r1
    15cc:	96 95       	lsr	r25
    15ce:	87 95       	ror	r24
    15d0:	97 f9       	bld	r25, 7
    15d2:	08 95       	ret

000015d4 <square>:
    15d4:	9b 01       	movw	r18, r22
    15d6:	ac 01       	movw	r20, r24
    15d8:	0c 94 7d 0a 	jmp	0x14fa	; 0x14fa <__mulsf3>

000015dc <malloc>:
    15dc:	0f 93       	push	r16
    15de:	1f 93       	push	r17
    15e0:	cf 93       	push	r28
    15e2:	df 93       	push	r29
    15e4:	82 30       	cpi	r24, 0x02	; 2
    15e6:	91 05       	cpc	r25, r1
    15e8:	10 f4       	brcc	.+4      	; 0x15ee <malloc+0x12>
    15ea:	82 e0       	ldi	r24, 0x02	; 2
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	e0 91 8c 01 	lds	r30, 0x018C	; 0x80018c <__flp>
    15f2:	f0 91 8d 01 	lds	r31, 0x018D	; 0x80018d <__flp+0x1>
    15f6:	20 e0       	ldi	r18, 0x00	; 0
    15f8:	30 e0       	ldi	r19, 0x00	; 0
    15fa:	a0 e0       	ldi	r26, 0x00	; 0
    15fc:	b0 e0       	ldi	r27, 0x00	; 0
    15fe:	30 97       	sbiw	r30, 0x00	; 0
    1600:	19 f1       	breq	.+70     	; 0x1648 <malloc+0x6c>
    1602:	40 81       	ld	r20, Z
    1604:	51 81       	ldd	r21, Z+1	; 0x01
    1606:	02 81       	ldd	r16, Z+2	; 0x02
    1608:	13 81       	ldd	r17, Z+3	; 0x03
    160a:	48 17       	cp	r20, r24
    160c:	59 07       	cpc	r21, r25
    160e:	c8 f0       	brcs	.+50     	; 0x1642 <malloc+0x66>
    1610:	84 17       	cp	r24, r20
    1612:	95 07       	cpc	r25, r21
    1614:	69 f4       	brne	.+26     	; 0x1630 <malloc+0x54>
    1616:	10 97       	sbiw	r26, 0x00	; 0
    1618:	31 f0       	breq	.+12     	; 0x1626 <malloc+0x4a>
    161a:	12 96       	adiw	r26, 0x02	; 2
    161c:	0c 93       	st	X, r16
    161e:	12 97       	sbiw	r26, 0x02	; 2
    1620:	13 96       	adiw	r26, 0x03	; 3
    1622:	1c 93       	st	X, r17
    1624:	27 c0       	rjmp	.+78     	; 0x1674 <malloc+0x98>
    1626:	00 93 8c 01 	sts	0x018C, r16	; 0x80018c <__flp>
    162a:	10 93 8d 01 	sts	0x018D, r17	; 0x80018d <__flp+0x1>
    162e:	22 c0       	rjmp	.+68     	; 0x1674 <malloc+0x98>
    1630:	21 15       	cp	r18, r1
    1632:	31 05       	cpc	r19, r1
    1634:	19 f0       	breq	.+6      	; 0x163c <malloc+0x60>
    1636:	42 17       	cp	r20, r18
    1638:	53 07       	cpc	r21, r19
    163a:	18 f4       	brcc	.+6      	; 0x1642 <malloc+0x66>
    163c:	9a 01       	movw	r18, r20
    163e:	bd 01       	movw	r22, r26
    1640:	ef 01       	movw	r28, r30
    1642:	df 01       	movw	r26, r30
    1644:	f8 01       	movw	r30, r16
    1646:	db cf       	rjmp	.-74     	; 0x15fe <malloc+0x22>
    1648:	21 15       	cp	r18, r1
    164a:	31 05       	cpc	r19, r1
    164c:	f9 f0       	breq	.+62     	; 0x168c <malloc+0xb0>
    164e:	28 1b       	sub	r18, r24
    1650:	39 0b       	sbc	r19, r25
    1652:	24 30       	cpi	r18, 0x04	; 4
    1654:	31 05       	cpc	r19, r1
    1656:	80 f4       	brcc	.+32     	; 0x1678 <malloc+0x9c>
    1658:	8a 81       	ldd	r24, Y+2	; 0x02
    165a:	9b 81       	ldd	r25, Y+3	; 0x03
    165c:	61 15       	cp	r22, r1
    165e:	71 05       	cpc	r23, r1
    1660:	21 f0       	breq	.+8      	; 0x166a <malloc+0x8e>
    1662:	fb 01       	movw	r30, r22
    1664:	93 83       	std	Z+3, r25	; 0x03
    1666:	82 83       	std	Z+2, r24	; 0x02
    1668:	04 c0       	rjmp	.+8      	; 0x1672 <malloc+0x96>
    166a:	90 93 8d 01 	sts	0x018D, r25	; 0x80018d <__flp+0x1>
    166e:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <__flp>
    1672:	fe 01       	movw	r30, r28
    1674:	32 96       	adiw	r30, 0x02	; 2
    1676:	44 c0       	rjmp	.+136    	; 0x1700 <malloc+0x124>
    1678:	fe 01       	movw	r30, r28
    167a:	e2 0f       	add	r30, r18
    167c:	f3 1f       	adc	r31, r19
    167e:	81 93       	st	Z+, r24
    1680:	91 93       	st	Z+, r25
    1682:	22 50       	subi	r18, 0x02	; 2
    1684:	31 09       	sbc	r19, r1
    1686:	39 83       	std	Y+1, r19	; 0x01
    1688:	28 83       	st	Y, r18
    168a:	3a c0       	rjmp	.+116    	; 0x1700 <malloc+0x124>
    168c:	20 91 8a 01 	lds	r18, 0x018A	; 0x80018a <__brkval>
    1690:	30 91 8b 01 	lds	r19, 0x018B	; 0x80018b <__brkval+0x1>
    1694:	23 2b       	or	r18, r19
    1696:	41 f4       	brne	.+16     	; 0x16a8 <malloc+0xcc>
    1698:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    169c:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    16a0:	30 93 8b 01 	sts	0x018B, r19	; 0x80018b <__brkval+0x1>
    16a4:	20 93 8a 01 	sts	0x018A, r18	; 0x80018a <__brkval>
    16a8:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    16ac:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    16b0:	21 15       	cp	r18, r1
    16b2:	31 05       	cpc	r19, r1
    16b4:	41 f4       	brne	.+16     	; 0x16c6 <malloc+0xea>
    16b6:	2d b7       	in	r18, 0x3d	; 61
    16b8:	3e b7       	in	r19, 0x3e	; 62
    16ba:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    16be:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    16c2:	24 1b       	sub	r18, r20
    16c4:	35 0b       	sbc	r19, r21
    16c6:	e0 91 8a 01 	lds	r30, 0x018A	; 0x80018a <__brkval>
    16ca:	f0 91 8b 01 	lds	r31, 0x018B	; 0x80018b <__brkval+0x1>
    16ce:	e2 17       	cp	r30, r18
    16d0:	f3 07       	cpc	r31, r19
    16d2:	a0 f4       	brcc	.+40     	; 0x16fc <malloc+0x120>
    16d4:	2e 1b       	sub	r18, r30
    16d6:	3f 0b       	sbc	r19, r31
    16d8:	28 17       	cp	r18, r24
    16da:	39 07       	cpc	r19, r25
    16dc:	78 f0       	brcs	.+30     	; 0x16fc <malloc+0x120>
    16de:	ac 01       	movw	r20, r24
    16e0:	4e 5f       	subi	r20, 0xFE	; 254
    16e2:	5f 4f       	sbci	r21, 0xFF	; 255
    16e4:	24 17       	cp	r18, r20
    16e6:	35 07       	cpc	r19, r21
    16e8:	48 f0       	brcs	.+18     	; 0x16fc <malloc+0x120>
    16ea:	4e 0f       	add	r20, r30
    16ec:	5f 1f       	adc	r21, r31
    16ee:	50 93 8b 01 	sts	0x018B, r21	; 0x80018b <__brkval+0x1>
    16f2:	40 93 8a 01 	sts	0x018A, r20	; 0x80018a <__brkval>
    16f6:	81 93       	st	Z+, r24
    16f8:	91 93       	st	Z+, r25
    16fa:	02 c0       	rjmp	.+4      	; 0x1700 <malloc+0x124>
    16fc:	e0 e0       	ldi	r30, 0x00	; 0
    16fe:	f0 e0       	ldi	r31, 0x00	; 0
    1700:	cf 01       	movw	r24, r30
    1702:	df 91       	pop	r29
    1704:	cf 91       	pop	r28
    1706:	1f 91       	pop	r17
    1708:	0f 91       	pop	r16
    170a:	08 95       	ret

0000170c <free>:
    170c:	cf 93       	push	r28
    170e:	df 93       	push	r29
    1710:	00 97       	sbiw	r24, 0x00	; 0
    1712:	09 f4       	brne	.+2      	; 0x1716 <free+0xa>
    1714:	81 c0       	rjmp	.+258    	; 0x1818 <free+0x10c>
    1716:	fc 01       	movw	r30, r24
    1718:	32 97       	sbiw	r30, 0x02	; 2
    171a:	13 82       	std	Z+3, r1	; 0x03
    171c:	12 82       	std	Z+2, r1	; 0x02
    171e:	a0 91 8c 01 	lds	r26, 0x018C	; 0x80018c <__flp>
    1722:	b0 91 8d 01 	lds	r27, 0x018D	; 0x80018d <__flp+0x1>
    1726:	10 97       	sbiw	r26, 0x00	; 0
    1728:	81 f4       	brne	.+32     	; 0x174a <free+0x3e>
    172a:	20 81       	ld	r18, Z
    172c:	31 81       	ldd	r19, Z+1	; 0x01
    172e:	82 0f       	add	r24, r18
    1730:	93 1f       	adc	r25, r19
    1732:	20 91 8a 01 	lds	r18, 0x018A	; 0x80018a <__brkval>
    1736:	30 91 8b 01 	lds	r19, 0x018B	; 0x80018b <__brkval+0x1>
    173a:	28 17       	cp	r18, r24
    173c:	39 07       	cpc	r19, r25
    173e:	51 f5       	brne	.+84     	; 0x1794 <free+0x88>
    1740:	f0 93 8b 01 	sts	0x018B, r31	; 0x80018b <__brkval+0x1>
    1744:	e0 93 8a 01 	sts	0x018A, r30	; 0x80018a <__brkval>
    1748:	67 c0       	rjmp	.+206    	; 0x1818 <free+0x10c>
    174a:	ed 01       	movw	r28, r26
    174c:	20 e0       	ldi	r18, 0x00	; 0
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	ce 17       	cp	r28, r30
    1752:	df 07       	cpc	r29, r31
    1754:	40 f4       	brcc	.+16     	; 0x1766 <free+0x5a>
    1756:	4a 81       	ldd	r20, Y+2	; 0x02
    1758:	5b 81       	ldd	r21, Y+3	; 0x03
    175a:	9e 01       	movw	r18, r28
    175c:	41 15       	cp	r20, r1
    175e:	51 05       	cpc	r21, r1
    1760:	f1 f0       	breq	.+60     	; 0x179e <free+0x92>
    1762:	ea 01       	movw	r28, r20
    1764:	f5 cf       	rjmp	.-22     	; 0x1750 <free+0x44>
    1766:	d3 83       	std	Z+3, r29	; 0x03
    1768:	c2 83       	std	Z+2, r28	; 0x02
    176a:	40 81       	ld	r20, Z
    176c:	51 81       	ldd	r21, Z+1	; 0x01
    176e:	84 0f       	add	r24, r20
    1770:	95 1f       	adc	r25, r21
    1772:	c8 17       	cp	r28, r24
    1774:	d9 07       	cpc	r29, r25
    1776:	59 f4       	brne	.+22     	; 0x178e <free+0x82>
    1778:	88 81       	ld	r24, Y
    177a:	99 81       	ldd	r25, Y+1	; 0x01
    177c:	84 0f       	add	r24, r20
    177e:	95 1f       	adc	r25, r21
    1780:	02 96       	adiw	r24, 0x02	; 2
    1782:	91 83       	std	Z+1, r25	; 0x01
    1784:	80 83       	st	Z, r24
    1786:	8a 81       	ldd	r24, Y+2	; 0x02
    1788:	9b 81       	ldd	r25, Y+3	; 0x03
    178a:	93 83       	std	Z+3, r25	; 0x03
    178c:	82 83       	std	Z+2, r24	; 0x02
    178e:	21 15       	cp	r18, r1
    1790:	31 05       	cpc	r19, r1
    1792:	29 f4       	brne	.+10     	; 0x179e <free+0x92>
    1794:	f0 93 8d 01 	sts	0x018D, r31	; 0x80018d <__flp+0x1>
    1798:	e0 93 8c 01 	sts	0x018C, r30	; 0x80018c <__flp>
    179c:	3d c0       	rjmp	.+122    	; 0x1818 <free+0x10c>
    179e:	e9 01       	movw	r28, r18
    17a0:	fb 83       	std	Y+3, r31	; 0x03
    17a2:	ea 83       	std	Y+2, r30	; 0x02
    17a4:	49 91       	ld	r20, Y+
    17a6:	59 91       	ld	r21, Y+
    17a8:	c4 0f       	add	r28, r20
    17aa:	d5 1f       	adc	r29, r21
    17ac:	ec 17       	cp	r30, r28
    17ae:	fd 07       	cpc	r31, r29
    17b0:	61 f4       	brne	.+24     	; 0x17ca <free+0xbe>
    17b2:	80 81       	ld	r24, Z
    17b4:	91 81       	ldd	r25, Z+1	; 0x01
    17b6:	84 0f       	add	r24, r20
    17b8:	95 1f       	adc	r25, r21
    17ba:	02 96       	adiw	r24, 0x02	; 2
    17bc:	e9 01       	movw	r28, r18
    17be:	99 83       	std	Y+1, r25	; 0x01
    17c0:	88 83       	st	Y, r24
    17c2:	82 81       	ldd	r24, Z+2	; 0x02
    17c4:	93 81       	ldd	r25, Z+3	; 0x03
    17c6:	9b 83       	std	Y+3, r25	; 0x03
    17c8:	8a 83       	std	Y+2, r24	; 0x02
    17ca:	e0 e0       	ldi	r30, 0x00	; 0
    17cc:	f0 e0       	ldi	r31, 0x00	; 0
    17ce:	12 96       	adiw	r26, 0x02	; 2
    17d0:	8d 91       	ld	r24, X+
    17d2:	9c 91       	ld	r25, X
    17d4:	13 97       	sbiw	r26, 0x03	; 3
    17d6:	00 97       	sbiw	r24, 0x00	; 0
    17d8:	19 f0       	breq	.+6      	; 0x17e0 <free+0xd4>
    17da:	fd 01       	movw	r30, r26
    17dc:	dc 01       	movw	r26, r24
    17de:	f7 cf       	rjmp	.-18     	; 0x17ce <free+0xc2>
    17e0:	8d 91       	ld	r24, X+
    17e2:	9c 91       	ld	r25, X
    17e4:	11 97       	sbiw	r26, 0x01	; 1
    17e6:	9d 01       	movw	r18, r26
    17e8:	2e 5f       	subi	r18, 0xFE	; 254
    17ea:	3f 4f       	sbci	r19, 0xFF	; 255
    17ec:	82 0f       	add	r24, r18
    17ee:	93 1f       	adc	r25, r19
    17f0:	20 91 8a 01 	lds	r18, 0x018A	; 0x80018a <__brkval>
    17f4:	30 91 8b 01 	lds	r19, 0x018B	; 0x80018b <__brkval+0x1>
    17f8:	28 17       	cp	r18, r24
    17fa:	39 07       	cpc	r19, r25
    17fc:	69 f4       	brne	.+26     	; 0x1818 <free+0x10c>
    17fe:	30 97       	sbiw	r30, 0x00	; 0
    1800:	29 f4       	brne	.+10     	; 0x180c <free+0x100>
    1802:	10 92 8d 01 	sts	0x018D, r1	; 0x80018d <__flp+0x1>
    1806:	10 92 8c 01 	sts	0x018C, r1	; 0x80018c <__flp>
    180a:	02 c0       	rjmp	.+4      	; 0x1810 <free+0x104>
    180c:	13 82       	std	Z+3, r1	; 0x03
    180e:	12 82       	std	Z+2, r1	; 0x02
    1810:	b0 93 8b 01 	sts	0x018B, r27	; 0x80018b <__brkval+0x1>
    1814:	a0 93 8a 01 	sts	0x018A, r26	; 0x80018a <__brkval>
    1818:	df 91       	pop	r29
    181a:	cf 91       	pop	r28
    181c:	08 95       	ret

0000181e <eeprom_read_dword>:
    181e:	a6 e1       	ldi	r26, 0x16	; 22
    1820:	b0 e0       	ldi	r27, 0x00	; 0
    1822:	44 e0       	ldi	r20, 0x04	; 4
    1824:	50 e0       	ldi	r21, 0x00	; 0
    1826:	0c 94 23 0c 	jmp	0x1846	; 0x1846 <eeprom_read_blraw>

0000182a <eeprom_update_dword>:
    182a:	03 96       	adiw	r24, 0x03	; 3
    182c:	27 2f       	mov	r18, r23
    182e:	0e 94 32 0c 	call	0x1864	; 0x1864 <eeprom_update_r18>
    1832:	0e 94 31 0c 	call	0x1862	; 0x1862 <eeprom_update_byte>
    1836:	25 2f       	mov	r18, r21
    1838:	0e 94 32 0c 	call	0x1864	; 0x1864 <eeprom_update_r18>
    183c:	24 2f       	mov	r18, r20
    183e:	0c 94 32 0c 	jmp	0x1864	; 0x1864 <eeprom_update_r18>

00001842 <eeprom_read_block>:
    1842:	dc 01       	movw	r26, r24
    1844:	cb 01       	movw	r24, r22

00001846 <eeprom_read_blraw>:
    1846:	fc 01       	movw	r30, r24
    1848:	f9 99       	sbic	0x1f, 1	; 31
    184a:	fe cf       	rjmp	.-4      	; 0x1848 <eeprom_read_blraw+0x2>
    184c:	06 c0       	rjmp	.+12     	; 0x185a <eeprom_read_blraw+0x14>
    184e:	f2 bd       	out	0x22, r31	; 34
    1850:	e1 bd       	out	0x21, r30	; 33
    1852:	f8 9a       	sbi	0x1f, 0	; 31
    1854:	31 96       	adiw	r30, 0x01	; 1
    1856:	00 b4       	in	r0, 0x20	; 32
    1858:	0d 92       	st	X+, r0
    185a:	41 50       	subi	r20, 0x01	; 1
    185c:	50 40       	sbci	r21, 0x00	; 0
    185e:	b8 f7       	brcc	.-18     	; 0x184e <eeprom_read_blraw+0x8>
    1860:	08 95       	ret

00001862 <eeprom_update_byte>:
    1862:	26 2f       	mov	r18, r22

00001864 <eeprom_update_r18>:
    1864:	f9 99       	sbic	0x1f, 1	; 31
    1866:	fe cf       	rjmp	.-4      	; 0x1864 <eeprom_update_r18>
    1868:	92 bd       	out	0x22, r25	; 34
    186a:	81 bd       	out	0x21, r24	; 33
    186c:	f8 9a       	sbi	0x1f, 0	; 31
    186e:	01 97       	sbiw	r24, 0x01	; 1
    1870:	00 b4       	in	r0, 0x20	; 32
    1872:	02 16       	cp	r0, r18
    1874:	39 f0       	breq	.+14     	; 0x1884 <eeprom_update_r18+0x20>
    1876:	1f ba       	out	0x1f, r1	; 31
    1878:	20 bd       	out	0x20, r18	; 32
    187a:	0f b6       	in	r0, 0x3f	; 63
    187c:	f8 94       	cli
    187e:	fa 9a       	sbi	0x1f, 2	; 31
    1880:	f9 9a       	sbi	0x1f, 1	; 31
    1882:	0f be       	out	0x3f, r0	; 63
    1884:	08 95       	ret

00001886 <_exit>:
    1886:	f8 94       	cli

00001888 <__stop_program>:
    1888:	ff cf       	rjmp	.-2      	; 0x1888 <__stop_program>
