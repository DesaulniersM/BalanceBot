
BalanceBot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  00002076  0000214a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002076  00000000  00000000  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000074  00800128  00800128  00002172  2**0
                  ALLOC
  3 .eeprom       00000004  00810000  00810000  00002172  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fuse         00000003  00820000  00820000  00002176  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  5 .comment      0000005c  00000000  00000000  00002179  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000021d8  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 000002a0  00000000  00000000  00002218  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00002f04  00000000  00000000  000024b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000137b  00000000  00000000  000053bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000018b1  00000000  00000000  00006737  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000928  00000000  00000000  00007fe8  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000ae0  00000000  00000000  00008910  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00002853  00000000  00000000  000093f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000002b0  00000000  00000000  0000bc43  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6d 00 	jmp	0xda	; 0xda <__ctors_end>
       4:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
       8:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
       c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      10:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      14:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      18:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      1c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      20:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      24:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      28:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      2c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      30:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      34:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      38:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      3c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      40:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      44:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      48:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      4c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      50:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      54:	0c 94 af 08 	jmp	0x115e	; 0x115e <__vector_21>
      58:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      5c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      60:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      64:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      68:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      6c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      70:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      74:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      78:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      7c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      80:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      84:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      88:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      8c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      90:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      94:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      98:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      9c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      a0:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      a4:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      a8:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      ac:	08 4a       	sbci	r16, 0xA8	; 168
      ae:	d7 3b       	cpi	r29, 0xB7	; 183
      b0:	3b ce       	rjmp	.-906    	; 0xfffffd28 <__fuse+0xff7dfd28>
      b2:	01 6e       	ori	r16, 0xE1	; 225
      b4:	84 bc       	out	0x24, r8	; 36
      b6:	bf fd       	.word	0xfdbf	; ????
      b8:	c1 2f       	mov	r28, r17
      ba:	3d 6c       	ori	r19, 0xCD	; 205
      bc:	74 31       	cpi	r23, 0x14	; 20
      be:	9a bd       	out	0x2a, r25	; 42
      c0:	56 83       	std	Z+6, r21	; 0x06
      c2:	3d da       	rcall	.-2950   	; 0xfffff53e <__fuse+0xff7df53e>
      c4:	3d 00       	.word	0x003d	; ????
      c6:	c7 7f       	andi	r28, 0xF7	; 247
      c8:	11 be       	out	0x31, r1	; 49
      ca:	d9 e4       	ldi	r29, 0x49	; 73
      cc:	bb 4c       	sbci	r27, 0xCB	; 203
      ce:	3e 91       	ld	r19, -X
      d0:	6b aa       	std	Y+51, r6	; 0x33
      d2:	aa be       	out	0x3a, r10	; 58
      d4:	00 00       	nop
      d6:	00 80       	ld	r0, Z
      d8:	3f 00       	.word	0x003f	; ????

000000da <__ctors_end>:
      da:	11 24       	eor	r1, r1
      dc:	1f be       	out	0x3f, r1	; 63
      de:	cf ef       	ldi	r28, 0xFF	; 255
      e0:	da e0       	ldi	r29, 0x0A	; 10
      e2:	de bf       	out	0x3e, r29	; 62
      e4:	cd bf       	out	0x3d, r28	; 61

000000e6 <__do_copy_data>:
      e6:	11 e0       	ldi	r17, 0x01	; 1
      e8:	a0 e0       	ldi	r26, 0x00	; 0
      ea:	b1 e0       	ldi	r27, 0x01	; 1
      ec:	e6 e7       	ldi	r30, 0x76	; 118
      ee:	f0 e2       	ldi	r31, 0x20	; 32
      f0:	02 c0       	rjmp	.+4      	; 0xf6 <__do_copy_data+0x10>
      f2:	05 90       	lpm	r0, Z+
      f4:	0d 92       	st	X+, r0
      f6:	a8 32       	cpi	r26, 0x28	; 40
      f8:	b1 07       	cpc	r27, r17
      fa:	d9 f7       	brne	.-10     	; 0xf2 <__do_copy_data+0xc>

000000fc <__do_clear_bss>:
      fc:	21 e0       	ldi	r18, 0x01	; 1
      fe:	a8 e2       	ldi	r26, 0x28	; 40
     100:	b1 e0       	ldi	r27, 0x01	; 1
     102:	01 c0       	rjmp	.+2      	; 0x106 <.do_clear_bss_start>

00000104 <.do_clear_bss_loop>:
     104:	1d 92       	st	X+, r1

00000106 <.do_clear_bss_start>:
     106:	ac 39       	cpi	r26, 0x9C	; 156
     108:	b2 07       	cpc	r27, r18
     10a:	e1 f7       	brne	.-8      	; 0x104 <.do_clear_bss_loop>
     10c:	0e 94 f5 04 	call	0x9ea	; 0x9ea <main>
     110:	0c 94 39 10 	jmp	0x2072	; 0x2072 <_exit>

00000114 <__bad_interrupt>:
     114:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000118 <I2C_WriteConfigure>:
		
	}
	}

//Writes val to Reg
void I2C_WriteConfigure(uint8_t reg, uint8_t val){
     118:	cf 93       	push	r28
     11a:	df 93       	push	r29
     11c:	d8 2f       	mov	r29, r24
     11e:	c6 2f       	mov	r28, r22
			i2c_start( (MPU6050_ADDRESS_AD0_LOW<<1) + I2C_WRITE);
     120:	80 ed       	ldi	r24, 0xD0	; 208
     122:	0e 94 db 08 	call	0x11b6	; 0x11b6 <i2c_start>
			i2c_write(reg); 
     126:	8d 2f       	mov	r24, r29
     128:	0e 94 36 09 	call	0x126c	; 0x126c <i2c_write>
			i2c_write(val); 
     12c:	8c 2f       	mov	r24, r28
     12e:	0e 94 36 09 	call	0x126c	; 0x126c <i2c_write>
			i2c_stop();      // set stop condition = release bus
     132:	0e 94 2d 09 	call	0x125a	; 0x125a <i2c_stop>
	}
     136:	df 91       	pop	r29
     138:	cf 91       	pop	r28
     13a:	08 95       	ret

0000013c <Init_MPU6050>:

#include "I2C_MPU6050.h"

// Configure MPU6050 settings
void Init_MPU6050(){
	i2c_init();     // init I2C interface
     13c:	0e 94 d5 08 	call	0x11aa	; 0x11aa <i2c_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     140:	2f ef       	ldi	r18, 0xFF	; 255
     142:	83 ec       	ldi	r24, 0xC3	; 195
     144:	99 e0       	ldi	r25, 0x09	; 9
     146:	21 50       	subi	r18, 0x01	; 1
     148:	80 40       	sbci	r24, 0x00	; 0
     14a:	90 40       	sbci	r25, 0x00	; 0
     14c:	e1 f7       	brne	.-8      	; 0x146 <Init_MPU6050+0xa>
     14e:	00 c0       	rjmp	.+0      	; 0x150 <Init_MPU6050+0x14>
     150:	00 00       	nop
	_delay_ms(200);  // Wait for 200 ms.
	//
	MPU6050.tau = 0.003; //0.75 0.007
     152:	ec e2       	ldi	r30, 0x2C	; 44
     154:	f1 e0       	ldi	r31, 0x01	; 1
     156:	86 ea       	ldi	r24, 0xA6	; 166
     158:	9b e9       	ldi	r25, 0x9B	; 155
     15a:	a4 e4       	ldi	r26, 0x44	; 68
     15c:	bb e3       	ldi	r27, 0x3B	; 59
     15e:	86 a3       	std	Z+38, r24	; 0x26
     160:	97 a3       	std	Z+39, r25	; 0x27
     162:	a0 a7       	std	Z+40, r26	; 0x28
     164:	b1 a7       	std	Z+41, r27	; 0x29
	float ControlUpdatePeriod = .001;		// 1kHz Max as per MPU6050 sampling limitations
	MPU6050.alpha = ((MPU6050.tau) / (MPU6050.tau + ControlUpdatePeriod));
     166:	80 e0       	ldi	r24, 0x00	; 0
     168:	90 e0       	ldi	r25, 0x00	; 0
     16a:	a0 e4       	ldi	r26, 0x40	; 64
     16c:	bf e3       	ldi	r27, 0x3F	; 63
     16e:	82 a3       	std	Z+34, r24	; 0x22
     170:	93 a3       	std	Z+35, r25	; 0x23
     172:	a4 a3       	std	Z+36, r26	; 0x24
     174:	b5 a3       	std	Z+37, r27	; 0x25
	MPU6050.PreviousTheta = 0;
     176:	16 8a       	std	Z+22, r1	; 0x16
     178:	17 8a       	std	Z+23, r1	; 0x17
     17a:	10 8e       	std	Z+24, r1	; 0x18
     17c:	11 8e       	std	Z+25, r1	; 0x19
	MPU6050.dt = ControlUpdatePeriod;
     17e:	8f e6       	ldi	r24, 0x6F	; 111
     180:	92 e1       	ldi	r25, 0x12	; 18
     182:	a3 e8       	ldi	r26, 0x83	; 131
     184:	ba e3       	ldi	r27, 0x3A	; 58
     186:	86 8f       	std	Z+30, r24	; 0x1e
     188:	97 8f       	std	Z+31, r25	; 0x1f
     18a:	a0 a3       	std	Z+32, r26	; 0x20
     18c:	b1 a3       	std	Z+33, r27	; 0x21
	//
	unsigned char ret = i2c_start((MPU6050_ADDRESS_AD0_LOW<<1) + I2C_WRITE);       // set device address and write mode
     18e:	80 ed       	ldi	r24, 0xD0	; 208
     190:	0e 94 db 08 	call	0x11b6	; 0x11b6 <i2c_start>
	if ( ret )
     194:	88 23       	and	r24, r24
     196:	21 f0       	breq	.+8      	; 0x1a0 <Init_MPU6050+0x64>
	{
		/* failed to issue start condition, possibly no device found */
		i2c_stop();
     198:	0e 94 2d 09 	call	0x125a	; 0x125a <i2c_stop>
		LED_ON(PORTF, DEBUG_LED4);    // Turn on the red LED immediately to signal the read is not ok
     19c:	88 9a       	sbi	0x11, 0	; 17
     19e:	ff cf       	rjmp	.-2      	; 0x19e <Init_MPU6050+0x62>
		while(1) {;;}  // lock program here as sensor init failed
	}else{
		/* issuing start condition ok, device accessible */
		i2c_write(MPU6050_RA_PWR_MGMT_1); // go to register 107
     1a0:	8b e6       	ldi	r24, 0x6B	; 107
     1a2:	0e 94 36 09 	call	0x126c	; 0x126c <i2c_write>
		i2c_write(0x00); // set value to 0000 0000 and wake up sensor
     1a6:	80 e0       	ldi	r24, 0x00	; 0
     1a8:	0e 94 36 09 	call	0x126c	; 0x126c <i2c_write>
		i2c_stop();      // set stop condition = release bus
     1ac:	0e 94 2d 09 	call	0x125a	; 0x125a <i2c_stop>
		
		I2C_WriteConfigure(MPU6050_RA_SMPLRT_DIV, 0x08); // set value to 0000 1000 for 1000 Hz
     1b0:	68 e0       	ldi	r22, 0x08	; 8
     1b2:	89 e1       	ldi	r24, 0x19	; 25
     1b4:	0e 94 8c 00 	call	0x118	; 0x118 <I2C_WriteConfigure>
		I2C_WriteConfigure(MPU6050_RA_ACCEL_CONFIG, 0x08); // set value to 0000 1000 for 4g, normal line tension is 2,7g
     1b8:	68 e0       	ldi	r22, 0x08	; 8
     1ba:	8c e1       	ldi	r24, 0x1C	; 28
     1bc:	0e 94 8c 00 	call	0x118	; 0x118 <I2C_WriteConfigure>
		I2C_WriteConfigure(MPU6050_RA_GYRO_CONFIG, 0x10); // set value to 0001 0000 for 1000 (deg/s) (Motor Max RPM is 100)
     1c0:	60 e1       	ldi	r22, 0x10	; 16
     1c2:	8b e1       	ldi	r24, 0x1B	; 27
     1c4:	0e 94 8c 00 	call	0x118	; 0x118 <I2C_WriteConfigure>
		I2C_WriteConfigure(MPU6050_RA_FIFO_EN, 0xF8); // set value to 1111 1000 for all sensors not slave
     1c8:	68 ef       	ldi	r22, 0xF8	; 248
     1ca:	83 e2       	ldi	r24, 0x23	; 35
     1cc:	0e 94 8c 00 	call	0x118	; 0x118 <I2C_WriteConfigure>
		I2C_WriteConfigure(MPU6050_RA_USER_CTRL,0x40); // set value to 0100 0000 FIFO enable
     1d0:	60 e4       	ldi	r22, 0x40	; 64
     1d2:	8a e6       	ldi	r24, 0x6A	; 106
     1d4:	0e 94 8c 00 	call	0x118	; 0x118 <I2C_WriteConfigure>
     1d8:	08 95       	ret

000001da <I2C_ReadSensorVals>:
			i2c_write(reg); 
			i2c_write(val); 
			i2c_stop();      // set stop condition = release bus
	}

void I2C_ReadSensorVals(){
     1da:	0f 93       	push	r16
     1dc:	1f 93       	push	r17
     1de:	cf 93       	push	r28
     1e0:	df 93       	push	r29

//Read X accel
i2c_start_wait((MPU6050_ADDRESS_AD0_LOW<<1) + I2C_WRITE);    // set device address and write mode
     1e2:	80 ed       	ldi	r24, 0xD0	; 208
     1e4:	0e 94 02 09 	call	0x1204	; 0x1204 <i2c_start_wait>
i2c_write(MPU6050_RA_ACCEL_XOUT_H);                      // ACCEL_XOUT
     1e8:	8b e3       	ldi	r24, 0x3B	; 59
     1ea:	0e 94 36 09 	call	0x126c	; 0x126c <i2c_write>
i2c_rep_start((MPU6050_ADDRESS_AD0_LOW<<1) + I2C_READ);      // set device address and read mode
     1ee:	81 ed       	ldi	r24, 0xD1	; 209
     1f0:	0e 94 2a 09 	call	0x1254	; 0x1254 <i2c_rep_start>
MPU6050.rawXaccel = i2c_readAck();               // read one intermediate byte
     1f4:	0e 94 48 09 	call	0x1290	; 0x1290 <i2c_readAck>
     1f8:	c8 2f       	mov	r28, r24
     1fa:	d0 e0       	ldi	r29, 0x00	; 0
     1fc:	0c e2       	ldi	r16, 0x2C	; 44
     1fe:	11 e0       	ldi	r17, 0x01	; 1
     200:	f8 01       	movw	r30, r16
     202:	d1 83       	std	Z+1, r29	; 0x01
     204:	c0 83       	st	Z, r28
MPU6050.rawXaccel = (MPU6050.rawXaccel<<8) | i2c_readNak(); // read last byte
     206:	0e 94 53 09 	call	0x12a6	; 0x12a6 <i2c_readNak>
     20a:	dc 2f       	mov	r29, r28
     20c:	cc 27       	eor	r28, r28
     20e:	c8 2b       	or	r28, r24
     210:	f8 01       	movw	r30, r16
     212:	d1 83       	std	Z+1, r29	; 0x01
     214:	c0 83       	st	Z, r28
i2c_stop();
     216:	0e 94 2d 09 	call	0x125a	; 0x125a <i2c_stop>

//Read Z accel
i2c_start_wait((MPU6050_ADDRESS_AD0_LOW<<1) + I2C_WRITE);    // set device address and write mode
     21a:	80 ed       	ldi	r24, 0xD0	; 208
     21c:	0e 94 02 09 	call	0x1204	; 0x1204 <i2c_start_wait>
i2c_write(MPU6050_RA_ACCEL_ZOUT_H);                      // ACCEL_ZOUT
     220:	8f e3       	ldi	r24, 0x3F	; 63
     222:	0e 94 36 09 	call	0x126c	; 0x126c <i2c_write>
i2c_rep_start((MPU6050_ADDRESS_AD0_LOW<<1) + I2C_READ);      // set device address and read mode
     226:	81 ed       	ldi	r24, 0xD1	; 209
     228:	0e 94 2a 09 	call	0x1254	; 0x1254 <i2c_rep_start>
MPU6050.rawZaccel = i2c_readAck();               // read one intermediate byte
     22c:	0e 94 48 09 	call	0x1290	; 0x1290 <i2c_readAck>
     230:	c8 2f       	mov	r28, r24
     232:	d0 e0       	ldi	r29, 0x00	; 0
     234:	f8 01       	movw	r30, r16
     236:	d3 83       	std	Z+3, r29	; 0x03
     238:	c2 83       	std	Z+2, r28	; 0x02
MPU6050.rawZaccel = (MPU6050.rawZaccel<<8) | i2c_readNak(); // read last byte
     23a:	0e 94 53 09 	call	0x12a6	; 0x12a6 <i2c_readNak>
     23e:	dc 2f       	mov	r29, r28
     240:	cc 27       	eor	r28, r28
     242:	c8 2b       	or	r28, r24
     244:	f8 01       	movw	r30, r16
     246:	d3 83       	std	Z+3, r29	; 0x03
     248:	c2 83       	std	Z+2, r28	; 0x02
i2c_stop();
     24a:	0e 94 2d 09 	call	0x125a	; 0x125a <i2c_stop>


//Read Y gyro

i2c_start_wait((MPU6050_ADDRESS_AD0_LOW<<1) + I2C_WRITE);    // set device address and write mode
     24e:	80 ed       	ldi	r24, 0xD0	; 208
     250:	0e 94 02 09 	call	0x1204	; 0x1204 <i2c_start_wait>
i2c_write(MPU6050_RA_GYRO_YOUT_H);                      // GYRO_YOUT
     254:	85 e4       	ldi	r24, 0x45	; 69
     256:	0e 94 36 09 	call	0x126c	; 0x126c <i2c_write>
i2c_rep_start((MPU6050_ADDRESS_AD0_LOW<<1) + I2C_READ);      // set device address and read mode
     25a:	81 ed       	ldi	r24, 0xD1	; 209
     25c:	0e 94 2a 09 	call	0x1254	; 0x1254 <i2c_rep_start>
MPU6050.rawYGyro = i2c_readAck();               // read one intermediate byte
     260:	0e 94 48 09 	call	0x1290	; 0x1290 <i2c_readAck>
     264:	c8 2f       	mov	r28, r24
     266:	d0 e0       	ldi	r29, 0x00	; 0
     268:	f8 01       	movw	r30, r16
     26a:	d5 83       	std	Z+5, r29	; 0x05
     26c:	c4 83       	std	Z+4, r28	; 0x04
MPU6050.rawYGyro = (MPU6050.rawYGyro<<8) | i2c_readNak(); // read last byte
     26e:	0e 94 53 09 	call	0x12a6	; 0x12a6 <i2c_readNak>
     272:	dc 2f       	mov	r29, r28
     274:	cc 27       	eor	r28, r28
     276:	c8 2b       	or	r28, r24
     278:	f8 01       	movw	r30, r16
     27a:	d5 83       	std	Z+5, r29	; 0x05
     27c:	c4 83       	std	Z+4, r28	; 0x04
i2c_stop();
     27e:	0e 94 2d 09 	call	0x125a	; 0x125a <i2c_stop>
}
     282:	df 91       	pop	r29
     284:	cf 91       	pop	r28
     286:	1f 91       	pop	r17
     288:	0f 91       	pop	r16
     28a:	08 95       	ret

0000028c <ConvertSensorVals>:

//Convert Sensor Values//Convert Sensor Values
void ConvertSensorVals(){
     28c:	4f 92       	push	r4
     28e:	5f 92       	push	r5
     290:	6f 92       	push	r6
     292:	7f 92       	push	r7
     294:	8f 92       	push	r8
     296:	9f 92       	push	r9
     298:	af 92       	push	r10
     29a:	bf 92       	push	r11
     29c:	cf 92       	push	r12
     29e:	df 92       	push	r13
     2a0:	ef 92       	push	r14
     2a2:	ff 92       	push	r15
     2a4:	cf 93       	push	r28
     2a6:	df 93       	push	r29
	float RAD_TO_DEG = 180.0 / M_PI;
	
	MPU6050.Xaccel = (((int16_t) MPU6050.rawXaccel) / 32767.0) * 4.0;
     2a8:	cc e2       	ldi	r28, 0x2C	; 44
     2aa:	d1 e0       	ldi	r29, 0x01	; 1
     2ac:	68 81       	ld	r22, Y
     2ae:	79 81       	ldd	r23, Y+1	; 0x01
     2b0:	07 2e       	mov	r0, r23
     2b2:	00 0c       	add	r0, r0
     2b4:	88 0b       	sbc	r24, r24
     2b6:	99 0b       	sbc	r25, r25
     2b8:	0e 94 b6 0a 	call	0x156c	; 0x156c <__floatsisf>
     2bc:	20 e0       	ldi	r18, 0x00	; 0
     2be:	3e ef       	ldi	r19, 0xFE	; 254
     2c0:	4f ef       	ldi	r20, 0xFF	; 255
     2c2:	56 e4       	ldi	r21, 0x46	; 70
     2c4:	0e 94 42 0a 	call	0x1484	; 0x1484 <__divsf3>
     2c8:	20 e0       	ldi	r18, 0x00	; 0
     2ca:	30 e0       	ldi	r19, 0x00	; 0
     2cc:	40 e8       	ldi	r20, 0x80	; 128
     2ce:	50 e4       	ldi	r21, 0x40	; 64
     2d0:	0e 94 95 0b 	call	0x172a	; 0x172a <__mulsf3>
     2d4:	6b 01       	movw	r12, r22
     2d6:	7c 01       	movw	r14, r24
     2d8:	6e 83       	std	Y+6, r22	; 0x06
     2da:	7f 83       	std	Y+7, r23	; 0x07
     2dc:	88 87       	std	Y+8, r24	; 0x08
     2de:	99 87       	std	Y+9, r25	; 0x09
	MPU6050.Zaccel = (((int16_t) MPU6050.rawZaccel) / 32767.0) * 4.0;
     2e0:	6a 81       	ldd	r22, Y+2	; 0x02
     2e2:	7b 81       	ldd	r23, Y+3	; 0x03
     2e4:	07 2e       	mov	r0, r23
     2e6:	00 0c       	add	r0, r0
     2e8:	88 0b       	sbc	r24, r24
     2ea:	99 0b       	sbc	r25, r25
     2ec:	0e 94 b6 0a 	call	0x156c	; 0x156c <__floatsisf>
     2f0:	20 e0       	ldi	r18, 0x00	; 0
     2f2:	3e ef       	ldi	r19, 0xFE	; 254
     2f4:	4f ef       	ldi	r20, 0xFF	; 255
     2f6:	56 e4       	ldi	r21, 0x46	; 70
     2f8:	0e 94 42 0a 	call	0x1484	; 0x1484 <__divsf3>
     2fc:	20 e0       	ldi	r18, 0x00	; 0
     2fe:	30 e0       	ldi	r19, 0x00	; 0
     300:	40 e8       	ldi	r20, 0x80	; 128
     302:	50 e4       	ldi	r21, 0x40	; 64
     304:	0e 94 95 0b 	call	0x172a	; 0x172a <__mulsf3>
     308:	4b 01       	movw	r8, r22
     30a:	5c 01       	movw	r10, r24
     30c:	6a 87       	std	Y+10, r22	; 0x0a
     30e:	7b 87       	std	Y+11, r23	; 0x0b
     310:	8c 87       	std	Y+12, r24	; 0x0c
     312:	9d 87       	std	Y+13, r25	; 0x0d
	
	MPU6050.YGyro = (((int16_t) MPU6050.rawYGyro) / 32767.0) * 1000.0;
     314:	6c 81       	ldd	r22, Y+4	; 0x04
     316:	7d 81       	ldd	r23, Y+5	; 0x05
     318:	07 2e       	mov	r0, r23
     31a:	00 0c       	add	r0, r0
     31c:	88 0b       	sbc	r24, r24
     31e:	99 0b       	sbc	r25, r25
     320:	0e 94 b6 0a 	call	0x156c	; 0x156c <__floatsisf>
     324:	20 e0       	ldi	r18, 0x00	; 0
     326:	3e ef       	ldi	r19, 0xFE	; 254
     328:	4f ef       	ldi	r20, 0xFF	; 255
     32a:	56 e4       	ldi	r21, 0x46	; 70
     32c:	0e 94 42 0a 	call	0x1484	; 0x1484 <__divsf3>
     330:	20 e0       	ldi	r18, 0x00	; 0
     332:	30 e0       	ldi	r19, 0x00	; 0
     334:	4a e7       	ldi	r20, 0x7A	; 122
     336:	54 e4       	ldi	r21, 0x44	; 68
     338:	0e 94 95 0b 	call	0x172a	; 0x172a <__mulsf3>
     33c:	6e 87       	std	Y+14, r22	; 0x0e
     33e:	7f 87       	std	Y+15, r23	; 0x0f
     340:	88 8b       	std	Y+16, r24	; 0x10
     342:	99 8b       	std	Y+17, r25	; 0x11
	MPU6050.GyroTheta = MPU6050.YGyro * (1.0 / RAD_TO_DEG) * MPU6050.dt;
     344:	26 e3       	ldi	r18, 0x36	; 54
     346:	3a ef       	ldi	r19, 0xFA	; 250
     348:	4e e8       	ldi	r20, 0x8E	; 142
     34a:	5c e3       	ldi	r21, 0x3C	; 60
     34c:	0e 94 95 0b 	call	0x172a	; 0x172a <__mulsf3>
     350:	2e 8d       	ldd	r18, Y+30	; 0x1e
     352:	3f 8d       	ldd	r19, Y+31	; 0x1f
     354:	48 a1       	ldd	r20, Y+32	; 0x20
     356:	59 a1       	ldd	r21, Y+33	; 0x21
     358:	0e 94 95 0b 	call	0x172a	; 0x172a <__mulsf3>
     35c:	2b 01       	movw	r4, r22
     35e:	3c 01       	movw	r6, r24
     360:	6a 8f       	std	Y+26, r22	; 0x1a
     362:	7b 8f       	std	Y+27, r23	; 0x1b
     364:	8c 8f       	std	Y+28, r24	; 0x1c
     366:	9d 8f       	std	Y+29, r25	; 0x1d
	
	MPU6050.theta = atan2((double) MPU6050.Xaccel, (double) MPU6050.Zaccel);
     368:	a5 01       	movw	r20, r10
     36a:	94 01       	movw	r18, r8
     36c:	c7 01       	movw	r24, r14
     36e:	b6 01       	movw	r22, r12
     370:	0e 94 de 09 	call	0x13bc	; 0x13bc <atan2>
     374:	6b 01       	movw	r12, r22
     376:	7c 01       	movw	r14, r24
     378:	6a 8b       	std	Y+18, r22	; 0x12
     37a:	7b 8b       	std	Y+19, r23	; 0x13
     37c:	8c 8b       	std	Y+20, r24	; 0x14
     37e:	9d 8b       	std	Y+21, r25	; 0x15
	
	MPU6050.CurrentTheta = (MPU6050.alpha * (MPU6050.PreviousTheta + MPU6050.GyroTheta )) + ((1 - MPU6050.alpha)*(MPU6050.theta));
     380:	8a a0       	ldd	r8, Y+34	; 0x22
     382:	9b a0       	ldd	r9, Y+35	; 0x23
     384:	ac a0       	ldd	r10, Y+36	; 0x24
     386:	bd a0       	ldd	r11, Y+37	; 0x25
     388:	2e 89       	ldd	r18, Y+22	; 0x16
     38a:	3f 89       	ldd	r19, Y+23	; 0x17
     38c:	48 8d       	ldd	r20, Y+24	; 0x18
     38e:	59 8d       	ldd	r21, Y+25	; 0x19
     390:	c3 01       	movw	r24, r6
     392:	b2 01       	movw	r22, r4
     394:	0e 94 5f 09 	call	0x12be	; 0x12be <__addsf3>
     398:	a5 01       	movw	r20, r10
     39a:	94 01       	movw	r18, r8
     39c:	0e 94 95 0b 	call	0x172a	; 0x172a <__mulsf3>
     3a0:	2b 01       	movw	r4, r22
     3a2:	3c 01       	movw	r6, r24
     3a4:	a5 01       	movw	r20, r10
     3a6:	94 01       	movw	r18, r8
     3a8:	60 e0       	ldi	r22, 0x00	; 0
     3aa:	70 e0       	ldi	r23, 0x00	; 0
     3ac:	80 e8       	ldi	r24, 0x80	; 128
     3ae:	9f e3       	ldi	r25, 0x3F	; 63
     3b0:	0e 94 5e 09 	call	0x12bc	; 0x12bc <__subsf3>
     3b4:	a7 01       	movw	r20, r14
     3b6:	96 01       	movw	r18, r12
     3b8:	0e 94 95 0b 	call	0x172a	; 0x172a <__mulsf3>
     3bc:	9b 01       	movw	r18, r22
     3be:	ac 01       	movw	r20, r24
     3c0:	c3 01       	movw	r24, r6
     3c2:	b2 01       	movw	r22, r4
     3c4:	0e 94 5f 09 	call	0x12be	; 0x12be <__addsf3>
     3c8:	6a a7       	std	Y+42, r22	; 0x2a
     3ca:	7b a7       	std	Y+43, r23	; 0x2b
     3cc:	8c a7       	std	Y+44, r24	; 0x2c
     3ce:	9d a7       	std	Y+45, r25	; 0x2d
     3d0:	df 91       	pop	r29
     3d2:	cf 91       	pop	r28
     3d4:	ff 90       	pop	r15
     3d6:	ef 90       	pop	r14
     3d8:	df 90       	pop	r13
     3da:	cf 90       	pop	r12
     3dc:	bf 90       	pop	r11
     3de:	af 90       	pop	r10
     3e0:	9f 90       	pop	r9
     3e2:	8f 90       	pop	r8
     3e4:	7f 90       	pop	r7
     3e6:	6f 90       	pop	r6
     3e8:	5f 90       	pop	r5
     3ea:	4f 90       	pop	r4
     3ec:	08 95       	ret

000003ee <Task_Balance>:
}


// **********Task functions********** 

void Task_Balance(){
     3ee:	af 92       	push	r10
     3f0:	bf 92       	push	r11
     3f2:	cf 92       	push	r12
     3f4:	df 92       	push	r13
     3f6:	ef 92       	push	r14
     3f8:	ff 92       	push	r15
     3fa:	0f 93       	push	r16
     3fc:	1f 93       	push	r17
     3fe:	cf 93       	push	r28
     400:	df 93       	push	r29
	
	
	
	
	// Take Measurement
	I2C_ReadSensorVals();
     402:	0e 94 ed 00 	call	0x1da	; 0x1da <I2C_ReadSensorVals>
	ConvertSensorVals();
     406:	0e 94 46 01 	call	0x28c	; 0x28c <ConvertSensorVals>
	BalanceBot.y[0][0] = MPU6050.CurrentTheta + M_PI;//took away pi
     40a:	ce e5       	ldi	r28, 0x5E	; 94
     40c:	d1 e0       	ldi	r29, 0x01	; 1
     40e:	ea 89       	ldd	r30, Y+18	; 0x12
     410:	fb 89       	ldd	r31, Y+19	; 0x13
     412:	a0 80       	ld	r10, Z
     414:	b1 80       	ldd	r11, Z+1	; 0x01
     416:	0f 2e       	mov	r0, r31
     418:	fc e2       	ldi	r31, 0x2C	; 44
     41a:	cf 2e       	mov	r12, r31
     41c:	f1 e0       	ldi	r31, 0x01	; 1
     41e:	df 2e       	mov	r13, r31
     420:	f0 2d       	mov	r31, r0
     422:	2b ed       	ldi	r18, 0xDB	; 219
     424:	3f e0       	ldi	r19, 0x0F	; 15
     426:	49 e4       	ldi	r20, 0x49	; 73
     428:	50 e4       	ldi	r21, 0x40	; 64
     42a:	f6 01       	movw	r30, r12
     42c:	62 a5       	ldd	r22, Z+42	; 0x2a
     42e:	73 a5       	ldd	r23, Z+43	; 0x2b
     430:	84 a5       	ldd	r24, Z+44	; 0x2c
     432:	95 a5       	ldd	r25, Z+45	; 0x2d
     434:	0e 94 5f 09 	call	0x12be	; 0x12be <__addsf3>
     438:	f5 01       	movw	r30, r10
     43a:	60 83       	st	Z, r22
     43c:	71 83       	std	Z+1, r23	; 0x01
     43e:	82 83       	std	Z+2, r24	; 0x02
     440:	93 83       	std	Z+3, r25	; 0x03
	
	// Estimate States
	//x_est = Ad * x_est + Bd * ulast
	BalanceBot.x_est = add( multiply(BalanceBot.Ad, BalanceBot.x_est, 3,3,3,1), multiply(BalanceBot.Bd, BalanceBot.uLast,3,1,1,1) ,3,1);
     442:	6e 81       	ldd	r22, Y+6	; 0x06
     444:	7f 81       	ldd	r23, Y+7	; 0x07
     446:	ee 24       	eor	r14, r14
     448:	e3 94       	inc	r14
     44a:	f1 2c       	mov	r15, r1
     44c:	01 e0       	ldi	r16, 0x01	; 1
     44e:	10 e0       	ldi	r17, 0x00	; 0
     450:	21 e0       	ldi	r18, 0x01	; 1
     452:	30 e0       	ldi	r19, 0x00	; 0
     454:	43 e0       	ldi	r20, 0x03	; 3
     456:	50 e0       	ldi	r21, 0x00	; 0
     458:	8e 85       	ldd	r24, Y+14	; 0x0e
     45a:	9f 85       	ldd	r25, Y+15	; 0x0f
     45c:	0e 94 32 06 	call	0xc64	; 0xc64 <multiply>
     460:	5c 01       	movw	r10, r24
     462:	68 85       	ldd	r22, Y+8	; 0x08
     464:	79 85       	ldd	r23, Y+9	; 0x09
     466:	03 e0       	ldi	r16, 0x03	; 3
     468:	10 e0       	ldi	r17, 0x00	; 0
     46a:	23 e0       	ldi	r18, 0x03	; 3
     46c:	30 e0       	ldi	r19, 0x00	; 0
     46e:	43 e0       	ldi	r20, 0x03	; 3
     470:	50 e0       	ldi	r21, 0x00	; 0
     472:	8c 85       	ldd	r24, Y+12	; 0x0c
     474:	9d 85       	ldd	r25, Y+13	; 0x0d
     476:	0e 94 32 06 	call	0xc64	; 0xc64 <multiply>
     47a:	21 e0       	ldi	r18, 0x01	; 1
     47c:	30 e0       	ldi	r19, 0x00	; 0
     47e:	43 e0       	ldi	r20, 0x03	; 3
     480:	50 e0       	ldi	r21, 0x00	; 0
     482:	b5 01       	movw	r22, r10
     484:	0e 94 3e 05 	call	0xa7c	; 0xa7c <add>
     488:	99 87       	std	Y+9, r25	; 0x09
     48a:	88 87       	std	Y+8, r24	; 0x08
	//y_est = C * x_est
	BalanceBot.y_est[0][0] = BalanceBot.x_est[0][1];
     48c:	ea 85       	ldd	r30, Y+10	; 0x0a
     48e:	fb 85       	ldd	r31, Y+11	; 0x0b
     490:	20 81       	ld	r18, Z
     492:	31 81       	ldd	r19, Z+1	; 0x01
     494:	fc 01       	movw	r30, r24
     496:	a0 81       	ld	r26, Z
     498:	b1 81       	ldd	r27, Z+1	; 0x01
     49a:	14 96       	adiw	r26, 0x04	; 4
     49c:	8d 91       	ld	r24, X+
     49e:	9d 91       	ld	r25, X+
     4a0:	0d 90       	ld	r0, X+
     4a2:	bc 91       	ld	r27, X
     4a4:	a0 2d       	mov	r26, r0
     4a6:	f9 01       	movw	r30, r18
     4a8:	80 83       	st	Z, r24
     4aa:	91 83       	std	Z+1, r25	; 0x01
     4ac:	a2 83       	std	Z+2, r26	; 0x02
     4ae:	b3 83       	std	Z+3, r27	; 0x03
	//measError = y - y_est
	BalanceBot.measError = subtract(BalanceBot.y, BalanceBot.y_est, 1,1);
     4b0:	6a 85       	ldd	r22, Y+10	; 0x0a
     4b2:	7b 85       	ldd	r23, Y+11	; 0x0b
     4b4:	21 e0       	ldi	r18, 0x01	; 1
     4b6:	30 e0       	ldi	r19, 0x00	; 0
     4b8:	41 e0       	ldi	r20, 0x01	; 1
     4ba:	50 e0       	ldi	r21, 0x00	; 0
     4bc:	8a 89       	ldd	r24, Y+18	; 0x12
     4be:	9b 89       	ldd	r25, Y+19	; 0x13
     4c0:	0e 94 b8 05 	call	0xb70	; 0xb70 <subtract>
     4c4:	99 8b       	std	Y+17, r25	; 0x11
     4c6:	88 8b       	std	Y+16, r24	; 0x10
	//x_est = x_est + L*measError
	BalanceBot.x_est = add(BalanceBot.x_est, multiply(BalanceBot.L, BalanceBot.measError, 3,1,1,1), 3,1);
     4c8:	01 e0       	ldi	r16, 0x01	; 1
     4ca:	10 e0       	ldi	r17, 0x00	; 0
     4cc:	21 e0       	ldi	r18, 0x01	; 1
     4ce:	30 e0       	ldi	r19, 0x00	; 0
     4d0:	43 e0       	ldi	r20, 0x03	; 3
     4d2:	50 e0       	ldi	r21, 0x00	; 0
     4d4:	bc 01       	movw	r22, r24
     4d6:	8a 81       	ldd	r24, Y+2	; 0x02
     4d8:	9b 81       	ldd	r25, Y+3	; 0x03
     4da:	0e 94 32 06 	call	0xc64	; 0xc64 <multiply>
     4de:	21 e0       	ldi	r18, 0x01	; 1
     4e0:	30 e0       	ldi	r19, 0x00	; 0
     4e2:	43 e0       	ldi	r20, 0x03	; 3
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	bc 01       	movw	r22, r24
     4e8:	88 85       	ldd	r24, Y+8	; 0x08
     4ea:	99 85       	ldd	r25, Y+9	; 0x09
     4ec:	0e 94 3e 05 	call	0xa7c	; 0xa7c <add>
     4f0:	99 87       	std	Y+9, r25	; 0x09
     4f2:	88 87       	std	Y+8, r24	; 0x08
	//Controller
	//xd = desired state
	//stateError = xd - x_est
	BalanceBot.stateError = subtract(BalanceBot.xd, BalanceBot.x_est, 3,1);
     4f4:	21 e0       	ldi	r18, 0x01	; 1
     4f6:	30 e0       	ldi	r19, 0x00	; 0
     4f8:	43 e0       	ldi	r20, 0x03	; 3
     4fa:	50 e0       	ldi	r21, 0x00	; 0
     4fc:	bc 01       	movw	r22, r24
     4fe:	8c 81       	ldd	r24, Y+4	; 0x04
     500:	9d 81       	ldd	r25, Y+5	; 0x05
     502:	0e 94 b8 05 	call	0xb70	; 0xb70 <subtract>
     506:	9d 8b       	std	Y+21, r25	; 0x15
     508:	8c 8b       	std	Y+20, r24	; 0x14
// 	BalanceBot.u = multiply(BalanceBot.K, BalanceBot.stateError, 1,3,3,1);
// 	//ulast = u
// 	BalanceBot.uLast = BalanceBot.u;
// 	/*uLast = 3;*/
// 	uint16_t pwm = ( BalanceBot.uLast[0][0] / 6.0) * 255;
	Motor_PWM_Left(200);
     50a:	88 ec       	ldi	r24, 0xC8	; 200
     50c:	90 e0       	ldi	r25, 0x00	; 0
     50e:	0e 94 11 07 	call	0xe22	; 0xe22 <Motor_PWM_Left>
	Motor_PWM_Right(200);
     512:	88 ec       	ldi	r24, 0xC8	; 200
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	0e 94 2f 07 	call	0xe5e	; 0xe5e <Motor_PWM_Right>
	Motor_PWM_Enable(true);	
     51a:	81 e0       	ldi	r24, 0x01	; 1
     51c:	0e 94 03 07 	call	0xe06	; 0xe06 <Motor_PWM_Enable>
	
	MPU6050.PreviousTheta = MPU6050.CurrentTheta;
     520:	f6 01       	movw	r30, r12
     522:	82 a5       	ldd	r24, Z+42	; 0x2a
     524:	93 a5       	ldd	r25, Z+43	; 0x2b
     526:	a4 a5       	ldd	r26, Z+44	; 0x2c
     528:	b5 a5       	ldd	r27, Z+45	; 0x2d
     52a:	86 8b       	std	Z+22, r24	; 0x16
     52c:	97 8b       	std	Z+23, r25	; 0x17
     52e:	a0 8f       	std	Z+24, r26	; 0x18
     530:	b1 8f       	std	Z+25, r27	; 0x19
	

	
	
	
}
     532:	df 91       	pop	r29
     534:	cf 91       	pop	r28
     536:	1f 91       	pop	r17
     538:	0f 91       	pop	r16
     53a:	ff 90       	pop	r15
     53c:	ef 90       	pop	r14
     53e:	df 90       	pop	r13
     540:	cf 90       	pop	r12
     542:	bf 90       	pop	r11
     544:	af 90       	pop	r10
     546:	08 95       	ret

00000548 <Task_Calibrate>:

void Task_Calibrate(){
     548:	8f 92       	push	r8
     54a:	9f 92       	push	r9
     54c:	af 92       	push	r10
     54e:	bf 92       	push	r11
     550:	cf 92       	push	r12
     552:	df 92       	push	r13
     554:	ef 92       	push	r14
     556:	ff 92       	push	r15
     558:	0f 93       	push	r16
     55a:	1f 93       	push	r17
     55c:	cf 93       	push	r28
     55e:	df 93       	push	r29
	
	

	I2C_ReadSensorVals();
     560:	0e 94 ed 00 	call	0x1da	; 0x1da <I2C_ReadSensorVals>
	ConvertSensorVals();
     564:	0e 94 46 01 	call	0x28c	; 0x28c <ConvertSensorVals>
	
	float AverageTheta = 0;
	int i = 1;
     568:	c1 e0       	ldi	r28, 0x01	; 1
     56a:	d0 e0       	ldi	r29, 0x00	; 0
	

	I2C_ReadSensorVals();
	ConvertSensorVals();
	
	float AverageTheta = 0;
     56c:	81 2c       	mov	r8, r1
     56e:	91 2c       	mov	r9, r1
     570:	54 01       	movw	r10, r8
	while (i < 1000)
	{
		I2C_ReadSensorVals();
		ConvertSensorVals();
		
		AverageTheta = (AverageTheta * (i - 1) + (MPU6050.CurrentTheta)) / i;
     572:	0c e2       	ldi	r16, 0x2C	; 44
     574:	11 e0       	ldi	r17, 0x01	; 1
	
	float AverageTheta = 0;
	int i = 1;
	while (i < 1000)
	{
		I2C_ReadSensorVals();
     576:	0e 94 ed 00 	call	0x1da	; 0x1da <I2C_ReadSensorVals>
		ConvertSensorVals();
     57a:	0e 94 46 01 	call	0x28c	; 0x28c <ConvertSensorVals>
		
		AverageTheta = (AverageTheta * (i - 1) + (MPU6050.CurrentTheta)) / i;
     57e:	f8 01       	movw	r30, r16
     580:	c2 a4       	ldd	r12, Z+42	; 0x2a
     582:	d3 a4       	ldd	r13, Z+43	; 0x2b
     584:	e4 a4       	ldd	r14, Z+44	; 0x2c
     586:	f5 a4       	ldd	r15, Z+45	; 0x2d
     588:	be 01       	movw	r22, r28
     58a:	61 50       	subi	r22, 0x01	; 1
     58c:	71 09       	sbc	r23, r1
     58e:	07 2e       	mov	r0, r23
     590:	00 0c       	add	r0, r0
     592:	88 0b       	sbc	r24, r24
     594:	99 0b       	sbc	r25, r25
     596:	0e 94 b6 0a 	call	0x156c	; 0x156c <__floatsisf>
     59a:	a5 01       	movw	r20, r10
     59c:	94 01       	movw	r18, r8
     59e:	0e 94 95 0b 	call	0x172a	; 0x172a <__mulsf3>
     5a2:	a7 01       	movw	r20, r14
     5a4:	96 01       	movw	r18, r12
     5a6:	0e 94 5f 09 	call	0x12be	; 0x12be <__addsf3>
     5aa:	4b 01       	movw	r8, r22
     5ac:	5c 01       	movw	r10, r24
     5ae:	be 01       	movw	r22, r28
     5b0:	0d 2e       	mov	r0, r29
     5b2:	00 0c       	add	r0, r0
     5b4:	88 0b       	sbc	r24, r24
     5b6:	99 0b       	sbc	r25, r25
     5b8:	0e 94 b6 0a 	call	0x156c	; 0x156c <__floatsisf>
     5bc:	9b 01       	movw	r18, r22
     5be:	ac 01       	movw	r20, r24
     5c0:	c5 01       	movw	r24, r10
     5c2:	b4 01       	movw	r22, r8
     5c4:	0e 94 42 0a 	call	0x1484	; 0x1484 <__divsf3>
     5c8:	4b 01       	movw	r8, r22
     5ca:	5c 01       	movw	r10, r24
		MPU6050.PreviousTheta = MPU6050.CurrentTheta;
     5cc:	f8 01       	movw	r30, r16
     5ce:	c6 8a       	std	Z+22, r12	; 0x16
     5d0:	d7 8a       	std	Z+23, r13	; 0x17
     5d2:	e0 8e       	std	Z+24, r14	; 0x18
     5d4:	f1 8e       	std	Z+25, r15	; 0x19
		i++;
     5d6:	21 96       	adiw	r28, 0x01	; 1
	I2C_ReadSensorVals();
	ConvertSensorVals();
	
	float AverageTheta = 0;
	int i = 1;
	while (i < 1000)
     5d8:	c8 3e       	cpi	r28, 0xE8	; 232
     5da:	f3 e0       	ldi	r31, 0x03	; 3
     5dc:	df 07       	cpc	r29, r31
     5de:	59 f6       	brne	.-106    	; 0x576 <Task_Calibrate+0x2e>

	float BalanceTheta = AverageTheta;
	


	Motor_PWM_Left(100);
     5e0:	84 e6       	ldi	r24, 0x64	; 100
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	0e 94 11 07 	call	0xe22	; 0xe22 <Motor_PWM_Left>
	Motor_PWM_Right(100);
     5e8:	84 e6       	ldi	r24, 0x64	; 100
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	0e 94 2f 07 	call	0xe5e	; 0xe5e <Motor_PWM_Right>
	Motor_PWM_Enable(true);
     5f0:	81 e0       	ldi	r24, 0x01	; 1
     5f2:	0e 94 03 07 	call	0xe06	; 0xe06 <Motor_PWM_Enable>
		
 	if(eeprom_is_ready()){
     5f6:	f9 99       	sbic	0x1f, 1	; 31
     5f8:	06 c0       	rjmp	.+12     	; 0x606 <Task_Calibrate+0xbe>
 	eeprom_update_float(&EEPROM_ADDRESS, BalanceTheta);
     5fa:	b5 01       	movw	r22, r10
     5fc:	a4 01       	movw	r20, r8
     5fe:	80 e0       	ldi	r24, 0x00	; 0
     600:	90 e0       	ldi	r25, 0x00	; 0
     602:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <eeprom_update_dword>
     606:	8f e3       	ldi	r24, 0x3F	; 63
     608:	9c e9       	ldi	r25, 0x9C	; 156
     60a:	01 97       	sbiw	r24, 0x01	; 1
     60c:	f1 f7       	brne	.-4      	; 0x60a <Task_Calibrate+0xc2>
     60e:	00 c0       	rjmp	.+0      	; 0x610 <Task_Calibrate+0xc8>
     610:	00 00       	nop
 	}
 	
		_delay_ms(10);
 	CalibratedBalancePoint = eeprom_read_float(&EEPROM_ADDRESS);
     612:	80 e0       	ldi	r24, 0x00	; 0
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <eeprom_read_dword>
     61a:	60 93 5a 01 	sts	0x015A, r22	; 0x80015a <CalibratedBalancePoint>
     61e:	70 93 5b 01 	sts	0x015B, r23	; 0x80015b <CalibratedBalancePoint+0x1>
     622:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <CalibratedBalancePoint+0x2>
     626:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <CalibratedBalancePoint+0x3>
 	
 
	
 	if ( fabs(CalibratedBalancePoint) < 1.72)
     62a:	9f 77       	andi	r25, 0x7F	; 127
     62c:	26 ef       	ldi	r18, 0xF6	; 246
     62e:	38 e2       	ldi	r19, 0x28	; 40
     630:	4c ed       	ldi	r20, 0xDC	; 220
     632:	5f e3       	ldi	r21, 0x3F	; 63
     634:	0e 94 3d 0a 	call	0x147a	; 0x147a <__cmpsf2>
     638:	88 23       	and	r24, r24
     63a:	1c f4       	brge	.+6      	; 0x642 <Task_Calibrate+0xfa>
 	{
 		Motor_PWM_Enable(false);
     63c:	80 e0       	ldi	r24, 0x00	; 0
     63e:	0e 94 03 07 	call	0xe06	; 0xe06 <Motor_PWM_Enable>
 	}
	

	
     642:	df 91       	pop	r29
     644:	cf 91       	pop	r28
     646:	1f 91       	pop	r17
     648:	0f 91       	pop	r16
     64a:	ff 90       	pop	r15
     64c:	ef 90       	pop	r14
     64e:	df 90       	pop	r13
     650:	cf 90       	pop	r12
     652:	bf 90       	pop	r11
     654:	af 90       	pop	r10
     656:	9f 90       	pop	r9
     658:	8f 90       	pop	r8
     65a:	08 95       	ret

0000065c <BalanceBotInit>:
	float** y;
	float** stateError;
	float** u;
	} BalanceBot;
	
void BalanceBotInit(){
     65c:	cf 92       	push	r12
     65e:	df 92       	push	r13
     660:	ef 92       	push	r14
     662:	ff 92       	push	r15
     664:	cf 93       	push	r28
     666:	df 93       	push	r29
	BalanceBot.K = allocate_matrix(1,3);
     668:	63 e0       	ldi	r22, 0x03	; 3
     66a:	70 e0       	ldi	r23, 0x00	; 0
     66c:	81 e0       	ldi	r24, 0x01	; 1
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	0e 94 11 05 	call	0xa22	; 0xa22 <allocate_matrix>
     674:	ce e5       	ldi	r28, 0x5E	; 94
     676:	d1 e0       	ldi	r29, 0x01	; 1
     678:	99 83       	std	Y+1, r25	; 0x01
     67a:	88 83       	st	Y, r24
	BalanceBot.K[0][0] = -10.0389432396441;
     67c:	dc 01       	movw	r26, r24
     67e:	ed 91       	ld	r30, X+
     680:	fc 91       	ld	r31, X
     682:	83 e8       	ldi	r24, 0x83	; 131
     684:	9f e9       	ldi	r25, 0x9F	; 159
     686:	a0 e2       	ldi	r26, 0x20	; 32
     688:	b1 ec       	ldi	r27, 0xC1	; 193
     68a:	80 83       	st	Z, r24
     68c:	91 83       	std	Z+1, r25	; 0x01
     68e:	a2 83       	std	Z+2, r26	; 0x02
     690:	b3 83       	std	Z+3, r27	; 0x03
	BalanceBot.K[0][1] = -78.5368489286044;
     692:	e8 81       	ld	r30, Y
     694:	f9 81       	ldd	r31, Y+1	; 0x01
     696:	a0 81       	ld	r26, Z
     698:	b1 81       	ldd	r27, Z+1	; 0x01
     69a:	4e ed       	ldi	r20, 0xDE	; 222
     69c:	52 e1       	ldi	r21, 0x12	; 18
     69e:	6d e9       	ldi	r22, 0x9D	; 157
     6a0:	72 ec       	ldi	r23, 0xC2	; 194
     6a2:	14 96       	adiw	r26, 0x04	; 4
     6a4:	4d 93       	st	X+, r20
     6a6:	5d 93       	st	X+, r21
     6a8:	6d 93       	st	X+, r22
     6aa:	7c 93       	st	X, r23
     6ac:	17 97       	sbiw	r26, 0x07	; 7
	BalanceBot.K[0][2] = -5.22263746115749;
     6ae:	01 90       	ld	r0, Z+
     6b0:	f0 81       	ld	r31, Z
     6b2:	e0 2d       	mov	r30, r0
     6b4:	89 ed       	ldi	r24, 0xD9	; 217
     6b6:	9f e1       	ldi	r25, 0x1F	; 31
     6b8:	a7 ea       	ldi	r26, 0xA7	; 167
     6ba:	b0 ec       	ldi	r27, 0xC0	; 192
     6bc:	80 87       	std	Z+8, r24	; 0x08
     6be:	91 87       	std	Z+9, r25	; 0x09
     6c0:	a2 87       	std	Z+10, r26	; 0x0a
     6c2:	b3 87       	std	Z+11, r27	; 0x0b
	BalanceBot.L = allocate_matrix(3,1);
     6c4:	61 e0       	ldi	r22, 0x01	; 1
     6c6:	70 e0       	ldi	r23, 0x00	; 0
     6c8:	83 e0       	ldi	r24, 0x03	; 3
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	0e 94 11 05 	call	0xa22	; 0xa22 <allocate_matrix>
     6d0:	9b 83       	std	Y+3, r25	; 0x03
     6d2:	8a 83       	std	Y+2, r24	; 0x02
	BalanceBot.L[0][0] = 0.0332983580509553;
     6d4:	dc 01       	movw	r26, r24
     6d6:	ed 91       	ld	r30, X+
     6d8:	fc 91       	ld	r31, X
     6da:	8c ed       	ldi	r24, 0xDC	; 220
     6dc:	93 e6       	ldi	r25, 0x63	; 99
     6de:	a8 e0       	ldi	r26, 0x08	; 8
     6e0:	bd e3       	ldi	r27, 0x3D	; 61
     6e2:	80 83       	st	Z, r24
     6e4:	91 83       	std	Z+1, r25	; 0x01
     6e6:	a2 83       	std	Z+2, r26	; 0x02
     6e8:	b3 83       	std	Z+3, r27	; 0x03
	BalanceBot.L[1][0] = 0.0477709335719864;
     6ea:	ea 81       	ldd	r30, Y+2	; 0x02
     6ec:	fb 81       	ldd	r31, Y+3	; 0x03
     6ee:	02 80       	ldd	r0, Z+2	; 0x02
     6f0:	f3 81       	ldd	r31, Z+3	; 0x03
     6f2:	e0 2d       	mov	r30, r0
     6f4:	84 e7       	ldi	r24, 0x74	; 116
     6f6:	9b ea       	ldi	r25, 0xAB	; 171
     6f8:	a3 e4       	ldi	r26, 0x43	; 67
     6fa:	bd e3       	ldi	r27, 0x3D	; 61
     6fc:	80 83       	st	Z, r24
     6fe:	91 83       	std	Z+1, r25	; 0x01
     700:	a2 83       	std	Z+2, r26	; 0x02
     702:	b3 83       	std	Z+3, r27	; 0x03
	BalanceBot.L[2][0] = 0.862378691970006;
     704:	ea 81       	ldd	r30, Y+2	; 0x02
     706:	fb 81       	ldd	r31, Y+3	; 0x03
     708:	04 80       	ldd	r0, Z+4	; 0x04
     70a:	f5 81       	ldd	r31, Z+5	; 0x05
     70c:	e0 2d       	mov	r30, r0
     70e:	8a ed       	ldi	r24, 0xDA	; 218
     710:	94 ec       	ldi	r25, 0xC4	; 196
     712:	ac e5       	ldi	r26, 0x5C	; 92
     714:	bf e3       	ldi	r27, 0x3F	; 63
     716:	80 83       	st	Z, r24
     718:	91 83       	std	Z+1, r25	; 0x01
     71a:	a2 83       	std	Z+2, r26	; 0x02
     71c:	b3 83       	std	Z+3, r27	; 0x03
	BalanceBot.xd = allocate_matrix(3,1);
     71e:	61 e0       	ldi	r22, 0x01	; 1
     720:	70 e0       	ldi	r23, 0x00	; 0
     722:	83 e0       	ldi	r24, 0x03	; 3
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	0e 94 11 05 	call	0xa22	; 0xa22 <allocate_matrix>
     72a:	9d 83       	std	Y+5, r25	; 0x05
     72c:	8c 83       	std	Y+4, r24	; 0x04
	BalanceBot.xd[0][0] = 0;
     72e:	dc 01       	movw	r26, r24
     730:	ed 91       	ld	r30, X+
     732:	fc 91       	ld	r31, X
     734:	10 82       	st	Z, r1
     736:	11 82       	std	Z+1, r1	; 0x01
     738:	12 82       	std	Z+2, r1	; 0x02
     73a:	13 82       	std	Z+3, r1	; 0x03
	BalanceBot.xd[1][0] = M_PI;
     73c:	ec 81       	ldd	r30, Y+4	; 0x04
     73e:	fd 81       	ldd	r31, Y+5	; 0x05
     740:	02 80       	ldd	r0, Z+2	; 0x02
     742:	f3 81       	ldd	r31, Z+3	; 0x03
     744:	e0 2d       	mov	r30, r0
     746:	0f 2e       	mov	r0, r31
     748:	fb ed       	ldi	r31, 0xDB	; 219
     74a:	cf 2e       	mov	r12, r31
     74c:	ff e0       	ldi	r31, 0x0F	; 15
     74e:	df 2e       	mov	r13, r31
     750:	f9 e4       	ldi	r31, 0x49	; 73
     752:	ef 2e       	mov	r14, r31
     754:	f0 e4       	ldi	r31, 0x40	; 64
     756:	ff 2e       	mov	r15, r31
     758:	f0 2d       	mov	r31, r0
     75a:	c0 82       	st	Z, r12
     75c:	d1 82       	std	Z+1, r13	; 0x01
     75e:	e2 82       	std	Z+2, r14	; 0x02
     760:	f3 82       	std	Z+3, r15	; 0x03
	BalanceBot.xd[2][0] = 0;
     762:	ec 81       	ldd	r30, Y+4	; 0x04
     764:	fd 81       	ldd	r31, Y+5	; 0x05
     766:	04 80       	ldd	r0, Z+4	; 0x04
     768:	f5 81       	ldd	r31, Z+5	; 0x05
     76a:	e0 2d       	mov	r30, r0
     76c:	10 82       	st	Z, r1
     76e:	11 82       	std	Z+1, r1	; 0x01
     770:	12 82       	std	Z+2, r1	; 0x02
     772:	13 82       	std	Z+3, r1	; 0x03
	BalanceBot.uLast = allocate_matrix(1,1);
     774:	61 e0       	ldi	r22, 0x01	; 1
     776:	70 e0       	ldi	r23, 0x00	; 0
     778:	81 e0       	ldi	r24, 0x01	; 1
     77a:	90 e0       	ldi	r25, 0x00	; 0
     77c:	0e 94 11 05 	call	0xa22	; 0xa22 <allocate_matrix>
     780:	9f 83       	std	Y+7, r25	; 0x07
     782:	8e 83       	std	Y+6, r24	; 0x06
	BalanceBot.uLast[0][0] = 0;
     784:	dc 01       	movw	r26, r24
     786:	ed 91       	ld	r30, X+
     788:	fc 91       	ld	r31, X
     78a:	10 82       	st	Z, r1
     78c:	11 82       	std	Z+1, r1	; 0x01
     78e:	12 82       	std	Z+2, r1	; 0x02
     790:	13 82       	std	Z+3, r1	; 0x03
	BalanceBot.measError = allocate_matrix(1,1);
     792:	61 e0       	ldi	r22, 0x01	; 1
     794:	70 e0       	ldi	r23, 0x00	; 0
     796:	81 e0       	ldi	r24, 0x01	; 1
     798:	90 e0       	ldi	r25, 0x00	; 0
     79a:	0e 94 11 05 	call	0xa22	; 0xa22 <allocate_matrix>
     79e:	99 8b       	std	Y+17, r25	; 0x11
     7a0:	88 8b       	std	Y+16, r24	; 0x10
	BalanceBot.measError[0][0] = 0;
     7a2:	dc 01       	movw	r26, r24
     7a4:	ed 91       	ld	r30, X+
     7a6:	fc 91       	ld	r31, X
     7a8:	10 82       	st	Z, r1
     7aa:	11 82       	std	Z+1, r1	; 0x01
     7ac:	12 82       	std	Z+2, r1	; 0x02
     7ae:	13 82       	std	Z+3, r1	; 0x03
	BalanceBot.x_est = allocate_matrix(3,1);
     7b0:	61 e0       	ldi	r22, 0x01	; 1
     7b2:	70 e0       	ldi	r23, 0x00	; 0
     7b4:	83 e0       	ldi	r24, 0x03	; 3
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	0e 94 11 05 	call	0xa22	; 0xa22 <allocate_matrix>
     7bc:	99 87       	std	Y+9, r25	; 0x09
     7be:	88 87       	std	Y+8, r24	; 0x08
	BalanceBot.x_est[0][0] = 0;
     7c0:	dc 01       	movw	r26, r24
     7c2:	ed 91       	ld	r30, X+
     7c4:	fc 91       	ld	r31, X
     7c6:	10 82       	st	Z, r1
     7c8:	11 82       	std	Z+1, r1	; 0x01
     7ca:	12 82       	std	Z+2, r1	; 0x02
     7cc:	13 82       	std	Z+3, r1	; 0x03
	BalanceBot.x_est[1][0] = M_PI;
     7ce:	e8 85       	ldd	r30, Y+8	; 0x08
     7d0:	f9 85       	ldd	r31, Y+9	; 0x09
     7d2:	02 80       	ldd	r0, Z+2	; 0x02
     7d4:	f3 81       	ldd	r31, Z+3	; 0x03
     7d6:	e0 2d       	mov	r30, r0
     7d8:	c0 82       	st	Z, r12
     7da:	d1 82       	std	Z+1, r13	; 0x01
     7dc:	e2 82       	std	Z+2, r14	; 0x02
     7de:	f3 82       	std	Z+3, r15	; 0x03
	BalanceBot.x_est[2][0] = 0;
     7e0:	e8 85       	ldd	r30, Y+8	; 0x08
     7e2:	f9 85       	ldd	r31, Y+9	; 0x09
     7e4:	04 80       	ldd	r0, Z+4	; 0x04
     7e6:	f5 81       	ldd	r31, Z+5	; 0x05
     7e8:	e0 2d       	mov	r30, r0
     7ea:	10 82       	st	Z, r1
     7ec:	11 82       	std	Z+1, r1	; 0x01
     7ee:	12 82       	std	Z+2, r1	; 0x02
     7f0:	13 82       	std	Z+3, r1	; 0x03
	BalanceBot.y_est = allocate_matrix(1,1);
     7f2:	61 e0       	ldi	r22, 0x01	; 1
     7f4:	70 e0       	ldi	r23, 0x00	; 0
     7f6:	81 e0       	ldi	r24, 0x01	; 1
     7f8:	90 e0       	ldi	r25, 0x00	; 0
     7fa:	0e 94 11 05 	call	0xa22	; 0xa22 <allocate_matrix>
     7fe:	9b 87       	std	Y+11, r25	; 0x0b
     800:	8a 87       	std	Y+10, r24	; 0x0a
	BalanceBot.y_est[0][0] = M_PI;
     802:	dc 01       	movw	r26, r24
     804:	ed 91       	ld	r30, X+
     806:	fc 91       	ld	r31, X
     808:	c0 82       	st	Z, r12
     80a:	d1 82       	std	Z+1, r13	; 0x01
     80c:	e2 82       	std	Z+2, r14	; 0x02
     80e:	f3 82       	std	Z+3, r15	; 0x03
	BalanceBot.y = allocate_matrix(1,1);
     810:	61 e0       	ldi	r22, 0x01	; 1
     812:	70 e0       	ldi	r23, 0x00	; 0
     814:	81 e0       	ldi	r24, 0x01	; 1
     816:	90 e0       	ldi	r25, 0x00	; 0
     818:	0e 94 11 05 	call	0xa22	; 0xa22 <allocate_matrix>
     81c:	9b 8b       	std	Y+19, r25	; 0x13
     81e:	8a 8b       	std	Y+18, r24	; 0x12
	BalanceBot.y[0][0] = 0;
     820:	dc 01       	movw	r26, r24
     822:	ed 91       	ld	r30, X+
     824:	fc 91       	ld	r31, X
     826:	10 82       	st	Z, r1
     828:	11 82       	std	Z+1, r1	; 0x01
     82a:	12 82       	std	Z+2, r1	; 0x02
     82c:	13 82       	std	Z+3, r1	; 0x03
	BalanceBot.Ad = allocate_matrix(3,3);
     82e:	63 e0       	ldi	r22, 0x03	; 3
     830:	70 e0       	ldi	r23, 0x00	; 0
     832:	83 e0       	ldi	r24, 0x03	; 3
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	0e 94 11 05 	call	0xa22	; 0xa22 <allocate_matrix>
     83a:	9d 87       	std	Y+13, r25	; 0x0d
     83c:	8c 87       	std	Y+12, r24	; 0x0c
	BalanceBot.Ad[0][0] = 0.991982012478150;
     83e:	dc 01       	movw	r26, r24
     840:	ed 91       	ld	r30, X+
     842:	fc 91       	ld	r31, X
     844:	88 e8       	ldi	r24, 0x88	; 136
     846:	92 ef       	ldi	r25, 0xF2	; 242
     848:	ad e7       	ldi	r26, 0x7D	; 125
     84a:	bf e3       	ldi	r27, 0x3F	; 63
     84c:	80 83       	st	Z, r24
     84e:	91 83       	std	Z+1, r25	; 0x01
     850:	a2 83       	std	Z+2, r26	; 0x02
     852:	b3 83       	std	Z+3, r27	; 0x03
	BalanceBot.Ad[0][1] = 0.00509492179608207;
     854:	ec 85       	ldd	r30, Y+12	; 0x0c
     856:	fd 85       	ldd	r31, Y+13	; 0x0d
     858:	01 90       	ld	r0, Z+
     85a:	f0 81       	ld	r31, Z
     85c:	e0 2d       	mov	r30, r0
     85e:	8d e4       	ldi	r24, 0x4D	; 77
     860:	93 ef       	ldi	r25, 0xF3	; 243
     862:	a6 ea       	ldi	r26, 0xA6	; 166
     864:	bb e3       	ldi	r27, 0x3B	; 59
     866:	84 83       	std	Z+4, r24	; 0x04
     868:	95 83       	std	Z+5, r25	; 0x05
     86a:	a6 83       	std	Z+6, r26	; 0x06
     86c:	b7 83       	std	Z+7, r27	; 0x07
	BalanceBot.Ad[0][2] = 0.00000255083713775875;
     86e:	ec 85       	ldd	r30, Y+12	; 0x0c
     870:	fd 85       	ldd	r31, Y+13	; 0x0d
     872:	01 90       	ld	r0, Z+
     874:	f0 81       	ld	r31, Z
     876:	e0 2d       	mov	r30, r0
     878:	8c e0       	ldi	r24, 0x0C	; 12
     87a:	9f e2       	ldi	r25, 0x2F	; 47
     87c:	ab e2       	ldi	r26, 0x2B	; 43
     87e:	b6 e3       	ldi	r27, 0x36	; 54
     880:	80 87       	std	Z+8, r24	; 0x08
     882:	91 87       	std	Z+9, r25	; 0x09
     884:	a2 87       	std	Z+10, r26	; 0x0a
     886:	b3 87       	std	Z+11, r27	; 0x0b
	BalanceBot.Ad[1][0] = 0.0000223804723377318;
     888:	ec 85       	ldd	r30, Y+12	; 0x0c
     88a:	fd 85       	ldd	r31, Y+13	; 0x0d
     88c:	02 80       	ldd	r0, Z+2	; 0x02
     88e:	f3 81       	ldd	r31, Z+3	; 0x03
     890:	e0 2d       	mov	r30, r0
     892:	83 eb       	ldi	r24, 0xB3	; 179
     894:	9d eb       	ldi	r25, 0xBD	; 189
     896:	ab eb       	ldi	r26, 0xBB	; 187
     898:	b7 e3       	ldi	r27, 0x37	; 55
     89a:	80 83       	st	Z, r24
     89c:	91 83       	std	Z+1, r25	; 0x01
     89e:	a2 83       	std	Z+2, r26	; 0x02
     8a0:	b3 83       	std	Z+3, r27	; 0x03
	BalanceBot.Ad[1][1] = 1.00009790913983;
     8a2:	ec 85       	ldd	r30, Y+12	; 0x0c
     8a4:	fd 85       	ldd	r31, Y+13	; 0x0d
     8a6:	02 80       	ldd	r0, Z+2	; 0x02
     8a8:	f3 81       	ldd	r31, Z+3	; 0x03
     8aa:	e0 2d       	mov	r30, r0
     8ac:	85 e3       	ldi	r24, 0x35	; 53
     8ae:	93 e0       	ldi	r25, 0x03	; 3
     8b0:	a0 e8       	ldi	r26, 0x80	; 128
     8b2:	bf e3       	ldi	r27, 0x3F	; 63
     8b4:	84 83       	std	Z+4, r24	; 0x04
     8b6:	95 83       	std	Z+5, r25	; 0x05
     8b8:	a6 83       	std	Z+6, r26	; 0x06
     8ba:	b7 83       	std	Z+7, r27	; 0x07
	BalanceBot.Ad[1][2] = 0.00100003263298865;
     8bc:	ec 85       	ldd	r30, Y+12	; 0x0c
     8be:	fd 85       	ldd	r31, Y+13	; 0x0d
     8c0:	02 80       	ldd	r0, Z+2	; 0x02
     8c2:	f3 81       	ldd	r31, Z+3	; 0x03
     8c4:	e0 2d       	mov	r30, r0
     8c6:	47 e8       	ldi	r20, 0x87	; 135
     8c8:	53 e1       	ldi	r21, 0x13	; 19
     8ca:	63 e8       	ldi	r22, 0x83	; 131
     8cc:	7a e3       	ldi	r23, 0x3A	; 58
     8ce:	40 87       	std	Z+8, r20	; 0x08
     8d0:	51 87       	std	Z+9, r21	; 0x09
     8d2:	62 87       	std	Z+10, r22	; 0x0a
     8d4:	73 87       	std	Z+11, r23	; 0x0b
	BalanceBot.Ad[2][0] = 0.0447016999369507;
     8d6:	ec 85       	ldd	r30, Y+12	; 0x0c
     8d8:	fd 85       	ldd	r31, Y+13	; 0x0d
     8da:	04 80       	ldd	r0, Z+4	; 0x04
     8dc:	f5 81       	ldd	r31, Z+5	; 0x05
     8de:	e0 2d       	mov	r30, r0
     8e0:	41 e2       	ldi	r20, 0x21	; 33
     8e2:	59 e1       	ldi	r21, 0x19	; 25
     8e4:	67 e3       	ldi	r22, 0x37	; 55
     8e6:	7d e3       	ldi	r23, 0x3D	; 61
     8e8:	40 83       	st	Z, r20
     8ea:	51 83       	std	Z+1, r21	; 0x01
     8ec:	62 83       	std	Z+2, r22	; 0x02
     8ee:	73 83       	std	Z+3, r23	; 0x03
	BalanceBot.Ad[2][1] = 0.195859583825295;
     8f0:	ec 85       	ldd	r30, Y+12	; 0x0c
     8f2:	fd 85       	ldd	r31, Y+13	; 0x0d
     8f4:	04 80       	ldd	r0, Z+4	; 0x04
     8f6:	f5 81       	ldd	r31, Z+5	; 0x05
     8f8:	e0 2d       	mov	r30, r0
     8fa:	4a e6       	ldi	r20, 0x6A	; 106
     8fc:	5f e8       	ldi	r21, 0x8F	; 143
     8fe:	68 e4       	ldi	r22, 0x48	; 72
     900:	7e e3       	ldi	r23, 0x3E	; 62
     902:	44 83       	std	Z+4, r20	; 0x04
     904:	55 83       	std	Z+5, r21	; 0x05
     906:	66 83       	std	Z+6, r22	; 0x06
     908:	77 83       	std	Z+7, r23	; 0x07
	BalanceBot.Ad[2][2] = 1.00009790913983;
     90a:	ec 85       	ldd	r30, Y+12	; 0x0c
     90c:	fd 85       	ldd	r31, Y+13	; 0x0d
     90e:	04 80       	ldd	r0, Z+4	; 0x04
     910:	f5 81       	ldd	r31, Z+5	; 0x05
     912:	e0 2d       	mov	r30, r0
     914:	80 87       	std	Z+8, r24	; 0x08
     916:	91 87       	std	Z+9, r25	; 0x09
     918:	a2 87       	std	Z+10, r26	; 0x0a
     91a:	b3 87       	std	Z+11, r27	; 0x0b
	BalanceBot.Bd = allocate_matrix(3,1);
     91c:	61 e0       	ldi	r22, 0x01	; 1
     91e:	70 e0       	ldi	r23, 0x00	; 0
     920:	83 e0       	ldi	r24, 0x03	; 3
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	0e 94 11 05 	call	0xa22	; 0xa22 <allocate_matrix>
     928:	9f 87       	std	Y+15, r25	; 0x0f
     92a:	8e 87       	std	Y+14, r24	; 0x0e
	BalanceBot.Bd[0][0] = 0.000909862410824434;
     92c:	dc 01       	movw	r26, r24
     92e:	ed 91       	ld	r30, X+
     930:	fc 91       	ld	r31, X
     932:	85 ed       	ldi	r24, 0xD5	; 213
     934:	93 e8       	ldi	r25, 0x83	; 131
     936:	ae e6       	ldi	r26, 0x6E	; 110
     938:	ba e3       	ldi	r27, 0x3A	; 58
     93a:	80 83       	st	Z, r24
     93c:	91 83       	std	Z+1, r25	; 0x01
     93e:	a2 83       	std	Z+2, r26	; 0x02
     940:	b3 83       	std	Z+3, r27	; 0x03
	BalanceBot.Bd[1][0] = -0.00000253968348804726;
     942:	ee 85       	ldd	r30, Y+14	; 0x0e
     944:	ff 85       	ldd	r31, Y+15	; 0x0f
     946:	02 80       	ldd	r0, Z+2	; 0x02
     948:	f3 81       	ldd	r31, Z+3	; 0x03
     94a:	e0 2d       	mov	r30, r0
     94c:	8e e6       	ldi	r24, 0x6E	; 110
     94e:	9f e6       	ldi	r25, 0x6F	; 111
     950:	aa e2       	ldi	r26, 0x2A	; 42
     952:	b6 eb       	ldi	r27, 0xB6	; 182
     954:	80 83       	st	Z, r24
     956:	91 83       	std	Z+1, r25	; 0x01
     958:	a2 83       	std	Z+2, r26	; 0x02
     95a:	b3 83       	std	Z+3, r27	; 0x03
	BalanceBot.Bd[2][0] = -0.00507264402217493;
     95c:	ee 85       	ldd	r30, Y+14	; 0x0e
     95e:	ff 85       	ldd	r31, Y+15	; 0x0f
     960:	04 80       	ldd	r0, Z+4	; 0x04
     962:	f5 81       	ldd	r31, Z+5	; 0x05
     964:	e0 2d       	mov	r30, r0
     966:	8c e6       	ldi	r24, 0x6C	; 108
     968:	98 e3       	ldi	r25, 0x38	; 56
     96a:	a6 ea       	ldi	r26, 0xA6	; 166
     96c:	bb eb       	ldi	r27, 0xBB	; 187
     96e:	80 83       	st	Z, r24
     970:	91 83       	std	Z+1, r25	; 0x01
     972:	a2 83       	std	Z+2, r26	; 0x02
     974:	b3 83       	std	Z+3, r27	; 0x03
	BalanceBot.stateError = allocate_matrix(3,1);
     976:	61 e0       	ldi	r22, 0x01	; 1
     978:	70 e0       	ldi	r23, 0x00	; 0
     97a:	83 e0       	ldi	r24, 0x03	; 3
     97c:	90 e0       	ldi	r25, 0x00	; 0
     97e:	0e 94 11 05 	call	0xa22	; 0xa22 <allocate_matrix>
     982:	9d 8b       	std	Y+21, r25	; 0x15
     984:	8c 8b       	std	Y+20, r24	; 0x14
	BalanceBot.u = allocate_matrix(1,1);
     986:	61 e0       	ldi	r22, 0x01	; 1
     988:	70 e0       	ldi	r23, 0x00	; 0
     98a:	81 e0       	ldi	r24, 0x01	; 1
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	0e 94 11 05 	call	0xa22	; 0xa22 <allocate_matrix>
     992:	9f 8b       	std	Y+23, r25	; 0x17
     994:	8e 8b       	std	Y+22, r24	; 0x16
}
     996:	df 91       	pop	r29
     998:	cf 91       	pop	r28
     99a:	ff 90       	pop	r15
     99c:	ef 90       	pop	r14
     99e:	df 90       	pop	r13
     9a0:	cf 90       	pop	r12
     9a2:	08 95       	ret

000009a4 <InitializeModules>:
	.extended = 0b11110100,
};

void InitializeModules(){
	
	initialize_LED(DDRF, PORTF0);
     9a4:	80 9a       	sbi	0x10, 0	; 16
	initialize_LED(DDRF, PORTF1);
     9a6:	81 9a       	sbi	0x10, 1	; 16
	
	BalanceBotInit();
     9a8:	0e 94 2e 03 	call	0x65c	; 0x65c <BalanceBotInit>
	Initialize_Timing();		//Starts Timer 0, used to count millis/micros to keep track of tasks and other timing functions
     9ac:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <Initialize_Timing>
	Motor_PWM_Init();
     9b0:	0e 94 56 07 	call	0xeac	; 0xeac <Motor_PWM_Init>
	Initialize_Task(&task_Balance, MPU6050.dt, Task_Balance);
     9b4:	40 91 4a 01 	lds	r20, 0x014A	; 0x80014a <MPU6050+0x1e>
     9b8:	50 91 4b 01 	lds	r21, 0x014B	; 0x80014b <MPU6050+0x1f>
     9bc:	60 91 4c 01 	lds	r22, 0x014C	; 0x80014c <MPU6050+0x20>
     9c0:	70 91 4d 01 	lds	r23, 0x014D	; 0x80014d <MPU6050+0x21>
     9c4:	27 ef       	ldi	r18, 0xF7	; 247
     9c6:	31 e0       	ldi	r19, 0x01	; 1
     9c8:	85 e8       	ldi	r24, 0x85	; 133
     9ca:	91 e0       	ldi	r25, 0x01	; 1
     9cc:	0e 94 8f 07 	call	0xf1e	; 0xf1e <Initialize_Task>
	Initialize_Task(&task_Calibrate, -1, Task_Calibrate);
     9d0:	24 ea       	ldi	r18, 0xA4	; 164
     9d2:	32 e0       	ldi	r19, 0x02	; 2
     9d4:	40 e0       	ldi	r20, 0x00	; 0
     9d6:	50 e0       	ldi	r21, 0x00	; 0
     9d8:	60 e8       	ldi	r22, 0x80	; 128
     9da:	7f eb       	ldi	r23, 0xBF	; 191
     9dc:	86 e7       	ldi	r24, 0x76	; 118
     9de:	91 e0       	ldi	r25, 0x01	; 1
     9e0:	0e 94 8f 07 	call	0xf1e	; 0xf1e <Initialize_Task>
	Init_MPU6050();
     9e4:	0e 94 9e 00 	call	0x13c	; 0x13c <Init_MPU6050>
     9e8:	08 95       	ret

000009ea <main>:

int main(void)
{
	

	InitializeModules();
     9ea:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <InitializeModules>
	CalibratedBalancePoint = eeprom_read_float(&EEPROM_ADDRESS);
     9ee:	80 e0       	ldi	r24, 0x00	; 0
     9f0:	90 e0       	ldi	r25, 0x00	; 0
     9f2:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <eeprom_read_dword>
     9f6:	60 93 5a 01 	sts	0x015A, r22	; 0x80015a <CalibratedBalancePoint>
     9fa:	70 93 5b 01 	sts	0x015B, r23	; 0x80015b <CalibratedBalancePoint+0x1>
     9fe:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <CalibratedBalancePoint+0x2>
     a02:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <CalibratedBalancePoint+0x3>
	task_Balance.is_active = true;
     a06:	81 e0       	ldi	r24, 0x01	; 1
     a08:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <task_Balance>
	task_Calibrate.is_active = false;
     a0c:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <task_Calibrate>



while (1)
{
	Task_Run_If_Ready(&task_Balance);
     a10:	85 e8       	ldi	r24, 0x85	; 133
     a12:	91 e0       	ldi	r25, 0x01	; 1
     a14:	0e 94 bc 07 	call	0xf78	; 0xf78 <Task_Run_If_Ready>
	Task_Run_If_Ready(&task_Calibrate);	
     a18:	86 e7       	ldi	r24, 0x76	; 118
     a1a:	91 e0       	ldi	r25, 0x01	; 1
     a1c:	0e 94 bc 07 	call	0xf78	; 0xf78 <Task_Run_If_Ready>
     a20:	f7 cf       	rjmp	.-18     	; 0xa10 <main+0x26>

00000a22 <allocate_matrix>:
 *	rows: number of rows desired for the matrix
 *	columns: number of columns desired for the matrix
 *
 *	returns: An int** of size [rows][columns]
 */
float** allocate_matrix(int rows, int columns) {
     a22:	cf 92       	push	r12
     a24:	df 92       	push	r13
     a26:	ef 92       	push	r14
     a28:	ff 92       	push	r15
     a2a:	0f 93       	push	r16
     a2c:	1f 93       	push	r17
     a2e:	cf 93       	push	r28
     a30:	df 93       	push	r29
     a32:	ec 01       	movw	r28, r24
     a34:	7b 01       	movw	r14, r22
	float ** arr = (float **) malloc(rows * sizeof(float *));
     a36:	8c 01       	movw	r16, r24
     a38:	00 0f       	add	r16, r16
     a3a:	11 1f       	adc	r17, r17
     a3c:	c8 01       	movw	r24, r16
     a3e:	0e 94 06 0c 	call	0x180c	; 0x180c <malloc>
     a42:	6c 01       	movw	r12, r24
	for(int i = 0; i < rows; i++) {
     a44:	1c 16       	cp	r1, r28
     a46:	1d 06       	cpc	r1, r29
     a48:	7c f4       	brge	.+30     	; 0xa68 <allocate_matrix+0x46>
		arr[i] = (float *) malloc(columns * sizeof(float));	
     a4a:	ee 0c       	add	r14, r14
     a4c:	ff 1c       	adc	r15, r15
     a4e:	ee 0c       	add	r14, r14
     a50:	ff 1c       	adc	r15, r15
     a52:	ec 01       	movw	r28, r24
     a54:	08 0f       	add	r16, r24
     a56:	19 1f       	adc	r17, r25
     a58:	c7 01       	movw	r24, r14
     a5a:	0e 94 06 0c 	call	0x180c	; 0x180c <malloc>
     a5e:	89 93       	st	Y+, r24
     a60:	99 93       	st	Y+, r25
 *
 *	returns: An int** of size [rows][columns]
 */
float** allocate_matrix(int rows, int columns) {
	float ** arr = (float **) malloc(rows * sizeof(float *));
	for(int i = 0; i < rows; i++) {
     a62:	c0 17       	cp	r28, r16
     a64:	d1 07       	cpc	r29, r17
     a66:	c1 f7       	brne	.-16     	; 0xa58 <allocate_matrix+0x36>
		arr[i] = (float *) malloc(columns * sizeof(float));	
	}
	return arr;
}
     a68:	c6 01       	movw	r24, r12
     a6a:	df 91       	pop	r29
     a6c:	cf 91       	pop	r28
     a6e:	1f 91       	pop	r17
     a70:	0f 91       	pop	r16
     a72:	ff 90       	pop	r15
     a74:	ef 90       	pop	r14
     a76:	df 90       	pop	r13
     a78:	cf 90       	pop	r12
     a7a:	08 95       	ret

00000a7c <add>:
 *
 *	@return new_matrix 
 *	 The sum of the 2 input matrices
 */
float** add(float** matrix1, float** matrix2, int rows, int columns) 
{
     a7c:	2f 92       	push	r2
     a7e:	3f 92       	push	r3
     a80:	4f 92       	push	r4
     a82:	5f 92       	push	r5
     a84:	6f 92       	push	r6
     a86:	7f 92       	push	r7
     a88:	8f 92       	push	r8
     a8a:	9f 92       	push	r9
     a8c:	af 92       	push	r10
     a8e:	bf 92       	push	r11
     a90:	cf 92       	push	r12
     a92:	df 92       	push	r13
     a94:	ef 92       	push	r14
     a96:	ff 92       	push	r15
     a98:	0f 93       	push	r16
     a9a:	1f 93       	push	r17
     a9c:	cf 93       	push	r28
     a9e:	df 93       	push	r29
     aa0:	08 2f       	mov	r16, r24
     aa2:	19 2f       	mov	r17, r25
     aa4:	d6 2f       	mov	r29, r22
     aa6:	c7 2f       	mov	r28, r23
     aa8:	2a 01       	movw	r4, r20
     aaa:	39 01       	movw	r6, r18
	float** new_matrix = allocate_matrix(rows, columns);	
     aac:	b9 01       	movw	r22, r18
     aae:	ca 01       	movw	r24, r20
     ab0:	0e 94 11 05 	call	0xa22	; 0xa22 <allocate_matrix>
     ab4:	1c 01       	movw	r2, r24
	
	// Perform Add operation
	for(int i = 0; i < rows; i++) {
     ab6:	14 14       	cp	r1, r4
     ab8:	15 04       	cpc	r1, r5
     aba:	0c f0       	brlt	.+2      	; 0xabe <add+0x42>
     abc:	45 c0       	rjmp	.+138    	; 0xb48 <__stack+0x49>
     abe:	6c 01       	movw	r12, r24
     ac0:	80 2e       	mov	r8, r16
     ac2:	91 2e       	mov	r9, r17
     ac4:	ad 2e       	mov	r10, r29
     ac6:	bc 2e       	mov	r11, r28
     ac8:	44 0c       	add	r4, r4
     aca:	55 1c       	adc	r5, r5
     acc:	48 0e       	add	r4, r24
     ace:	59 1e       	adc	r5, r25
     ad0:	37 c0       	rjmp	.+110    	; 0xb40 <__stack+0x41>
		for(int j = 0; j < columns; j++) {
     ad2:	c0 e0       	ldi	r28, 0x00	; 0
     ad4:	d0 e0       	ldi	r29, 0x00	; 0
     ad6:	e1 2c       	mov	r14, r1
     ad8:	f1 2c       	mov	r15, r1
			new_matrix[i][j] = matrix1[i][j] + matrix2[i][j];
     ada:	d6 01       	movw	r26, r12
     adc:	0d 91       	ld	r16, X+
     ade:	1c 91       	ld	r17, X
     ae0:	0c 0f       	add	r16, r28
     ae2:	1d 1f       	adc	r17, r29
     ae4:	d4 01       	movw	r26, r8
     ae6:	ed 91       	ld	r30, X+
     ae8:	fc 91       	ld	r31, X
     aea:	cf 01       	movw	r24, r30
     aec:	8c 0f       	add	r24, r28
     aee:	9d 1f       	adc	r25, r29
     af0:	f5 01       	movw	r30, r10
     af2:	a0 81       	ld	r26, Z
     af4:	b1 81       	ldd	r27, Z+1	; 0x01
     af6:	ac 0f       	add	r26, r28
     af8:	bd 1f       	adc	r27, r29
     afa:	2d 91       	ld	r18, X+
     afc:	3d 91       	ld	r19, X+
     afe:	4d 91       	ld	r20, X+
     b00:	5c 91       	ld	r21, X
     b02:	dc 01       	movw	r26, r24
     b04:	6d 91       	ld	r22, X+
     b06:	7d 91       	ld	r23, X+
     b08:	8d 91       	ld	r24, X+
     b0a:	9c 91       	ld	r25, X
     b0c:	0e 94 5f 09 	call	0x12be	; 0x12be <__addsf3>
     b10:	f8 01       	movw	r30, r16
     b12:	60 83       	st	Z, r22
     b14:	71 83       	std	Z+1, r23	; 0x01
     b16:	82 83       	std	Z+2, r24	; 0x02
     b18:	93 83       	std	Z+3, r25	; 0x03
{
	float** new_matrix = allocate_matrix(rows, columns);	
	
	// Perform Add operation
	for(int i = 0; i < rows; i++) {
		for(int j = 0; j < columns; j++) {
     b1a:	ff ef       	ldi	r31, 0xFF	; 255
     b1c:	ef 1a       	sub	r14, r31
     b1e:	ff 0a       	sbc	r15, r31
     b20:	24 96       	adiw	r28, 0x04	; 4
     b22:	6e 14       	cp	r6, r14
     b24:	7f 04       	cpc	r7, r15
     b26:	c9 f6       	brne	.-78     	; 0xada <add+0x5e>
     b28:	82 e0       	ldi	r24, 0x02	; 2
     b2a:	c8 0e       	add	r12, r24
     b2c:	d1 1c       	adc	r13, r1
     b2e:	a2 e0       	ldi	r26, 0x02	; 2
     b30:	8a 0e       	add	r8, r26
     b32:	91 1c       	adc	r9, r1
     b34:	b2 e0       	ldi	r27, 0x02	; 2
     b36:	ab 0e       	add	r10, r27
     b38:	b1 1c       	adc	r11, r1
float** add(float** matrix1, float** matrix2, int rows, int columns) 
{
	float** new_matrix = allocate_matrix(rows, columns);	
	
	// Perform Add operation
	for(int i = 0; i < rows; i++) {
     b3a:	c4 14       	cp	r12, r4
     b3c:	d5 04       	cpc	r13, r5
     b3e:	21 f0       	breq	.+8      	; 0xb48 <__stack+0x49>
		for(int j = 0; j < columns; j++) {
     b40:	16 14       	cp	r1, r6
     b42:	17 04       	cpc	r1, r7
     b44:	34 f2       	brlt	.-116    	; 0xad2 <add+0x56>
     b46:	f0 cf       	rjmp	.-32     	; 0xb28 <__stack+0x29>
			new_matrix[i][j] = matrix1[i][j] + matrix2[i][j];
		}
	}
	return new_matrix;
}
     b48:	c1 01       	movw	r24, r2
     b4a:	df 91       	pop	r29
     b4c:	cf 91       	pop	r28
     b4e:	1f 91       	pop	r17
     b50:	0f 91       	pop	r16
     b52:	ff 90       	pop	r15
     b54:	ef 90       	pop	r14
     b56:	df 90       	pop	r13
     b58:	cf 90       	pop	r12
     b5a:	bf 90       	pop	r11
     b5c:	af 90       	pop	r10
     b5e:	9f 90       	pop	r9
     b60:	8f 90       	pop	r8
     b62:	7f 90       	pop	r7
     b64:	6f 90       	pop	r6
     b66:	5f 90       	pop	r5
     b68:	4f 90       	pop	r4
     b6a:	3f 90       	pop	r3
     b6c:	2f 90       	pop	r2
     b6e:	08 95       	ret

00000b70 <subtract>:
 *
 *	@return new_matrix 
 *	 The difference of the 2 input matrices
 */
float** subtract(float** matrix1, float** matrix2, int rows, int columns) 
{	
     b70:	2f 92       	push	r2
     b72:	3f 92       	push	r3
     b74:	4f 92       	push	r4
     b76:	5f 92       	push	r5
     b78:	6f 92       	push	r6
     b7a:	7f 92       	push	r7
     b7c:	8f 92       	push	r8
     b7e:	9f 92       	push	r9
     b80:	af 92       	push	r10
     b82:	bf 92       	push	r11
     b84:	cf 92       	push	r12
     b86:	df 92       	push	r13
     b88:	ef 92       	push	r14
     b8a:	ff 92       	push	r15
     b8c:	0f 93       	push	r16
     b8e:	1f 93       	push	r17
     b90:	cf 93       	push	r28
     b92:	df 93       	push	r29
     b94:	08 2f       	mov	r16, r24
     b96:	19 2f       	mov	r17, r25
     b98:	d6 2f       	mov	r29, r22
     b9a:	c7 2f       	mov	r28, r23
     b9c:	2a 01       	movw	r4, r20
     b9e:	39 01       	movw	r6, r18
	float** new_matrix = allocate_matrix(rows, columns);
     ba0:	b9 01       	movw	r22, r18
     ba2:	ca 01       	movw	r24, r20
     ba4:	0e 94 11 05 	call	0xa22	; 0xa22 <allocate_matrix>
     ba8:	1c 01       	movw	r2, r24
	
	// Perform SUB operation
	for(int i = 0; i < rows; i++) {
     baa:	14 14       	cp	r1, r4
     bac:	15 04       	cpc	r1, r5
     bae:	0c f0       	brlt	.+2      	; 0xbb2 <subtract+0x42>
     bb0:	45 c0       	rjmp	.+138    	; 0xc3c <subtract+0xcc>
     bb2:	6c 01       	movw	r12, r24
     bb4:	80 2e       	mov	r8, r16
     bb6:	91 2e       	mov	r9, r17
     bb8:	ad 2e       	mov	r10, r29
     bba:	bc 2e       	mov	r11, r28
     bbc:	44 0c       	add	r4, r4
     bbe:	55 1c       	adc	r5, r5
     bc0:	48 0e       	add	r4, r24
     bc2:	59 1e       	adc	r5, r25
     bc4:	37 c0       	rjmp	.+110    	; 0xc34 <subtract+0xc4>
		for(int j = 0; j < columns; j++) {
     bc6:	c0 e0       	ldi	r28, 0x00	; 0
     bc8:	d0 e0       	ldi	r29, 0x00	; 0
     bca:	e1 2c       	mov	r14, r1
     bcc:	f1 2c       	mov	r15, r1
			new_matrix[i][j] = matrix1[i][j] - matrix2[i][j];
     bce:	d6 01       	movw	r26, r12
     bd0:	0d 91       	ld	r16, X+
     bd2:	1c 91       	ld	r17, X
     bd4:	0c 0f       	add	r16, r28
     bd6:	1d 1f       	adc	r17, r29
     bd8:	d4 01       	movw	r26, r8
     bda:	ed 91       	ld	r30, X+
     bdc:	fc 91       	ld	r31, X
     bde:	cf 01       	movw	r24, r30
     be0:	8c 0f       	add	r24, r28
     be2:	9d 1f       	adc	r25, r29
     be4:	f5 01       	movw	r30, r10
     be6:	a0 81       	ld	r26, Z
     be8:	b1 81       	ldd	r27, Z+1	; 0x01
     bea:	ac 0f       	add	r26, r28
     bec:	bd 1f       	adc	r27, r29
     bee:	2d 91       	ld	r18, X+
     bf0:	3d 91       	ld	r19, X+
     bf2:	4d 91       	ld	r20, X+
     bf4:	5c 91       	ld	r21, X
     bf6:	dc 01       	movw	r26, r24
     bf8:	6d 91       	ld	r22, X+
     bfa:	7d 91       	ld	r23, X+
     bfc:	8d 91       	ld	r24, X+
     bfe:	9c 91       	ld	r25, X
     c00:	0e 94 5e 09 	call	0x12bc	; 0x12bc <__subsf3>
     c04:	f8 01       	movw	r30, r16
     c06:	60 83       	st	Z, r22
     c08:	71 83       	std	Z+1, r23	; 0x01
     c0a:	82 83       	std	Z+2, r24	; 0x02
     c0c:	93 83       	std	Z+3, r25	; 0x03
{	
	float** new_matrix = allocate_matrix(rows, columns);
	
	// Perform SUB operation
	for(int i = 0; i < rows; i++) {
		for(int j = 0; j < columns; j++) {
     c0e:	ff ef       	ldi	r31, 0xFF	; 255
     c10:	ef 1a       	sub	r14, r31
     c12:	ff 0a       	sbc	r15, r31
     c14:	24 96       	adiw	r28, 0x04	; 4
     c16:	6e 14       	cp	r6, r14
     c18:	7f 04       	cpc	r7, r15
     c1a:	c9 f6       	brne	.-78     	; 0xbce <subtract+0x5e>
     c1c:	82 e0       	ldi	r24, 0x02	; 2
     c1e:	c8 0e       	add	r12, r24
     c20:	d1 1c       	adc	r13, r1
     c22:	a2 e0       	ldi	r26, 0x02	; 2
     c24:	8a 0e       	add	r8, r26
     c26:	91 1c       	adc	r9, r1
     c28:	b2 e0       	ldi	r27, 0x02	; 2
     c2a:	ab 0e       	add	r10, r27
     c2c:	b1 1c       	adc	r11, r1
float** subtract(float** matrix1, float** matrix2, int rows, int columns) 
{	
	float** new_matrix = allocate_matrix(rows, columns);
	
	// Perform SUB operation
	for(int i = 0; i < rows; i++) {
     c2e:	c4 14       	cp	r12, r4
     c30:	d5 04       	cpc	r13, r5
     c32:	21 f0       	breq	.+8      	; 0xc3c <subtract+0xcc>
		for(int j = 0; j < columns; j++) {
     c34:	16 14       	cp	r1, r6
     c36:	17 04       	cpc	r1, r7
     c38:	34 f2       	brlt	.-116    	; 0xbc6 <subtract+0x56>
     c3a:	f0 cf       	rjmp	.-32     	; 0xc1c <subtract+0xac>
			new_matrix[i][j] = matrix1[i][j] - matrix2[i][j];
		}
	}	
	return new_matrix;
}
     c3c:	c1 01       	movw	r24, r2
     c3e:	df 91       	pop	r29
     c40:	cf 91       	pop	r28
     c42:	1f 91       	pop	r17
     c44:	0f 91       	pop	r16
     c46:	ff 90       	pop	r15
     c48:	ef 90       	pop	r14
     c4a:	df 90       	pop	r13
     c4c:	cf 90       	pop	r12
     c4e:	bf 90       	pop	r11
     c50:	af 90       	pop	r10
     c52:	9f 90       	pop	r9
     c54:	8f 90       	pop	r8
     c56:	7f 90       	pop	r7
     c58:	6f 90       	pop	r6
     c5a:	5f 90       	pop	r5
     c5c:	4f 90       	pop	r4
     c5e:	3f 90       	pop	r3
     c60:	2f 90       	pop	r2
     c62:	08 95       	ret

00000c64 <multiply>:
 *
 *	@return new_matrix 
 *	 The product of the 2 input matrices
 */
float** multiply(float** matrix1, float** matrix2, int rows1, int columns1, int rows2, int columns2) 
{	
     c64:	2f 92       	push	r2
     c66:	3f 92       	push	r3
     c68:	4f 92       	push	r4
     c6a:	5f 92       	push	r5
     c6c:	6f 92       	push	r6
     c6e:	7f 92       	push	r7
     c70:	8f 92       	push	r8
     c72:	9f 92       	push	r9
     c74:	af 92       	push	r10
     c76:	bf 92       	push	r11
     c78:	cf 92       	push	r12
     c7a:	df 92       	push	r13
     c7c:	ef 92       	push	r14
     c7e:	ff 92       	push	r15
     c80:	0f 93       	push	r16
     c82:	1f 93       	push	r17
     c84:	cf 93       	push	r28
     c86:	df 93       	push	r29
     c88:	cd b7       	in	r28, 0x3d	; 61
     c8a:	de b7       	in	r29, 0x3e	; 62
     c8c:	2c 97       	sbiw	r28, 0x0c	; 12
     c8e:	0f b6       	in	r0, 0x3f	; 63
     c90:	f8 94       	cli
     c92:	de bf       	out	0x3e, r29	; 62
     c94:	0f be       	out	0x3f, r0	; 63
     c96:	cd bf       	out	0x3d, r28	; 61
     c98:	c8 2e       	mov	r12, r24
     c9a:	d9 2e       	mov	r13, r25
     c9c:	7e 83       	std	Y+6, r23	; 0x06
     c9e:	6d 83       	std	Y+5, r22	; 0x05
     ca0:	58 87       	std	Y+8, r21	; 0x08
     ca2:	4f 83       	std	Y+7, r20	; 0x07
     ca4:	29 01       	movw	r4, r18
     ca6:	17 01       	movw	r2, r14
	// Check for valid dimensions for multiplication
	if(columns1 != rows2) {
     ca8:	20 17       	cp	r18, r16
     caa:	31 07       	cpc	r19, r17
     cac:	51 f0       	breq	.+20     	; 0xcc2 <multiply+0x5e>
		printf("Invalid matrix dimensions");
     cae:	87 e0       	ldi	r24, 0x07	; 7
     cb0:	91 e0       	ldi	r25, 0x01	; 1
     cb2:	9f 93       	push	r25
     cb4:	8f 93       	push	r24
     cb6:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <printf>
		exit(1);
     cba:	81 e0       	ldi	r24, 0x01	; 1
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	0e 94 39 10 	call	0x2072	; 0x2072 <_exit>
	}

	// Allocate new array
	float** new_matrix = allocate_matrix(rows1, columns2);
     cc2:	b7 01       	movw	r22, r14
     cc4:	8f 81       	ldd	r24, Y+7	; 0x07
     cc6:	98 85       	ldd	r25, Y+8	; 0x08
     cc8:	0e 94 11 05 	call	0xa22	; 0xa22 <allocate_matrix>
     ccc:	9a 87       	std	Y+10, r25	; 0x0a
     cce:	89 87       	std	Y+9, r24	; 0x09
	
	float sum = 0;
	
	for(int i = 0; i < rows1; i++) {
     cd0:	2f 81       	ldd	r18, Y+7	; 0x07
     cd2:	38 85       	ldd	r19, Y+8	; 0x08
     cd4:	12 16       	cp	r1, r18
     cd6:	13 06       	cpc	r1, r19
     cd8:	0c f0       	brlt	.+2      	; 0xcdc <multiply+0x78>
     cda:	7a c0       	rjmp	.+244    	; 0xdd0 <multiply+0x16c>
     cdc:	9a 83       	std	Y+2, r25	; 0x02
     cde:	89 83       	std	Y+1, r24	; 0x01
     ce0:	cb 82       	std	Y+3, r12	; 0x03
     ce2:	dc 82       	std	Y+4, r13	; 0x04
     ce4:	22 0f       	add	r18, r18
     ce6:	33 1f       	adc	r19, r19
     ce8:	82 0f       	add	r24, r18
     cea:	93 1f       	adc	r25, r19
     cec:	98 87       	std	Y+8, r25	; 0x08
     cee:	8f 83       	std	Y+7, r24	; 0x07
     cf0:	52 01       	movw	r10, r4
     cf2:	aa 0c       	add	r10, r10
     cf4:	bb 1c       	adc	r11, r11
     cf6:	ad 81       	ldd	r26, Y+5	; 0x05
     cf8:	be 81       	ldd	r27, Y+6	; 0x06
     cfa:	aa 0e       	add	r10, r26
     cfc:	bb 1e       	adc	r11, r27
     cfe:	64 c0       	rjmp	.+200    	; 0xdc8 <multiply+0x164>
		for(int j = 0; j < columns2; j++) {
			sum = 0;
			for(int k = 0; k < columns1; k++) {
				sum = sum + (matrix1[i][k] * matrix2[k][j]);
     d00:	f7 01       	movw	r30, r14
     d02:	61 91       	ld	r22, Z+
     d04:	71 91       	ld	r23, Z+
     d06:	81 91       	ld	r24, Z+
     d08:	91 91       	ld	r25, Z+
     d0a:	7f 01       	movw	r14, r30
     d0c:	ab 85       	ldd	r26, Y+11	; 0x0b
     d0e:	bc 85       	ldd	r27, Y+12	; 0x0c
     d10:	ed 91       	ld	r30, X+
     d12:	fd 91       	ld	r31, X+
     d14:	bc 87       	std	Y+12, r27	; 0x0c
     d16:	ab 87       	std	Y+11, r26	; 0x0b
     d18:	e0 0f       	add	r30, r16
     d1a:	f1 1f       	adc	r31, r17
     d1c:	20 81       	ld	r18, Z
     d1e:	31 81       	ldd	r19, Z+1	; 0x01
     d20:	42 81       	ldd	r20, Z+2	; 0x02
     d22:	53 81       	ldd	r21, Z+3	; 0x03
     d24:	0e 94 95 0b 	call	0x172a	; 0x172a <__mulsf3>
     d28:	9b 01       	movw	r18, r22
     d2a:	ac 01       	movw	r20, r24
     d2c:	68 2d       	mov	r22, r8
     d2e:	79 2d       	mov	r23, r9
     d30:	8c 2d       	mov	r24, r12
     d32:	9d 2d       	mov	r25, r13
     d34:	0e 94 5f 09 	call	0x12be	; 0x12be <__addsf3>
     d38:	86 2e       	mov	r8, r22
     d3a:	97 2e       	mov	r9, r23
     d3c:	c8 2e       	mov	r12, r24
     d3e:	d9 2e       	mov	r13, r25
	float sum = 0;
	
	for(int i = 0; i < rows1; i++) {
		for(int j = 0; j < columns2; j++) {
			sum = 0;
			for(int k = 0; k < columns1; k++) {
     d40:	eb 85       	ldd	r30, Y+11	; 0x0b
     d42:	fc 85       	ldd	r31, Y+12	; 0x0c
     d44:	ae 16       	cp	r10, r30
     d46:	bf 06       	cpc	r11, r31
     d48:	d9 f6       	brne	.-74     	; 0xd00 <multiply+0x9c>
     d4a:	04 c0       	rjmp	.+8      	; 0xd54 <multiply+0xf0>
     d4c:	81 2c       	mov	r8, r1
     d4e:	91 2c       	mov	r9, r1
     d50:	c1 2c       	mov	r12, r1
     d52:	d1 2c       	mov	r13, r1
				sum = sum + (matrix1[i][k] * matrix2[k][j]);
			}
			new_matrix[i][j] = sum;
     d54:	a9 81       	ldd	r26, Y+1	; 0x01
     d56:	ba 81       	ldd	r27, Y+2	; 0x02
     d58:	ed 91       	ld	r30, X+
     d5a:	fc 91       	ld	r31, X
     d5c:	e0 0f       	add	r30, r16
     d5e:	f1 1f       	adc	r31, r17
     d60:	88 2d       	mov	r24, r8
     d62:	99 2d       	mov	r25, r9
     d64:	ac 2d       	mov	r26, r12
     d66:	bd 2d       	mov	r27, r13
     d68:	80 83       	st	Z, r24
     d6a:	91 83       	std	Z+1, r25	; 0x01
     d6c:	a2 83       	std	Z+2, r26	; 0x02
     d6e:	b3 83       	std	Z+3, r27	; 0x03
	float** new_matrix = allocate_matrix(rows1, columns2);
	
	float sum = 0;
	
	for(int i = 0; i < rows1; i++) {
		for(int j = 0; j < columns2; j++) {
     d70:	bf ef       	ldi	r27, 0xFF	; 255
     d72:	6b 1a       	sub	r6, r27
     d74:	7b 0a       	sbc	r7, r27
     d76:	0c 5f       	subi	r16, 0xFC	; 252
     d78:	1f 4f       	sbci	r17, 0xFF	; 255
     d7a:	26 14       	cp	r2, r6
     d7c:	37 04       	cpc	r3, r7
     d7e:	29 f4       	brne	.+10     	; 0xd8a <multiply+0x126>
     d80:	14 c0       	rjmp	.+40     	; 0xdaa <multiply+0x146>
     d82:	00 e0       	ldi	r16, 0x00	; 0
     d84:	10 e0       	ldi	r17, 0x00	; 0
     d86:	61 2c       	mov	r6, r1
     d88:	71 2c       	mov	r7, r1
			sum = 0;
			for(int k = 0; k < columns1; k++) {
     d8a:	14 14       	cp	r1, r4
     d8c:	15 04       	cpc	r1, r5
     d8e:	f4 f6       	brge	.-68     	; 0xd4c <multiply+0xe8>
     d90:	eb 81       	ldd	r30, Y+3	; 0x03
     d92:	fc 81       	ldd	r31, Y+4	; 0x04
     d94:	e0 80       	ld	r14, Z
     d96:	f1 80       	ldd	r15, Z+1	; 0x01
     d98:	2d 81       	ldd	r18, Y+5	; 0x05
     d9a:	3e 81       	ldd	r19, Y+6	; 0x06
				sum = sum + (matrix1[i][k] * matrix2[k][j]);
     d9c:	81 2c       	mov	r8, r1
     d9e:	91 2c       	mov	r9, r1
     da0:	c1 2c       	mov	r12, r1
     da2:	d1 2c       	mov	r13, r1
     da4:	3c 87       	std	Y+12, r19	; 0x0c
     da6:	2b 87       	std	Y+11, r18	; 0x0b
     da8:	ab cf       	rjmp	.-170    	; 0xd00 <multiply+0x9c>
     daa:	89 81       	ldd	r24, Y+1	; 0x01
     dac:	9a 81       	ldd	r25, Y+2	; 0x02
     dae:	02 96       	adiw	r24, 0x02	; 2
     db0:	9a 83       	std	Y+2, r25	; 0x02
     db2:	89 83       	std	Y+1, r24	; 0x01
     db4:	ab 81       	ldd	r26, Y+3	; 0x03
     db6:	bc 81       	ldd	r27, Y+4	; 0x04
     db8:	12 96       	adiw	r26, 0x02	; 2
     dba:	bc 83       	std	Y+4, r27	; 0x04
     dbc:	ab 83       	std	Y+3, r26	; 0x03
	// Allocate new array
	float** new_matrix = allocate_matrix(rows1, columns2);
	
	float sum = 0;
	
	for(int i = 0; i < rows1; i++) {
     dbe:	ef 81       	ldd	r30, Y+7	; 0x07
     dc0:	f8 85       	ldd	r31, Y+8	; 0x08
     dc2:	8e 17       	cp	r24, r30
     dc4:	9f 07       	cpc	r25, r31
     dc6:	21 f0       	breq	.+8      	; 0xdd0 <multiply+0x16c>
		for(int j = 0; j < columns2; j++) {
     dc8:	12 14       	cp	r1, r2
     dca:	13 04       	cpc	r1, r3
     dcc:	d4 f2       	brlt	.-76     	; 0xd82 <multiply+0x11e>
     dce:	ed cf       	rjmp	.-38     	; 0xdaa <multiply+0x146>
			}
			new_matrix[i][j] = sum;
		}
	}
	return new_matrix;
}
     dd0:	89 85       	ldd	r24, Y+9	; 0x09
     dd2:	9a 85       	ldd	r25, Y+10	; 0x0a
     dd4:	2c 96       	adiw	r28, 0x0c	; 12
     dd6:	0f b6       	in	r0, 0x3f	; 63
     dd8:	f8 94       	cli
     dda:	de bf       	out	0x3e, r29	; 62
     ddc:	0f be       	out	0x3f, r0	; 63
     dde:	cd bf       	out	0x3d, r28	; 61
     de0:	df 91       	pop	r29
     de2:	cf 91       	pop	r28
     de4:	1f 91       	pop	r17
     de6:	0f 91       	pop	r16
     de8:	ff 90       	pop	r15
     dea:	ef 90       	pop	r14
     dec:	df 90       	pop	r13
     dee:	cf 90       	pop	r12
     df0:	bf 90       	pop	r11
     df2:	af 90       	pop	r10
     df4:	9f 90       	pop	r9
     df6:	8f 90       	pop	r8
     df8:	7f 90       	pop	r7
     dfa:	6f 90       	pop	r6
     dfc:	5f 90       	pop	r5
     dfe:	4f 90       	pop	r4
     e00:	3f 90       	pop	r3
     e02:	2f 90       	pop	r2
     e04:	08 95       	ret

00000e06 <Motor_PWM_Enable>:
 * @param [bool] true if enabled, false if disabled
 */
bool Is_Motor_PWM_Enabled(){
    if(((DDRB & 0b01100000 ) == 0b01100000) && (DDRC & 0b10000000) && (DDRD & 0b10000000)){return true;}
    return false;
}
     e06:	88 23       	and	r24, r24
     e08:	31 f0       	breq	.+12     	; 0xe16 <Motor_PWM_Enable+0x10>
     e0a:	84 b1       	in	r24, 0x04	; 4
     e0c:	80 66       	ori	r24, 0x60	; 96
     e0e:	84 b9       	out	0x04, r24	; 4
     e10:	3f 9a       	sbi	0x07, 7	; 7
     e12:	57 9a       	sbi	0x0a, 7	; 10
     e14:	08 95       	ret
     e16:	84 b1       	in	r24, 0x04	; 4
     e18:	8f 79       	andi	r24, 0x9F	; 159
     e1a:	84 b9       	out	0x04, r24	; 4
     e1c:	3f 98       	cbi	0x07, 7	; 7
     e1e:	57 98       	cbi	0x0a, 7	; 10
     e20:	08 95       	ret

00000e22 <Motor_PWM_Left>:
 * Function Motor_PWM_Left sets the PWM duty cycle for the left motor.
 * @return [int32_t] The count number.
 */
void Motor_PWM_Left( int16_t pwm ){
	int16_t sign = pwm;
	pwm = abs(pwm);
     e22:	9c 01       	movw	r18, r24
     e24:	99 23       	and	r25, r25
     e26:	24 f4       	brge	.+8      	; 0xe30 <Motor_PWM_Left+0xe>
     e28:	22 27       	eor	r18, r18
     e2a:	33 27       	eor	r19, r19
     e2c:	28 1b       	sub	r18, r24
     e2e:	39 0b       	sbc	r19, r25
	
	if(pwm > MAX_PWM_COUNT){pwm = MAX_PWM_COUNT;}
     e30:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <MAX_PWM_COUNT>
     e34:	50 e0       	ldi	r21, 0x00	; 0
	union {
		uint16_t word;
		uint8_t arr[2];
	}WordToBytes;
	
	WordToBytes.word = pwm; // / ICR_Split.word;
     e36:	42 17       	cp	r20, r18
     e38:	53 07       	cpc	r21, r19
     e3a:	0c f4       	brge	.+2      	; 0xe3e <Motor_PWM_Left+0x1c>
     e3c:	9a 01       	movw	r18, r20
	
	//if (WordToBytes.arr[0] != 200){WordToBytes.word = 100;}

    if(sign < 0){
     e3e:	99 23       	and	r25, r25
     e40:	3c f4       	brge	.+14     	; 0xe50 <Motor_PWM_Left+0x2e>
		
        OCR4A = WordToBytes.arr[0];
     e42:	20 93 cf 00 	sts	0x00CF, r18	; 0x8000cf <__DATA_REGION_ORIGIN__+0x6f>
		//if(OCR4A == 200){LED_ON(DDRF, PORTF0);}
		OCR1AH = 0;
     e46:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
		OCR1AL = 0;
     e4a:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
     e4e:	08 95       	ret
    }else{
		
        OCR4A = 0;
     e50:	10 92 cf 00 	sts	0x00CF, r1	; 0x8000cf <__DATA_REGION_ORIGIN__+0x6f>
        OCR1AH = 0;
     e54:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
        OCR1AL = WordToBytes.arr[0];
     e58:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
     e5c:	08 95       	ret

00000e5e <Motor_PWM_Right>:
 * Function Motor_PWM_Right sets the PWM duty cycle for the right motor.
 * @return [int32_t] The count number.
 */
void Motor_PWM_Right( int16_t pwm ){
	int16_t sign = pwm;
	pwm = abs(pwm);
     e5e:	9c 01       	movw	r18, r24
     e60:	99 23       	and	r25, r25
     e62:	24 f4       	brge	.+8      	; 0xe6c <Motor_PWM_Right+0xe>
     e64:	22 27       	eor	r18, r18
     e66:	33 27       	eor	r19, r19
     e68:	28 1b       	sub	r18, r24
     e6a:	39 0b       	sbc	r19, r25
	
	if(pwm>MAX_PWM_COUNT){pwm = MAX_PWM_COUNT;}
     e6c:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <MAX_PWM_COUNT>
     e70:	50 e0       	ldi	r21, 0x00	; 0
	union {
		uint16_t word;
		uint8_t arr[2];
	}WordToBytes;
	
	WordToBytes.word = pwm; // / ICR_Split.word;
     e72:	42 17       	cp	r20, r18
     e74:	53 07       	cpc	r21, r19
     e76:	0c f4       	brge	.+2      	; 0xe7a <Motor_PWM_Right+0x1c>
     e78:	9a 01       	movw	r18, r20
	if(sign < 0){
     e7a:	99 23       	and	r25, r25
     e7c:	3c f4       	brge	.+14     	; 0xe8c <Motor_PWM_Right+0x2e>
		
		OCR4D = WordToBytes.arr[0];
     e7e:	20 93 d2 00 	sts	0x00D2, r18	; 0x8000d2 <__DATA_REGION_ORIGIN__+0x72>
		OCR1BH = 0;
     e82:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
		OCR1BL = 0;
     e86:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
     e8a:	08 95       	ret
		
		}else{
		OCR4D = 0;
     e8c:	10 92 d2 00 	sts	0x00D2, r1	; 0x8000d2 <__DATA_REGION_ORIGIN__+0x72>
		OCR1BH = 0;
     e90:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
		OCR1BL = WordToBytes.arr[0];
     e94:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
     e98:	08 95       	ret

00000e9a <Set_MAX_Motor_PWM>:
 * Function Set_MAX_Motor_PWM sets the maximum pwm count. This function sets the timer counts to zero because
 * the ICR1 can cause undesired behaviors if change dynamically below the current counts.  See page 128 of the
 * atmega32U4 datasheat.
 */
void Set_MAX_Motor_PWM( ){
    ICR1L = MAX_PWM_COUNT;		//Timer 1 TOP
     e9a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <MAX_PWM_COUNT>
     e9e:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__DATA_REGION_ORIGIN__+0x26>
	OCR4C = MAX_PWM_COUNT;		//Timer 4 TOP
     ea2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <MAX_PWM_COUNT>
     ea6:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__DATA_REGION_ORIGIN__+0x71>
     eaa:	08 95       	ret

00000eac <Motor_PWM_Init>:
 */

uint8_t MAX_PWM_COUNT = 255;			// Maximum PWM Count for all timers


void Motor_PWM_Init( ){
     eac:	0f 93       	push	r16
     eae:	1f 93       	push	r17
     eb0:	cf 93       	push	r28
     eb2:	df 93       	push	r29
 
    DDRB &= 0b10011111;         //Set pins PB5 (AIN1) and PB6 (BIN1) to low
     eb4:	84 b1       	in	r24, 0x04	; 4
     eb6:	8f 79       	andi	r24, 0x9F	; 159
     eb8:	84 b9       	out	0x04, r24	; 4
	DDRC &= 0b01111111;			//Set pin PC7 (AIN2) to low
     eba:	3f 98       	cbi	0x07, 7	; 7
	DDRD &= 0b01111111;			//Set pin PD7 (BIN2) to low
     ebc:	57 98       	cbi	0x0a, 7	; 10
	
    

    //Setting Output Compare Match Mode to Toggle on compare match
    TCCR1A |= (1<<COM1A1);
     ebe:	e0 e8       	ldi	r30, 0x80	; 128
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	80 68       	ori	r24, 0x80	; 128
     ec6:	80 83       	st	Z, r24
    TCCR1A |= (1<<COM1B1);
     ec8:	80 81       	ld	r24, Z
     eca:	80 62       	ori	r24, 0x20	; 32
     ecc:	80 83       	st	Z, r24
	
	
	TCCR4A |= (1<<COM4A1);
     ece:	00 ec       	ldi	r16, 0xC0	; 192
     ed0:	10 e0       	ldi	r17, 0x00	; 0
     ed2:	f8 01       	movw	r30, r16
     ed4:	80 81       	ld	r24, Z
     ed6:	80 68       	ori	r24, 0x80	; 128
     ed8:	80 83       	st	Z, r24
	TCCR4C |= (1<<COM4D1);
     eda:	c2 ec       	ldi	r28, 0xC2	; 194
     edc:	d0 e0       	ldi	r29, 0x00	; 0
     ede:	88 81       	ld	r24, Y
     ee0:	88 60       	ori	r24, 0x08	; 8
     ee2:	88 83       	st	Y, r24


    Set_MAX_Motor_PWM();
     ee4:	0e 94 4d 07 	call	0xe9a	; 0xe9a <Set_MAX_Motor_PWM>


    //Set mode to Phase and frequency correct and clock prescalar to 256
    // Sets Max ICR value to 8191
    TCCR1B |= (1<<WGM13) | (1<<CS10);
     ee8:	e1 e8       	ldi	r30, 0x81	; 129
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	81 61       	ori	r24, 0x11	; 17
     ef0:	80 83       	st	Z, r24
	
	//Set mode to Phase and frequency correct and clock prescalar to 256
	TCCR4A |= (1<<PWM4A);
     ef2:	f8 01       	movw	r30, r16
     ef4:	80 81       	ld	r24, Z
     ef6:	82 60       	ori	r24, 0x02	; 2
     ef8:	80 83       	st	Z, r24
	TCCR4B |= (1<<CS40);
     efa:	e1 ec       	ldi	r30, 0xC1	; 193
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	80 81       	ld	r24, Z
     f00:	81 60       	ori	r24, 0x01	; 1
     f02:	80 83       	st	Z, r24
	TCCR4C |= (1<<PWM4D);
     f04:	88 81       	ld	r24, Y
     f06:	81 60       	ori	r24, 0x01	; 1
     f08:	88 83       	st	Y, r24
	TCCR4D |= (1<<WGM40);
     f0a:	e3 ec       	ldi	r30, 0xC3	; 195
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	80 81       	ld	r24, Z
     f10:	81 60       	ori	r24, 0x01	; 1
     f12:	80 83       	st	Z, r24
}
     f14:	df 91       	pop	r29
     f16:	cf 91       	pop	r28
     f18:	1f 91       	pop	r17
     f1a:	0f 91       	pop	r16
     f1c:	08 95       	ret

00000f1e <Initialize_Task>:
}

/** Function Task_Cancel changes the internal state to disable the task **/
void Task_Cancel( Task_t* task )
{
    task->is_active = false;
     f1e:	fc 01       	movw	r30, r24
     f20:	10 82       	st	Z, r1
     f22:	41 83       	std	Z+1, r20	; 0x01
     f24:	52 83       	std	Z+2, r21	; 0x02
     f26:	63 83       	std	Z+3, r22	; 0x03
     f28:	74 83       	std	Z+4, r23	; 0x04
     f2a:	12 86       	std	Z+10, r1	; 0x0a
     f2c:	11 86       	std	Z+9, r1	; 0x09
     f2e:	15 82       	std	Z+5, r1	; 0x05
     f30:	16 82       	std	Z+6, r1	; 0x06
     f32:	17 82       	std	Z+7, r1	; 0x07
     f34:	10 86       	std	Z+8, r1	; 0x08
     f36:	34 87       	std	Z+12, r19	; 0x0c
     f38:	23 87       	std	Z+11, r18	; 0x0b
     f3a:	08 95       	ret

00000f3c <Task_Is_Ready>:

/** Function Task_Is_Ready indicates if the task should be run. It checks both
 * the active status and the timing.
 */
bool Task_Is_Ready( Task_t* task )
{
     f3c:	cf 92       	push	r12
     f3e:	df 92       	push	r13
     f40:	ef 92       	push	r14
     f42:	ff 92       	push	r15
     f44:	fc 01       	movw	r30, r24
    if(task->is_active && task->run_period < Timing_Seconds_Since(&task->time_last_ran)){ //___ > task->run_period
     f46:	80 81       	ld	r24, Z
     f48:	88 23       	and	r24, r24
     f4a:	89 f0       	breq	.+34     	; 0xf6e <Task_Is_Ready+0x32>
     f4c:	c1 80       	ldd	r12, Z+1	; 0x01
     f4e:	d2 80       	ldd	r13, Z+2	; 0x02
     f50:	e3 80       	ldd	r14, Z+3	; 0x03
     f52:	f4 80       	ldd	r15, Z+4	; 0x04
     f54:	cf 01       	movw	r24, r30
     f56:	05 96       	adiw	r24, 0x05	; 5
     f58:	0e 94 5f 08 	call	0x10be	; 0x10be <Timing_Seconds_Since>
     f5c:	9b 01       	movw	r18, r22
     f5e:	ac 01       	movw	r20, r24
     f60:	c7 01       	movw	r24, r14
     f62:	b6 01       	movw	r22, r12
     f64:	0e 94 3d 0a 	call	0x147a	; 0x147a <__cmpsf2>
     f68:	88 1f       	adc	r24, r24
     f6a:	88 27       	eor	r24, r24
     f6c:	88 1f       	adc	r24, r24
        
    }else{
        return false;
    }
     // MEGN540 Update to set the return statement based on is_active and time_last_ran. 
}
     f6e:	ff 90       	pop	r15
     f70:	ef 90       	pop	r14
     f72:	df 90       	pop	r13
     f74:	cf 90       	pop	r12
     f76:	08 95       	ret

00000f78 <Task_Run_If_Ready>:
/** Function Task_Run_If_Ready Function Task_Run_If_Ready checks to see if the given task is ready for execution, executes the task, 
 *  and resets the time_last_ran appropriately. If the task function pointer is NULL then it just 
 *  returns if the task is ready and resets the time_last_ran.
 */ 
bool Task_Run_If_Ready( Task_t* task )
{
     f78:	1f 93       	push	r17
     f7a:	cf 93       	push	r28
     f7c:	df 93       	push	r29
     f7e:	ec 01       	movw	r28, r24
    // Check to see if the task is ready to run.
    if( Task_Is_Ready(task)) 
     f80:	0e 94 9e 07 	call	0xf3c	; 0xf3c <Task_Is_Ready>
     f84:	18 2f       	mov	r17, r24
     f86:	88 23       	and	r24, r24
     f88:	c1 f0       	breq	.+48     	; 0xfba <Task_Run_If_Ready+0x42>
    {        
        if(task->run_period == -1)
     f8a:	20 e0       	ldi	r18, 0x00	; 0
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	40 e8       	ldi	r20, 0x80	; 128
     f90:	5f eb       	ldi	r21, 0xBF	; 191
     f92:	69 81       	ldd	r22, Y+1	; 0x01
     f94:	7a 81       	ldd	r23, Y+2	; 0x02
     f96:	8b 81       	ldd	r24, Y+3	; 0x03
     f98:	9c 81       	ldd	r25, Y+4	; 0x04
     f9a:	0e 94 3d 0a 	call	0x147a	; 0x147a <__cmpsf2>
     f9e:	81 11       	cpse	r24, r1
     fa0:	01 c0       	rjmp	.+2      	; 0xfa4 <Task_Run_If_Ready+0x2c>
            task->is_active = false;
     fa2:	18 82       	st	Y, r1
                
        (*task->task_fcn_ptr)();
     fa4:	eb 85       	ldd	r30, Y+11	; 0x0b
     fa6:	fc 85       	ldd	r31, Y+12	; 0x0c
     fa8:	09 95       	icall

        task->time_last_ran = Timing_Get_Time();
     faa:	0e 94 f6 07 	call	0xfec	; 0xfec <Timing_Get_Time>
     fae:	2d 83       	std	Y+5, r18	; 0x05
     fb0:	3e 83       	std	Y+6, r19	; 0x06
     fb2:	4f 83       	std	Y+7, r20	; 0x07
     fb4:	58 87       	std	Y+8, r21	; 0x08
     fb6:	69 87       	std	Y+9, r22	; 0x09
     fb8:	7a 87       	std	Y+10, r23	; 0x0a
    // Run it if it is ready
    // Update time_last_ran and is_active as appropriate. 
    // To call a void functor (function pointer):  (*functor_variable)(); 

    return false; // true if it ran, false if it did not run
}
     fba:	81 2f       	mov	r24, r17
     fbc:	df 91       	pop	r29
     fbe:	cf 91       	pop	r28
     fc0:	1f 91       	pop	r17
     fc2:	08 95       	ret

00000fc4 <Initialize_Timing>:
    return _count_ms;
}
uint16_t Timing_Get_Micro()
{
    return TCNT0 * 4;
}
     fc4:	85 b5       	in	r24, 0x25	; 37
     fc6:	83 60       	ori	r24, 0x03	; 3
     fc8:	85 bd       	out	0x25, r24	; 37
     fca:	89 ef       	ldi	r24, 0xF9	; 249
     fcc:	87 bd       	out	0x27, r24	; 39
     fce:	ee e6       	ldi	r30, 0x6E	; 110
     fd0:	f0 e0       	ldi	r31, 0x00	; 0
     fd2:	80 81       	ld	r24, Z
     fd4:	82 60       	ori	r24, 0x02	; 2
     fd6:	80 83       	st	Z, r24
     fd8:	78 94       	sei
     fda:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <__data_end>
     fde:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <__data_end+0x1>
     fe2:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <__data_end+0x2>
     fe6:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <__data_end+0x3>
     fea:	08 95       	ret

00000fec <Timing_Get_Time>:
     fec:	cf 93       	push	r28
     fee:	df 93       	push	r29
     ff0:	00 d0       	rcall	.+0      	; 0xff2 <Timing_Get_Time+0x6>
     ff2:	00 d0       	rcall	.+0      	; 0xff4 <Timing_Get_Time+0x8>
     ff4:	00 d0       	rcall	.+0      	; 0xff6 <Timing_Get_Time+0xa>
     ff6:	cd b7       	in	r28, 0x3d	; 61
     ff8:	de b7       	in	r29, 0x3e	; 62
     ffa:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <__data_end>
     ffe:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <__data_end+0x1>
    1002:	a0 91 2a 01 	lds	r26, 0x012A	; 0x80012a <__data_end+0x2>
    1006:	b0 91 2b 01 	lds	r27, 0x012B	; 0x80012b <__data_end+0x3>
    100a:	66 b5       	in	r22, 0x26	; 38
    100c:	89 83       	std	Y+1, r24	; 0x01
    100e:	9a 83       	std	Y+2, r25	; 0x02
    1010:	ab 83       	std	Y+3, r26	; 0x03
    1012:	bc 83       	std	Y+4, r27	; 0x04
    1014:	70 e0       	ldi	r23, 0x00	; 0
    1016:	66 0f       	add	r22, r22
    1018:	77 1f       	adc	r23, r23
    101a:	66 0f       	add	r22, r22
    101c:	77 1f       	adc	r23, r23
    101e:	7e 83       	std	Y+6, r23	; 0x06
    1020:	6d 83       	std	Y+5, r22	; 0x05
    1022:	28 2f       	mov	r18, r24
    1024:	3a 81       	ldd	r19, Y+2	; 0x02
    1026:	4b 81       	ldd	r20, Y+3	; 0x03
    1028:	5c 81       	ldd	r21, Y+4	; 0x04
    102a:	7e 81       	ldd	r23, Y+6	; 0x06
    102c:	80 e0       	ldi	r24, 0x00	; 0
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	26 96       	adiw	r28, 0x06	; 6
    1032:	0f b6       	in	r0, 0x3f	; 63
    1034:	f8 94       	cli
    1036:	de bf       	out	0x3e, r29	; 62
    1038:	0f be       	out	0x3f, r0	; 63
    103a:	cd bf       	out	0x3d, r28	; 61
    103c:	df 91       	pop	r29
    103e:	cf 91       	pop	r28
    1040:	08 95       	ret

00001042 <Timing_Get_Time_Sec>:
    1042:	cf 92       	push	r12
    1044:	df 92       	push	r13
    1046:	ef 92       	push	r14
    1048:	ff 92       	push	r15
    104a:	cf 93       	push	r28
    104c:	df 93       	push	r29
    104e:	00 d0       	rcall	.+0      	; 0x1050 <Timing_Get_Time_Sec+0xe>
    1050:	00 d0       	rcall	.+0      	; 0x1052 <Timing_Get_Time_Sec+0x10>
    1052:	00 d0       	rcall	.+0      	; 0x1054 <Timing_Get_Time_Sec+0x12>
    1054:	cd b7       	in	r28, 0x3d	; 61
    1056:	de b7       	in	r29, 0x3e	; 62
    1058:	0e 94 f6 07 	call	0xfec	; 0xfec <Timing_Get_Time>
    105c:	29 83       	std	Y+1, r18	; 0x01
    105e:	3a 83       	std	Y+2, r19	; 0x02
    1060:	4b 83       	std	Y+3, r20	; 0x03
    1062:	5c 83       	std	Y+4, r21	; 0x04
    1064:	6d 83       	std	Y+5, r22	; 0x05
    1066:	7e 83       	std	Y+6, r23	; 0x06
    1068:	69 81       	ldd	r22, Y+1	; 0x01
    106a:	7a 81       	ldd	r23, Y+2	; 0x02
    106c:	8b 81       	ldd	r24, Y+3	; 0x03
    106e:	9c 81       	ldd	r25, Y+4	; 0x04
    1070:	0e 94 b4 0a 	call	0x1568	; 0x1568 <__floatunsisf>
    1074:	20 e0       	ldi	r18, 0x00	; 0
    1076:	30 e0       	ldi	r19, 0x00	; 0
    1078:	4a e7       	ldi	r20, 0x7A	; 122
    107a:	54 e4       	ldi	r21, 0x44	; 68
    107c:	0e 94 42 0a 	call	0x1484	; 0x1484 <__divsf3>
    1080:	6b 01       	movw	r12, r22
    1082:	7c 01       	movw	r14, r24
    1084:	6d 81       	ldd	r22, Y+5	; 0x05
    1086:	7e 81       	ldd	r23, Y+6	; 0x06
    1088:	80 e0       	ldi	r24, 0x00	; 0
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	0e 94 b4 0a 	call	0x1568	; 0x1568 <__floatunsisf>
    1090:	20 e0       	ldi	r18, 0x00	; 0
    1092:	34 e2       	ldi	r19, 0x24	; 36
    1094:	44 e7       	ldi	r20, 0x74	; 116
    1096:	59 e4       	ldi	r21, 0x49	; 73
    1098:	0e 94 42 0a 	call	0x1484	; 0x1484 <__divsf3>
    109c:	a7 01       	movw	r20, r14
    109e:	96 01       	movw	r18, r12
    10a0:	0e 94 5f 09 	call	0x12be	; 0x12be <__addsf3>
    10a4:	26 96       	adiw	r28, 0x06	; 6
    10a6:	0f b6       	in	r0, 0x3f	; 63
    10a8:	f8 94       	cli
    10aa:	de bf       	out	0x3e, r29	; 62
    10ac:	0f be       	out	0x3f, r0	; 63
    10ae:	cd bf       	out	0x3d, r28	; 61
    10b0:	df 91       	pop	r29
    10b2:	cf 91       	pop	r28
    10b4:	ff 90       	pop	r15
    10b6:	ef 90       	pop	r14
    10b8:	df 90       	pop	r13
    10ba:	cf 90       	pop	r12
    10bc:	08 95       	ret

000010be <Timing_Seconds_Since>:
 * This function takes a start time and calculates the time since that time, it returns it in the Time struct.
 * @param p_time_start a pointer to a start time struct
 * @return (Time_t) Time since the other time.
 */
float  Timing_Seconds_Since(const Time_t* time_start_p )
{
    10be:	4f 92       	push	r4
    10c0:	5f 92       	push	r5
    10c2:	6f 92       	push	r6
    10c4:	7f 92       	push	r7
    10c6:	8f 92       	push	r8
    10c8:	9f 92       	push	r9
    10ca:	af 92       	push	r10
    10cc:	bf 92       	push	r11
    10ce:	cf 92       	push	r12
    10d0:	df 92       	push	r13
    10d2:	ef 92       	push	r14
    10d4:	ff 92       	push	r15
    10d6:	cf 93       	push	r28
    10d8:	df 93       	push	r29
    10da:	ec 01       	movw	r28, r24
    float currTime = Timing_Get_Time_Sec();
    10dc:	0e 94 21 08 	call	0x1042	; 0x1042 <Timing_Get_Time_Sec>
    10e0:	6b 01       	movw	r12, r22
    10e2:	7c 01       	movw	r14, r24

    float updateMilli = time_start_p->millisec;
    10e4:	68 81       	ld	r22, Y
    10e6:	79 81       	ldd	r23, Y+1	; 0x01
    10e8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ea:	9b 81       	ldd	r25, Y+3	; 0x03
    10ec:	0e 94 b4 0a 	call	0x1568	; 0x1568 <__floatunsisf>
    10f0:	4b 01       	movw	r8, r22
    10f2:	5c 01       	movw	r10, r24
    updateMilli /= 1000.0;
    float updateMicro = time_start_p->microsec;
    10f4:	6c 81       	ldd	r22, Y+4	; 0x04
    10f6:	7d 81       	ldd	r23, Y+5	; 0x05
    10f8:	80 e0       	ldi	r24, 0x00	; 0
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	0e 94 b4 0a 	call	0x1568	; 0x1568 <__floatunsisf>
    1100:	2b 01       	movw	r4, r22
    1102:	3c 01       	movw	r6, r24
    updateMicro /= 1000000.0;

    float delta_time = currTime - (updateMicro + updateMilli);

    return delta_time;
    1104:	20 e0       	ldi	r18, 0x00	; 0
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	4a e7       	ldi	r20, 0x7A	; 122
    110a:	54 e4       	ldi	r21, 0x44	; 68
    110c:	c5 01       	movw	r24, r10
    110e:	b4 01       	movw	r22, r8
    1110:	0e 94 42 0a 	call	0x1484	; 0x1484 <__divsf3>
    1114:	4b 01       	movw	r8, r22
    1116:	5c 01       	movw	r10, r24
    1118:	20 e0       	ldi	r18, 0x00	; 0
    111a:	34 e2       	ldi	r19, 0x24	; 36
    111c:	44 e7       	ldi	r20, 0x74	; 116
    111e:	59 e4       	ldi	r21, 0x49	; 73
    1120:	c3 01       	movw	r24, r6
    1122:	b2 01       	movw	r22, r4
    1124:	0e 94 42 0a 	call	0x1484	; 0x1484 <__divsf3>
    1128:	9b 01       	movw	r18, r22
    112a:	ac 01       	movw	r20, r24
    112c:	c5 01       	movw	r24, r10
    112e:	b4 01       	movw	r22, r8
    1130:	0e 94 5f 09 	call	0x12be	; 0x12be <__addsf3>
    1134:	9b 01       	movw	r18, r22
    1136:	ac 01       	movw	r20, r24
    1138:	c7 01       	movw	r24, r14
    113a:	b6 01       	movw	r22, r12
    113c:	0e 94 5e 09 	call	0x12bc	; 0x12bc <__subsf3>
}
    1140:	df 91       	pop	r29
    1142:	cf 91       	pop	r28
    1144:	ff 90       	pop	r15
    1146:	ef 90       	pop	r14
    1148:	df 90       	pop	r13
    114a:	cf 90       	pop	r12
    114c:	bf 90       	pop	r11
    114e:	af 90       	pop	r10
    1150:	9f 90       	pop	r9
    1152:	8f 90       	pop	r8
    1154:	7f 90       	pop	r7
    1156:	6f 90       	pop	r6
    1158:	5f 90       	pop	r5
    115a:	4f 90       	pop	r4
    115c:	08 95       	ret

0000115e <__vector_21>:

/** This is the Interrupt Service Routine for the Timer0 Compare A feature.
 * You'll need to set the compare flags properly for it to work.
 */
ISR(TIMER0_COMPA_vect)
{
    115e:	1f 92       	push	r1
    1160:	0f 92       	push	r0
    1162:	0f b6       	in	r0, 0x3f	; 63
    1164:	0f 92       	push	r0
    1166:	11 24       	eor	r1, r1
    1168:	8f 93       	push	r24
    116a:	9f 93       	push	r25
    116c:	af 93       	push	r26
    116e:	bf 93       	push	r27
    
    // YOU NEED TO RESET THE Timer0 Value to 0 again!
    TCNT0 = 0;
    1170:	16 bc       	out	0x26, r1	; 38
    // take care of upticks of both our internal and external variables.
    _count_ms ++;
    1172:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <__data_end>
    1176:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <__data_end+0x1>
    117a:	a0 91 2a 01 	lds	r26, 0x012A	; 0x80012a <__data_end+0x2>
    117e:	b0 91 2b 01 	lds	r27, 0x012B	; 0x80012b <__data_end+0x3>
    1182:	01 96       	adiw	r24, 0x01	; 1
    1184:	a1 1d       	adc	r26, r1
    1186:	b1 1d       	adc	r27, r1
    1188:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__data_end>
    118c:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__data_end+0x1>
    1190:	a0 93 2a 01 	sts	0x012A, r26	; 0x80012a <__data_end+0x2>
    1194:	b0 93 2b 01 	sts	0x012B, r27	; 0x80012b <__data_end+0x3>

}
    1198:	bf 91       	pop	r27
    119a:	af 91       	pop	r26
    119c:	9f 91       	pop	r25
    119e:	8f 91       	pop	r24
    11a0:	0f 90       	pop	r0
    11a2:	0f be       	out	0x3f, r0	; 63
    11a4:	0f 90       	pop	r0
    11a6:	1f 90       	pop	r1
    11a8:	18 95       	reti

000011aa <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
    11aa:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    11ae:	88 e4       	ldi	r24, 0x48	; 72
    11b0:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
    11b4:	08 95       	ret

000011b6 <i2c_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    11b6:	94 ea       	ldi	r25, 0xA4	; 164
    11b8:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    11bc:	ec eb       	ldi	r30, 0xBC	; 188
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	90 81       	ld	r25, Z
    11c2:	99 23       	and	r25, r25
    11c4:	ec f7       	brge	.-6      	; 0x11c0 <i2c_start+0xa>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    11c6:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    11ca:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
    11cc:	98 30       	cpi	r25, 0x08	; 8
    11ce:	11 f0       	breq	.+4      	; 0x11d4 <i2c_start+0x1e>
    11d0:	90 31       	cpi	r25, 0x10	; 16
    11d2:	a1 f4       	brne	.+40     	; 0x11fc <i2c_start+0x46>

	// send device address
	TWDR = address;
    11d4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
	TWCR = (1<<TWINT) | (1<<TWEN);
    11d8:	84 e8       	ldi	r24, 0x84	; 132
    11da:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    11de:	ec eb       	ldi	r30, 0xBC	; 188
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	80 81       	ld	r24, Z
    11e4:	88 23       	and	r24, r24
    11e6:	ec f7       	brge	.-6      	; 0x11e2 <i2c_start+0x2c>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    11e8:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    11ec:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
    11ee:	98 31       	cpi	r25, 0x18	; 24
    11f0:	39 f0       	breq	.+14     	; 0x1200 <i2c_start+0x4a>
	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
    11f2:	81 e0       	ldi	r24, 0x01	; 1
    11f4:	90 34       	cpi	r25, 0x40	; 64
    11f6:	29 f4       	brne	.+10     	; 0x1202 <i2c_start+0x4c>
    11f8:	80 e0       	ldi	r24, 0x00	; 0
    11fa:	08 95       	ret
    11fc:	81 e0       	ldi	r24, 0x01	; 1
    11fe:	08 95       	ret

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;

	return 0;
    1200:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
    1202:	08 95       	ret

00001204 <i2c_start_wait>:
 If device is busy, use ack polling to wait until device is ready
 
 Input:   address and transfer direction of I2C device
*************************************************************************/
void i2c_start_wait(unsigned char address)
{
    1204:	cf 93       	push	r28
    1206:	df 93       	push	r29


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    1208:	ec eb       	ldi	r30, 0xBC	; 188
    120a:	f0 e0       	ldi	r31, 0x00	; 0
    120c:	24 ea       	ldi	r18, 0xA4	; 164
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    120e:	a9 eb       	ldi	r26, 0xB9	; 185
    1210:	b0 e0       	ldi	r27, 0x00	; 0
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    1212:	cb eb       	ldi	r28, 0xBB	; 187
    1214:	d0 e0       	ldi	r29, 0x00	; 0
    	TWCR = (1<<TWINT) | (1<<TWEN);
    1216:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    1218:	44 e9       	ldi	r20, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    121a:	20 83       	st	Z, r18
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    121c:	90 81       	ld	r25, Z
    121e:	99 23       	and	r25, r25
    1220:	ec f7       	brge	.-6      	; 0x121c <i2c_start_wait+0x18>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    1222:	9c 91       	ld	r25, X
    1224:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    1226:	98 30       	cpi	r25, 0x08	; 8
    1228:	11 f0       	breq	.+4      	; 0x122e <i2c_start_wait+0x2a>
    122a:	90 31       	cpi	r25, 0x10	; 16
    122c:	b1 f7       	brne	.-20     	; 0x121a <i2c_start_wait+0x16>
    
    	// send device address
    	TWDR = address;
    122e:	88 83       	st	Y, r24
    	TWCR = (1<<TWINT) | (1<<TWEN);
    1230:	30 83       	st	Z, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    1232:	90 81       	ld	r25, Z
    1234:	99 23       	and	r25, r25
    1236:	ec f7       	brge	.-6      	; 0x1232 <i2c_start_wait+0x2e>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    1238:	9c 91       	ld	r25, X
    123a:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    123c:	90 32       	cpi	r25, 0x20	; 32
    123e:	11 f0       	breq	.+4      	; 0x1244 <i2c_start_wait+0x40>
    1240:	98 35       	cpi	r25, 0x58	; 88
    1242:	29 f4       	brne	.+10     	; 0x124e <i2c_start_wait+0x4a>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    1244:	40 83       	st	Z, r20
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
    1246:	90 81       	ld	r25, Z
    1248:	94 fd       	sbrc	r25, 4
    124a:	fd cf       	rjmp	.-6      	; 0x1246 <i2c_start_wait+0x42>
    124c:	e6 cf       	rjmp	.-52     	; 0x121a <i2c_start_wait+0x16>
    	}
    	//if( twst != TW_MT_SLA_ACK) return 1;
    	break;
     }

}/* i2c_start_wait */
    124e:	df 91       	pop	r29
    1250:	cf 91       	pop	r28
    1252:	08 95       	ret

00001254 <i2c_rep_start>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
    1254:	0e 94 db 08 	call	0x11b6	; 0x11b6 <i2c_start>

}/* i2c_rep_start */
    1258:	08 95       	ret

0000125a <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    125a:	84 e9       	ldi	r24, 0x94	; 148
    125c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
    1260:	ec eb       	ldi	r30, 0xBC	; 188
    1262:	f0 e0       	ldi	r31, 0x00	; 0
    1264:	80 81       	ld	r24, Z
    1266:	84 fd       	sbrc	r24, 4
    1268:	fd cf       	rjmp	.-6      	; 0x1264 <i2c_stop+0xa>

}/* i2c_stop */
    126a:	08 95       	ret

0000126c <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    126c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
	TWCR = (1<<TWINT) | (1<<TWEN);
    1270:	84 e8       	ldi	r24, 0x84	; 132
    1272:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    1276:	ec eb       	ldi	r30, 0xBC	; 188
    1278:	f0 e0       	ldi	r31, 0x00	; 0
    127a:	80 81       	ld	r24, Z
    127c:	88 23       	and	r24, r24
    127e:	ec f7       	brge	.-6      	; 0x127a <i2c_write+0xe>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    1280:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    1284:	98 7f       	andi	r25, 0xF8	; 248
    1286:	81 e0       	ldi	r24, 0x01	; 1
    1288:	98 32       	cpi	r25, 0x28	; 40
    128a:	09 f4       	brne	.+2      	; 0x128e <i2c_write+0x22>
    128c:	80 e0       	ldi	r24, 0x00	; 0
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
    128e:	08 95       	ret

00001290 <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    1290:	84 ec       	ldi	r24, 0xC4	; 196
    1292:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while(!(TWCR & (1<<TWINT)));    
    1296:	ec eb       	ldi	r30, 0xBC	; 188
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	80 81       	ld	r24, Z
    129c:	88 23       	and	r24, r24
    129e:	ec f7       	brge	.-6      	; 0x129a <i2c_readAck+0xa>

    return TWDR;
    12a0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>

}/* i2c_readAck */
    12a4:	08 95       	ret

000012a6 <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
    12a6:	84 e8       	ldi	r24, 0x84	; 132
    12a8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while(!(TWCR & (1<<TWINT)));
    12ac:	ec eb       	ldi	r30, 0xBC	; 188
    12ae:	f0 e0       	ldi	r31, 0x00	; 0
    12b0:	80 81       	ld	r24, Z
    12b2:	88 23       	and	r24, r24
    12b4:	ec f7       	brge	.-6      	; 0x12b0 <i2c_readNak+0xa>
	
    return TWDR;
    12b6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>

}/* i2c_readNak */
    12ba:	08 95       	ret

000012bc <__subsf3>:
    12bc:	50 58       	subi	r21, 0x80	; 128

000012be <__addsf3>:
    12be:	bb 27       	eor	r27, r27
    12c0:	aa 27       	eor	r26, r26
    12c2:	0e 94 76 09 	call	0x12ec	; 0x12ec <__addsf3x>
    12c6:	0c 94 53 0b 	jmp	0x16a6	; 0x16a6 <__fp_round>
    12ca:	0e 94 45 0b 	call	0x168a	; 0x168a <__fp_pscA>
    12ce:	38 f0       	brcs	.+14     	; 0x12de <__addsf3+0x20>
    12d0:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__fp_pscB>
    12d4:	20 f0       	brcs	.+8      	; 0x12de <__addsf3+0x20>
    12d6:	39 f4       	brne	.+14     	; 0x12e6 <__addsf3+0x28>
    12d8:	9f 3f       	cpi	r25, 0xFF	; 255
    12da:	19 f4       	brne	.+6      	; 0x12e2 <__addsf3+0x24>
    12dc:	26 f4       	brtc	.+8      	; 0x12e6 <__addsf3+0x28>
    12de:	0c 94 1b 0b 	jmp	0x1636	; 0x1636 <__fp_nan>
    12e2:	0e f4       	brtc	.+2      	; 0x12e6 <__addsf3+0x28>
    12e4:	e0 95       	com	r30
    12e6:	e7 fb       	bst	r30, 7
    12e8:	0c 94 15 0b 	jmp	0x162a	; 0x162a <__fp_inf>

000012ec <__addsf3x>:
    12ec:	e9 2f       	mov	r30, r25
    12ee:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <__fp_split3>
    12f2:	58 f3       	brcs	.-42     	; 0x12ca <__addsf3+0xc>
    12f4:	ba 17       	cp	r27, r26
    12f6:	62 07       	cpc	r22, r18
    12f8:	73 07       	cpc	r23, r19
    12fa:	84 07       	cpc	r24, r20
    12fc:	95 07       	cpc	r25, r21
    12fe:	20 f0       	brcs	.+8      	; 0x1308 <__addsf3x+0x1c>
    1300:	79 f4       	brne	.+30     	; 0x1320 <__addsf3x+0x34>
    1302:	a6 f5       	brtc	.+104    	; 0x136c <__addsf3x+0x80>
    1304:	0c 94 86 0b 	jmp	0x170c	; 0x170c <__fp_zero>
    1308:	0e f4       	brtc	.+2      	; 0x130c <__addsf3x+0x20>
    130a:	e0 95       	com	r30
    130c:	0b 2e       	mov	r0, r27
    130e:	ba 2f       	mov	r27, r26
    1310:	a0 2d       	mov	r26, r0
    1312:	0b 01       	movw	r0, r22
    1314:	b9 01       	movw	r22, r18
    1316:	90 01       	movw	r18, r0
    1318:	0c 01       	movw	r0, r24
    131a:	ca 01       	movw	r24, r20
    131c:	a0 01       	movw	r20, r0
    131e:	11 24       	eor	r1, r1
    1320:	ff 27       	eor	r31, r31
    1322:	59 1b       	sub	r21, r25
    1324:	99 f0       	breq	.+38     	; 0x134c <__addsf3x+0x60>
    1326:	59 3f       	cpi	r21, 0xF9	; 249
    1328:	50 f4       	brcc	.+20     	; 0x133e <__addsf3x+0x52>
    132a:	50 3e       	cpi	r21, 0xE0	; 224
    132c:	68 f1       	brcs	.+90     	; 0x1388 <__addsf3x+0x9c>
    132e:	1a 16       	cp	r1, r26
    1330:	f0 40       	sbci	r31, 0x00	; 0
    1332:	a2 2f       	mov	r26, r18
    1334:	23 2f       	mov	r18, r19
    1336:	34 2f       	mov	r19, r20
    1338:	44 27       	eor	r20, r20
    133a:	58 5f       	subi	r21, 0xF8	; 248
    133c:	f3 cf       	rjmp	.-26     	; 0x1324 <__addsf3x+0x38>
    133e:	46 95       	lsr	r20
    1340:	37 95       	ror	r19
    1342:	27 95       	ror	r18
    1344:	a7 95       	ror	r26
    1346:	f0 40       	sbci	r31, 0x00	; 0
    1348:	53 95       	inc	r21
    134a:	c9 f7       	brne	.-14     	; 0x133e <__addsf3x+0x52>
    134c:	7e f4       	brtc	.+30     	; 0x136c <__addsf3x+0x80>
    134e:	1f 16       	cp	r1, r31
    1350:	ba 0b       	sbc	r27, r26
    1352:	62 0b       	sbc	r22, r18
    1354:	73 0b       	sbc	r23, r19
    1356:	84 0b       	sbc	r24, r20
    1358:	ba f0       	brmi	.+46     	; 0x1388 <__addsf3x+0x9c>
    135a:	91 50       	subi	r25, 0x01	; 1
    135c:	a1 f0       	breq	.+40     	; 0x1386 <__addsf3x+0x9a>
    135e:	ff 0f       	add	r31, r31
    1360:	bb 1f       	adc	r27, r27
    1362:	66 1f       	adc	r22, r22
    1364:	77 1f       	adc	r23, r23
    1366:	88 1f       	adc	r24, r24
    1368:	c2 f7       	brpl	.-16     	; 0x135a <__addsf3x+0x6e>
    136a:	0e c0       	rjmp	.+28     	; 0x1388 <__addsf3x+0x9c>
    136c:	ba 0f       	add	r27, r26
    136e:	62 1f       	adc	r22, r18
    1370:	73 1f       	adc	r23, r19
    1372:	84 1f       	adc	r24, r20
    1374:	48 f4       	brcc	.+18     	; 0x1388 <__addsf3x+0x9c>
    1376:	87 95       	ror	r24
    1378:	77 95       	ror	r23
    137a:	67 95       	ror	r22
    137c:	b7 95       	ror	r27
    137e:	f7 95       	ror	r31
    1380:	9e 3f       	cpi	r25, 0xFE	; 254
    1382:	08 f0       	brcs	.+2      	; 0x1386 <__addsf3x+0x9a>
    1384:	b0 cf       	rjmp	.-160    	; 0x12e6 <__addsf3+0x28>
    1386:	93 95       	inc	r25
    1388:	88 0f       	add	r24, r24
    138a:	08 f0       	brcs	.+2      	; 0x138e <__addsf3x+0xa2>
    138c:	99 27       	eor	r25, r25
    138e:	ee 0f       	add	r30, r30
    1390:	97 95       	ror	r25
    1392:	87 95       	ror	r24
    1394:	08 95       	ret
    1396:	0e 94 45 0b 	call	0x168a	; 0x168a <__fp_pscA>
    139a:	60 f0       	brcs	.+24     	; 0x13b4 <__addsf3x+0xc8>
    139c:	80 e8       	ldi	r24, 0x80	; 128
    139e:	91 e0       	ldi	r25, 0x01	; 1
    13a0:	09 f4       	brne	.+2      	; 0x13a4 <__addsf3x+0xb8>
    13a2:	9e ef       	ldi	r25, 0xFE	; 254
    13a4:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__fp_pscB>
    13a8:	28 f0       	brcs	.+10     	; 0x13b4 <__addsf3x+0xc8>
    13aa:	40 e8       	ldi	r20, 0x80	; 128
    13ac:	51 e0       	ldi	r21, 0x01	; 1
    13ae:	71 f4       	brne	.+28     	; 0x13cc <atan2+0x10>
    13b0:	5e ef       	ldi	r21, 0xFE	; 254
    13b2:	0c c0       	rjmp	.+24     	; 0x13cc <atan2+0x10>
    13b4:	0c 94 1b 0b 	jmp	0x1636	; 0x1636 <__fp_nan>
    13b8:	0c 94 86 0b 	jmp	0x170c	; 0x170c <__fp_zero>

000013bc <atan2>:
    13bc:	e9 2f       	mov	r30, r25
    13be:	e0 78       	andi	r30, 0x80	; 128
    13c0:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <__fp_split3>
    13c4:	40 f3       	brcs	.-48     	; 0x1396 <__addsf3x+0xaa>
    13c6:	09 2e       	mov	r0, r25
    13c8:	05 2a       	or	r0, r21
    13ca:	b1 f3       	breq	.-20     	; 0x13b8 <__addsf3x+0xcc>
    13cc:	26 17       	cp	r18, r22
    13ce:	37 07       	cpc	r19, r23
    13d0:	48 07       	cpc	r20, r24
    13d2:	59 07       	cpc	r21, r25
    13d4:	38 f0       	brcs	.+14     	; 0x13e4 <atan2+0x28>
    13d6:	0e 2e       	mov	r0, r30
    13d8:	07 f8       	bld	r0, 7
    13da:	e0 25       	eor	r30, r0
    13dc:	69 f0       	breq	.+26     	; 0x13f8 <atan2+0x3c>
    13de:	e0 25       	eor	r30, r0
    13e0:	e0 64       	ori	r30, 0x40	; 64
    13e2:	0a c0       	rjmp	.+20     	; 0x13f8 <atan2+0x3c>
    13e4:	ef 63       	ori	r30, 0x3F	; 63
    13e6:	07 f8       	bld	r0, 7
    13e8:	00 94       	com	r0
    13ea:	07 fa       	bst	r0, 7
    13ec:	db 01       	movw	r26, r22
    13ee:	b9 01       	movw	r22, r18
    13f0:	9d 01       	movw	r18, r26
    13f2:	dc 01       	movw	r26, r24
    13f4:	ca 01       	movw	r24, r20
    13f6:	ad 01       	movw	r20, r26
    13f8:	ef 93       	push	r30
    13fa:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <__divsf3_pse>
    13fe:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <__fp_round>
    1402:	0e 94 0e 0a 	call	0x141c	; 0x141c <atan>
    1406:	5f 91       	pop	r21
    1408:	55 23       	and	r21, r21
    140a:	39 f0       	breq	.+14     	; 0x141a <atan2+0x5e>
    140c:	2b ed       	ldi	r18, 0xDB	; 219
    140e:	3f e0       	ldi	r19, 0x0F	; 15
    1410:	49 e4       	ldi	r20, 0x49	; 73
    1412:	50 fd       	sbrc	r21, 0
    1414:	49 ec       	ldi	r20, 0xC9	; 201
    1416:	0c 94 5f 09 	jmp	0x12be	; 0x12be <__addsf3>
    141a:	08 95       	ret

0000141c <atan>:
    141c:	df 93       	push	r29
    141e:	dd 27       	eor	r29, r29
    1420:	b9 2f       	mov	r27, r25
    1422:	bf 77       	andi	r27, 0x7F	; 127
    1424:	40 e8       	ldi	r20, 0x80	; 128
    1426:	5f e3       	ldi	r21, 0x3F	; 63
    1428:	16 16       	cp	r1, r22
    142a:	17 06       	cpc	r1, r23
    142c:	48 07       	cpc	r20, r24
    142e:	5b 07       	cpc	r21, r27
    1430:	18 f4       	brcc	.+6      	; 0x1438 <atan+0x1c>
    1432:	d9 2f       	mov	r29, r25
    1434:	0e 94 8d 0b 	call	0x171a	; 0x171a <inverse>
    1438:	9f 93       	push	r25
    143a:	8f 93       	push	r24
    143c:	7f 93       	push	r23
    143e:	6f 93       	push	r22
    1440:	0e 94 02 0c 	call	0x1804	; 0x1804 <square>
    1444:	ec ea       	ldi	r30, 0xAC	; 172
    1446:	f0 e0       	ldi	r31, 0x00	; 0
    1448:	0e 94 1e 0b 	call	0x163c	; 0x163c <__fp_powser>
    144c:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <__fp_round>
    1450:	2f 91       	pop	r18
    1452:	3f 91       	pop	r19
    1454:	4f 91       	pop	r20
    1456:	5f 91       	pop	r21
    1458:	0e 94 a8 0b 	call	0x1750	; 0x1750 <__mulsf3x>
    145c:	dd 23       	and	r29, r29
    145e:	51 f0       	breq	.+20     	; 0x1474 <atan+0x58>
    1460:	90 58       	subi	r25, 0x80	; 128
    1462:	a2 ea       	ldi	r26, 0xA2	; 162
    1464:	2a ed       	ldi	r18, 0xDA	; 218
    1466:	3f e0       	ldi	r19, 0x0F	; 15
    1468:	49 ec       	ldi	r20, 0xC9	; 201
    146a:	5f e3       	ldi	r21, 0x3F	; 63
    146c:	d0 78       	andi	r29, 0x80	; 128
    146e:	5d 27       	eor	r21, r29
    1470:	0e 94 76 09 	call	0x12ec	; 0x12ec <__addsf3x>
    1474:	df 91       	pop	r29
    1476:	0c 94 53 0b 	jmp	0x16a6	; 0x16a6 <__fp_round>

0000147a <__cmpsf2>:
    147a:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <__fp_cmp>
    147e:	08 f4       	brcc	.+2      	; 0x1482 <__cmpsf2+0x8>
    1480:	81 e0       	ldi	r24, 0x01	; 1
    1482:	08 95       	ret

00001484 <__divsf3>:
    1484:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__divsf3x>
    1488:	0c 94 53 0b 	jmp	0x16a6	; 0x16a6 <__fp_round>
    148c:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__fp_pscB>
    1490:	58 f0       	brcs	.+22     	; 0x14a8 <__divsf3+0x24>
    1492:	0e 94 45 0b 	call	0x168a	; 0x168a <__fp_pscA>
    1496:	40 f0       	brcs	.+16     	; 0x14a8 <__divsf3+0x24>
    1498:	29 f4       	brne	.+10     	; 0x14a4 <__divsf3+0x20>
    149a:	5f 3f       	cpi	r21, 0xFF	; 255
    149c:	29 f0       	breq	.+10     	; 0x14a8 <__divsf3+0x24>
    149e:	0c 94 15 0b 	jmp	0x162a	; 0x162a <__fp_inf>
    14a2:	51 11       	cpse	r21, r1
    14a4:	0c 94 87 0b 	jmp	0x170e	; 0x170e <__fp_szero>
    14a8:	0c 94 1b 0b 	jmp	0x1636	; 0x1636 <__fp_nan>

000014ac <__divsf3x>:
    14ac:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <__fp_split3>
    14b0:	68 f3       	brcs	.-38     	; 0x148c <__divsf3+0x8>

000014b2 <__divsf3_pse>:
    14b2:	99 23       	and	r25, r25
    14b4:	b1 f3       	breq	.-20     	; 0x14a2 <__divsf3+0x1e>
    14b6:	55 23       	and	r21, r21
    14b8:	91 f3       	breq	.-28     	; 0x149e <__divsf3+0x1a>
    14ba:	95 1b       	sub	r25, r21
    14bc:	55 0b       	sbc	r21, r21
    14be:	bb 27       	eor	r27, r27
    14c0:	aa 27       	eor	r26, r26
    14c2:	62 17       	cp	r22, r18
    14c4:	73 07       	cpc	r23, r19
    14c6:	84 07       	cpc	r24, r20
    14c8:	38 f0       	brcs	.+14     	; 0x14d8 <__divsf3_pse+0x26>
    14ca:	9f 5f       	subi	r25, 0xFF	; 255
    14cc:	5f 4f       	sbci	r21, 0xFF	; 255
    14ce:	22 0f       	add	r18, r18
    14d0:	33 1f       	adc	r19, r19
    14d2:	44 1f       	adc	r20, r20
    14d4:	aa 1f       	adc	r26, r26
    14d6:	a9 f3       	breq	.-22     	; 0x14c2 <__divsf3_pse+0x10>
    14d8:	35 d0       	rcall	.+106    	; 0x1544 <__divsf3_pse+0x92>
    14da:	0e 2e       	mov	r0, r30
    14dc:	3a f0       	brmi	.+14     	; 0x14ec <__divsf3_pse+0x3a>
    14de:	e0 e8       	ldi	r30, 0x80	; 128
    14e0:	32 d0       	rcall	.+100    	; 0x1546 <__divsf3_pse+0x94>
    14e2:	91 50       	subi	r25, 0x01	; 1
    14e4:	50 40       	sbci	r21, 0x00	; 0
    14e6:	e6 95       	lsr	r30
    14e8:	00 1c       	adc	r0, r0
    14ea:	ca f7       	brpl	.-14     	; 0x14de <__divsf3_pse+0x2c>
    14ec:	2b d0       	rcall	.+86     	; 0x1544 <__divsf3_pse+0x92>
    14ee:	fe 2f       	mov	r31, r30
    14f0:	29 d0       	rcall	.+82     	; 0x1544 <__divsf3_pse+0x92>
    14f2:	66 0f       	add	r22, r22
    14f4:	77 1f       	adc	r23, r23
    14f6:	88 1f       	adc	r24, r24
    14f8:	bb 1f       	adc	r27, r27
    14fa:	26 17       	cp	r18, r22
    14fc:	37 07       	cpc	r19, r23
    14fe:	48 07       	cpc	r20, r24
    1500:	ab 07       	cpc	r26, r27
    1502:	b0 e8       	ldi	r27, 0x80	; 128
    1504:	09 f0       	breq	.+2      	; 0x1508 <__divsf3_pse+0x56>
    1506:	bb 0b       	sbc	r27, r27
    1508:	80 2d       	mov	r24, r0
    150a:	bf 01       	movw	r22, r30
    150c:	ff 27       	eor	r31, r31
    150e:	93 58       	subi	r25, 0x83	; 131
    1510:	5f 4f       	sbci	r21, 0xFF	; 255
    1512:	3a f0       	brmi	.+14     	; 0x1522 <__divsf3_pse+0x70>
    1514:	9e 3f       	cpi	r25, 0xFE	; 254
    1516:	51 05       	cpc	r21, r1
    1518:	78 f0       	brcs	.+30     	; 0x1538 <__divsf3_pse+0x86>
    151a:	0c 94 15 0b 	jmp	0x162a	; 0x162a <__fp_inf>
    151e:	0c 94 87 0b 	jmp	0x170e	; 0x170e <__fp_szero>
    1522:	5f 3f       	cpi	r21, 0xFF	; 255
    1524:	e4 f3       	brlt	.-8      	; 0x151e <__divsf3_pse+0x6c>
    1526:	98 3e       	cpi	r25, 0xE8	; 232
    1528:	d4 f3       	brlt	.-12     	; 0x151e <__divsf3_pse+0x6c>
    152a:	86 95       	lsr	r24
    152c:	77 95       	ror	r23
    152e:	67 95       	ror	r22
    1530:	b7 95       	ror	r27
    1532:	f7 95       	ror	r31
    1534:	9f 5f       	subi	r25, 0xFF	; 255
    1536:	c9 f7       	brne	.-14     	; 0x152a <__divsf3_pse+0x78>
    1538:	88 0f       	add	r24, r24
    153a:	91 1d       	adc	r25, r1
    153c:	96 95       	lsr	r25
    153e:	87 95       	ror	r24
    1540:	97 f9       	bld	r25, 7
    1542:	08 95       	ret
    1544:	e1 e0       	ldi	r30, 0x01	; 1
    1546:	66 0f       	add	r22, r22
    1548:	77 1f       	adc	r23, r23
    154a:	88 1f       	adc	r24, r24
    154c:	bb 1f       	adc	r27, r27
    154e:	62 17       	cp	r22, r18
    1550:	73 07       	cpc	r23, r19
    1552:	84 07       	cpc	r24, r20
    1554:	ba 07       	cpc	r27, r26
    1556:	20 f0       	brcs	.+8      	; 0x1560 <__divsf3_pse+0xae>
    1558:	62 1b       	sub	r22, r18
    155a:	73 0b       	sbc	r23, r19
    155c:	84 0b       	sbc	r24, r20
    155e:	ba 0b       	sbc	r27, r26
    1560:	ee 1f       	adc	r30, r30
    1562:	88 f7       	brcc	.-30     	; 0x1546 <__divsf3_pse+0x94>
    1564:	e0 95       	com	r30
    1566:	08 95       	ret

00001568 <__floatunsisf>:
    1568:	e8 94       	clt
    156a:	09 c0       	rjmp	.+18     	; 0x157e <__floatsisf+0x12>

0000156c <__floatsisf>:
    156c:	97 fb       	bst	r25, 7
    156e:	3e f4       	brtc	.+14     	; 0x157e <__floatsisf+0x12>
    1570:	90 95       	com	r25
    1572:	80 95       	com	r24
    1574:	70 95       	com	r23
    1576:	61 95       	neg	r22
    1578:	7f 4f       	sbci	r23, 0xFF	; 255
    157a:	8f 4f       	sbci	r24, 0xFF	; 255
    157c:	9f 4f       	sbci	r25, 0xFF	; 255
    157e:	99 23       	and	r25, r25
    1580:	a9 f0       	breq	.+42     	; 0x15ac <__floatsisf+0x40>
    1582:	f9 2f       	mov	r31, r25
    1584:	96 e9       	ldi	r25, 0x96	; 150
    1586:	bb 27       	eor	r27, r27
    1588:	93 95       	inc	r25
    158a:	f6 95       	lsr	r31
    158c:	87 95       	ror	r24
    158e:	77 95       	ror	r23
    1590:	67 95       	ror	r22
    1592:	b7 95       	ror	r27
    1594:	f1 11       	cpse	r31, r1
    1596:	f8 cf       	rjmp	.-16     	; 0x1588 <__floatsisf+0x1c>
    1598:	fa f4       	brpl	.+62     	; 0x15d8 <__floatsisf+0x6c>
    159a:	bb 0f       	add	r27, r27
    159c:	11 f4       	brne	.+4      	; 0x15a2 <__floatsisf+0x36>
    159e:	60 ff       	sbrs	r22, 0
    15a0:	1b c0       	rjmp	.+54     	; 0x15d8 <__floatsisf+0x6c>
    15a2:	6f 5f       	subi	r22, 0xFF	; 255
    15a4:	7f 4f       	sbci	r23, 0xFF	; 255
    15a6:	8f 4f       	sbci	r24, 0xFF	; 255
    15a8:	9f 4f       	sbci	r25, 0xFF	; 255
    15aa:	16 c0       	rjmp	.+44     	; 0x15d8 <__floatsisf+0x6c>
    15ac:	88 23       	and	r24, r24
    15ae:	11 f0       	breq	.+4      	; 0x15b4 <__floatsisf+0x48>
    15b0:	96 e9       	ldi	r25, 0x96	; 150
    15b2:	11 c0       	rjmp	.+34     	; 0x15d6 <__floatsisf+0x6a>
    15b4:	77 23       	and	r23, r23
    15b6:	21 f0       	breq	.+8      	; 0x15c0 <__floatsisf+0x54>
    15b8:	9e e8       	ldi	r25, 0x8E	; 142
    15ba:	87 2f       	mov	r24, r23
    15bc:	76 2f       	mov	r23, r22
    15be:	05 c0       	rjmp	.+10     	; 0x15ca <__floatsisf+0x5e>
    15c0:	66 23       	and	r22, r22
    15c2:	71 f0       	breq	.+28     	; 0x15e0 <__floatsisf+0x74>
    15c4:	96 e8       	ldi	r25, 0x86	; 134
    15c6:	86 2f       	mov	r24, r22
    15c8:	70 e0       	ldi	r23, 0x00	; 0
    15ca:	60 e0       	ldi	r22, 0x00	; 0
    15cc:	2a f0       	brmi	.+10     	; 0x15d8 <__floatsisf+0x6c>
    15ce:	9a 95       	dec	r25
    15d0:	66 0f       	add	r22, r22
    15d2:	77 1f       	adc	r23, r23
    15d4:	88 1f       	adc	r24, r24
    15d6:	da f7       	brpl	.-10     	; 0x15ce <__floatsisf+0x62>
    15d8:	88 0f       	add	r24, r24
    15da:	96 95       	lsr	r25
    15dc:	87 95       	ror	r24
    15de:	97 f9       	bld	r25, 7
    15e0:	08 95       	ret

000015e2 <__fp_cmp>:
    15e2:	99 0f       	add	r25, r25
    15e4:	00 08       	sbc	r0, r0
    15e6:	55 0f       	add	r21, r21
    15e8:	aa 0b       	sbc	r26, r26
    15ea:	e0 e8       	ldi	r30, 0x80	; 128
    15ec:	fe ef       	ldi	r31, 0xFE	; 254
    15ee:	16 16       	cp	r1, r22
    15f0:	17 06       	cpc	r1, r23
    15f2:	e8 07       	cpc	r30, r24
    15f4:	f9 07       	cpc	r31, r25
    15f6:	c0 f0       	brcs	.+48     	; 0x1628 <__fp_cmp+0x46>
    15f8:	12 16       	cp	r1, r18
    15fa:	13 06       	cpc	r1, r19
    15fc:	e4 07       	cpc	r30, r20
    15fe:	f5 07       	cpc	r31, r21
    1600:	98 f0       	brcs	.+38     	; 0x1628 <__fp_cmp+0x46>
    1602:	62 1b       	sub	r22, r18
    1604:	73 0b       	sbc	r23, r19
    1606:	84 0b       	sbc	r24, r20
    1608:	95 0b       	sbc	r25, r21
    160a:	39 f4       	brne	.+14     	; 0x161a <__fp_cmp+0x38>
    160c:	0a 26       	eor	r0, r26
    160e:	61 f0       	breq	.+24     	; 0x1628 <__fp_cmp+0x46>
    1610:	23 2b       	or	r18, r19
    1612:	24 2b       	or	r18, r20
    1614:	25 2b       	or	r18, r21
    1616:	21 f4       	brne	.+8      	; 0x1620 <__fp_cmp+0x3e>
    1618:	08 95       	ret
    161a:	0a 26       	eor	r0, r26
    161c:	09 f4       	brne	.+2      	; 0x1620 <__fp_cmp+0x3e>
    161e:	a1 40       	sbci	r26, 0x01	; 1
    1620:	a6 95       	lsr	r26
    1622:	8f ef       	ldi	r24, 0xFF	; 255
    1624:	81 1d       	adc	r24, r1
    1626:	81 1d       	adc	r24, r1
    1628:	08 95       	ret

0000162a <__fp_inf>:
    162a:	97 f9       	bld	r25, 7
    162c:	9f 67       	ori	r25, 0x7F	; 127
    162e:	80 e8       	ldi	r24, 0x80	; 128
    1630:	70 e0       	ldi	r23, 0x00	; 0
    1632:	60 e0       	ldi	r22, 0x00	; 0
    1634:	08 95       	ret

00001636 <__fp_nan>:
    1636:	9f ef       	ldi	r25, 0xFF	; 255
    1638:	80 ec       	ldi	r24, 0xC0	; 192
    163a:	08 95       	ret

0000163c <__fp_powser>:
    163c:	df 93       	push	r29
    163e:	cf 93       	push	r28
    1640:	1f 93       	push	r17
    1642:	0f 93       	push	r16
    1644:	ff 92       	push	r15
    1646:	ef 92       	push	r14
    1648:	df 92       	push	r13
    164a:	7b 01       	movw	r14, r22
    164c:	8c 01       	movw	r16, r24
    164e:	68 94       	set
    1650:	06 c0       	rjmp	.+12     	; 0x165e <__fp_powser+0x22>
    1652:	da 2e       	mov	r13, r26
    1654:	ef 01       	movw	r28, r30
    1656:	0e 94 a8 0b 	call	0x1750	; 0x1750 <__mulsf3x>
    165a:	fe 01       	movw	r30, r28
    165c:	e8 94       	clt
    165e:	a5 91       	lpm	r26, Z+
    1660:	25 91       	lpm	r18, Z+
    1662:	35 91       	lpm	r19, Z+
    1664:	45 91       	lpm	r20, Z+
    1666:	55 91       	lpm	r21, Z+
    1668:	a6 f3       	brts	.-24     	; 0x1652 <__fp_powser+0x16>
    166a:	ef 01       	movw	r28, r30
    166c:	0e 94 76 09 	call	0x12ec	; 0x12ec <__addsf3x>
    1670:	fe 01       	movw	r30, r28
    1672:	97 01       	movw	r18, r14
    1674:	a8 01       	movw	r20, r16
    1676:	da 94       	dec	r13
    1678:	69 f7       	brne	.-38     	; 0x1654 <__fp_powser+0x18>
    167a:	df 90       	pop	r13
    167c:	ef 90       	pop	r14
    167e:	ff 90       	pop	r15
    1680:	0f 91       	pop	r16
    1682:	1f 91       	pop	r17
    1684:	cf 91       	pop	r28
    1686:	df 91       	pop	r29
    1688:	08 95       	ret

0000168a <__fp_pscA>:
    168a:	00 24       	eor	r0, r0
    168c:	0a 94       	dec	r0
    168e:	16 16       	cp	r1, r22
    1690:	17 06       	cpc	r1, r23
    1692:	18 06       	cpc	r1, r24
    1694:	09 06       	cpc	r0, r25
    1696:	08 95       	ret

00001698 <__fp_pscB>:
    1698:	00 24       	eor	r0, r0
    169a:	0a 94       	dec	r0
    169c:	12 16       	cp	r1, r18
    169e:	13 06       	cpc	r1, r19
    16a0:	14 06       	cpc	r1, r20
    16a2:	05 06       	cpc	r0, r21
    16a4:	08 95       	ret

000016a6 <__fp_round>:
    16a6:	09 2e       	mov	r0, r25
    16a8:	03 94       	inc	r0
    16aa:	00 0c       	add	r0, r0
    16ac:	11 f4       	brne	.+4      	; 0x16b2 <__fp_round+0xc>
    16ae:	88 23       	and	r24, r24
    16b0:	52 f0       	brmi	.+20     	; 0x16c6 <__fp_round+0x20>
    16b2:	bb 0f       	add	r27, r27
    16b4:	40 f4       	brcc	.+16     	; 0x16c6 <__fp_round+0x20>
    16b6:	bf 2b       	or	r27, r31
    16b8:	11 f4       	brne	.+4      	; 0x16be <__fp_round+0x18>
    16ba:	60 ff       	sbrs	r22, 0
    16bc:	04 c0       	rjmp	.+8      	; 0x16c6 <__fp_round+0x20>
    16be:	6f 5f       	subi	r22, 0xFF	; 255
    16c0:	7f 4f       	sbci	r23, 0xFF	; 255
    16c2:	8f 4f       	sbci	r24, 0xFF	; 255
    16c4:	9f 4f       	sbci	r25, 0xFF	; 255
    16c6:	08 95       	ret

000016c8 <__fp_split3>:
    16c8:	57 fd       	sbrc	r21, 7
    16ca:	90 58       	subi	r25, 0x80	; 128
    16cc:	44 0f       	add	r20, r20
    16ce:	55 1f       	adc	r21, r21
    16d0:	59 f0       	breq	.+22     	; 0x16e8 <__fp_splitA+0x10>
    16d2:	5f 3f       	cpi	r21, 0xFF	; 255
    16d4:	71 f0       	breq	.+28     	; 0x16f2 <__fp_splitA+0x1a>
    16d6:	47 95       	ror	r20

000016d8 <__fp_splitA>:
    16d8:	88 0f       	add	r24, r24
    16da:	97 fb       	bst	r25, 7
    16dc:	99 1f       	adc	r25, r25
    16de:	61 f0       	breq	.+24     	; 0x16f8 <__fp_splitA+0x20>
    16e0:	9f 3f       	cpi	r25, 0xFF	; 255
    16e2:	79 f0       	breq	.+30     	; 0x1702 <__fp_splitA+0x2a>
    16e4:	87 95       	ror	r24
    16e6:	08 95       	ret
    16e8:	12 16       	cp	r1, r18
    16ea:	13 06       	cpc	r1, r19
    16ec:	14 06       	cpc	r1, r20
    16ee:	55 1f       	adc	r21, r21
    16f0:	f2 cf       	rjmp	.-28     	; 0x16d6 <__fp_split3+0xe>
    16f2:	46 95       	lsr	r20
    16f4:	f1 df       	rcall	.-30     	; 0x16d8 <__fp_splitA>
    16f6:	08 c0       	rjmp	.+16     	; 0x1708 <__fp_splitA+0x30>
    16f8:	16 16       	cp	r1, r22
    16fa:	17 06       	cpc	r1, r23
    16fc:	18 06       	cpc	r1, r24
    16fe:	99 1f       	adc	r25, r25
    1700:	f1 cf       	rjmp	.-30     	; 0x16e4 <__fp_splitA+0xc>
    1702:	86 95       	lsr	r24
    1704:	71 05       	cpc	r23, r1
    1706:	61 05       	cpc	r22, r1
    1708:	08 94       	sec
    170a:	08 95       	ret

0000170c <__fp_zero>:
    170c:	e8 94       	clt

0000170e <__fp_szero>:
    170e:	bb 27       	eor	r27, r27
    1710:	66 27       	eor	r22, r22
    1712:	77 27       	eor	r23, r23
    1714:	cb 01       	movw	r24, r22
    1716:	97 f9       	bld	r25, 7
    1718:	08 95       	ret

0000171a <inverse>:
    171a:	9b 01       	movw	r18, r22
    171c:	ac 01       	movw	r20, r24
    171e:	60 e0       	ldi	r22, 0x00	; 0
    1720:	70 e0       	ldi	r23, 0x00	; 0
    1722:	80 e8       	ldi	r24, 0x80	; 128
    1724:	9f e3       	ldi	r25, 0x3F	; 63
    1726:	0c 94 42 0a 	jmp	0x1484	; 0x1484 <__divsf3>

0000172a <__mulsf3>:
    172a:	0e 94 a8 0b 	call	0x1750	; 0x1750 <__mulsf3x>
    172e:	0c 94 53 0b 	jmp	0x16a6	; 0x16a6 <__fp_round>
    1732:	0e 94 45 0b 	call	0x168a	; 0x168a <__fp_pscA>
    1736:	38 f0       	brcs	.+14     	; 0x1746 <__mulsf3+0x1c>
    1738:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__fp_pscB>
    173c:	20 f0       	brcs	.+8      	; 0x1746 <__mulsf3+0x1c>
    173e:	95 23       	and	r25, r21
    1740:	11 f0       	breq	.+4      	; 0x1746 <__mulsf3+0x1c>
    1742:	0c 94 15 0b 	jmp	0x162a	; 0x162a <__fp_inf>
    1746:	0c 94 1b 0b 	jmp	0x1636	; 0x1636 <__fp_nan>
    174a:	11 24       	eor	r1, r1
    174c:	0c 94 87 0b 	jmp	0x170e	; 0x170e <__fp_szero>

00001750 <__mulsf3x>:
    1750:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <__fp_split3>
    1754:	70 f3       	brcs	.-36     	; 0x1732 <__mulsf3+0x8>

00001756 <__mulsf3_pse>:
    1756:	95 9f       	mul	r25, r21
    1758:	c1 f3       	breq	.-16     	; 0x174a <__mulsf3+0x20>
    175a:	95 0f       	add	r25, r21
    175c:	50 e0       	ldi	r21, 0x00	; 0
    175e:	55 1f       	adc	r21, r21
    1760:	62 9f       	mul	r22, r18
    1762:	f0 01       	movw	r30, r0
    1764:	72 9f       	mul	r23, r18
    1766:	bb 27       	eor	r27, r27
    1768:	f0 0d       	add	r31, r0
    176a:	b1 1d       	adc	r27, r1
    176c:	63 9f       	mul	r22, r19
    176e:	aa 27       	eor	r26, r26
    1770:	f0 0d       	add	r31, r0
    1772:	b1 1d       	adc	r27, r1
    1774:	aa 1f       	adc	r26, r26
    1776:	64 9f       	mul	r22, r20
    1778:	66 27       	eor	r22, r22
    177a:	b0 0d       	add	r27, r0
    177c:	a1 1d       	adc	r26, r1
    177e:	66 1f       	adc	r22, r22
    1780:	82 9f       	mul	r24, r18
    1782:	22 27       	eor	r18, r18
    1784:	b0 0d       	add	r27, r0
    1786:	a1 1d       	adc	r26, r1
    1788:	62 1f       	adc	r22, r18
    178a:	73 9f       	mul	r23, r19
    178c:	b0 0d       	add	r27, r0
    178e:	a1 1d       	adc	r26, r1
    1790:	62 1f       	adc	r22, r18
    1792:	83 9f       	mul	r24, r19
    1794:	a0 0d       	add	r26, r0
    1796:	61 1d       	adc	r22, r1
    1798:	22 1f       	adc	r18, r18
    179a:	74 9f       	mul	r23, r20
    179c:	33 27       	eor	r19, r19
    179e:	a0 0d       	add	r26, r0
    17a0:	61 1d       	adc	r22, r1
    17a2:	23 1f       	adc	r18, r19
    17a4:	84 9f       	mul	r24, r20
    17a6:	60 0d       	add	r22, r0
    17a8:	21 1d       	adc	r18, r1
    17aa:	82 2f       	mov	r24, r18
    17ac:	76 2f       	mov	r23, r22
    17ae:	6a 2f       	mov	r22, r26
    17b0:	11 24       	eor	r1, r1
    17b2:	9f 57       	subi	r25, 0x7F	; 127
    17b4:	50 40       	sbci	r21, 0x00	; 0
    17b6:	9a f0       	brmi	.+38     	; 0x17de <__mulsf3_pse+0x88>
    17b8:	f1 f0       	breq	.+60     	; 0x17f6 <__mulsf3_pse+0xa0>
    17ba:	88 23       	and	r24, r24
    17bc:	4a f0       	brmi	.+18     	; 0x17d0 <__mulsf3_pse+0x7a>
    17be:	ee 0f       	add	r30, r30
    17c0:	ff 1f       	adc	r31, r31
    17c2:	bb 1f       	adc	r27, r27
    17c4:	66 1f       	adc	r22, r22
    17c6:	77 1f       	adc	r23, r23
    17c8:	88 1f       	adc	r24, r24
    17ca:	91 50       	subi	r25, 0x01	; 1
    17cc:	50 40       	sbci	r21, 0x00	; 0
    17ce:	a9 f7       	brne	.-22     	; 0x17ba <__mulsf3_pse+0x64>
    17d0:	9e 3f       	cpi	r25, 0xFE	; 254
    17d2:	51 05       	cpc	r21, r1
    17d4:	80 f0       	brcs	.+32     	; 0x17f6 <__mulsf3_pse+0xa0>
    17d6:	0c 94 15 0b 	jmp	0x162a	; 0x162a <__fp_inf>
    17da:	0c 94 87 0b 	jmp	0x170e	; 0x170e <__fp_szero>
    17de:	5f 3f       	cpi	r21, 0xFF	; 255
    17e0:	e4 f3       	brlt	.-8      	; 0x17da <__mulsf3_pse+0x84>
    17e2:	98 3e       	cpi	r25, 0xE8	; 232
    17e4:	d4 f3       	brlt	.-12     	; 0x17da <__mulsf3_pse+0x84>
    17e6:	86 95       	lsr	r24
    17e8:	77 95       	ror	r23
    17ea:	67 95       	ror	r22
    17ec:	b7 95       	ror	r27
    17ee:	f7 95       	ror	r31
    17f0:	e7 95       	ror	r30
    17f2:	9f 5f       	subi	r25, 0xFF	; 255
    17f4:	c1 f7       	brne	.-16     	; 0x17e6 <__mulsf3_pse+0x90>
    17f6:	fe 2b       	or	r31, r30
    17f8:	88 0f       	add	r24, r24
    17fa:	91 1d       	adc	r25, r1
    17fc:	96 95       	lsr	r25
    17fe:	87 95       	ror	r24
    1800:	97 f9       	bld	r25, 7
    1802:	08 95       	ret

00001804 <square>:
    1804:	9b 01       	movw	r18, r22
    1806:	ac 01       	movw	r20, r24
    1808:	0c 94 95 0b 	jmp	0x172a	; 0x172a <__mulsf3>

0000180c <malloc>:
    180c:	0f 93       	push	r16
    180e:	1f 93       	push	r17
    1810:	cf 93       	push	r28
    1812:	df 93       	push	r29
    1814:	82 30       	cpi	r24, 0x02	; 2
    1816:	91 05       	cpc	r25, r1
    1818:	10 f4       	brcc	.+4      	; 0x181e <malloc+0x12>
    181a:	82 e0       	ldi	r24, 0x02	; 2
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	e0 91 94 01 	lds	r30, 0x0194	; 0x800194 <__flp>
    1822:	f0 91 95 01 	lds	r31, 0x0195	; 0x800195 <__flp+0x1>
    1826:	20 e0       	ldi	r18, 0x00	; 0
    1828:	30 e0       	ldi	r19, 0x00	; 0
    182a:	a0 e0       	ldi	r26, 0x00	; 0
    182c:	b0 e0       	ldi	r27, 0x00	; 0
    182e:	30 97       	sbiw	r30, 0x00	; 0
    1830:	19 f1       	breq	.+70     	; 0x1878 <malloc+0x6c>
    1832:	40 81       	ld	r20, Z
    1834:	51 81       	ldd	r21, Z+1	; 0x01
    1836:	02 81       	ldd	r16, Z+2	; 0x02
    1838:	13 81       	ldd	r17, Z+3	; 0x03
    183a:	48 17       	cp	r20, r24
    183c:	59 07       	cpc	r21, r25
    183e:	c8 f0       	brcs	.+50     	; 0x1872 <malloc+0x66>
    1840:	84 17       	cp	r24, r20
    1842:	95 07       	cpc	r25, r21
    1844:	69 f4       	brne	.+26     	; 0x1860 <malloc+0x54>
    1846:	10 97       	sbiw	r26, 0x00	; 0
    1848:	31 f0       	breq	.+12     	; 0x1856 <malloc+0x4a>
    184a:	12 96       	adiw	r26, 0x02	; 2
    184c:	0c 93       	st	X, r16
    184e:	12 97       	sbiw	r26, 0x02	; 2
    1850:	13 96       	adiw	r26, 0x03	; 3
    1852:	1c 93       	st	X, r17
    1854:	27 c0       	rjmp	.+78     	; 0x18a4 <malloc+0x98>
    1856:	00 93 94 01 	sts	0x0194, r16	; 0x800194 <__flp>
    185a:	10 93 95 01 	sts	0x0195, r17	; 0x800195 <__flp+0x1>
    185e:	22 c0       	rjmp	.+68     	; 0x18a4 <malloc+0x98>
    1860:	21 15       	cp	r18, r1
    1862:	31 05       	cpc	r19, r1
    1864:	19 f0       	breq	.+6      	; 0x186c <malloc+0x60>
    1866:	42 17       	cp	r20, r18
    1868:	53 07       	cpc	r21, r19
    186a:	18 f4       	brcc	.+6      	; 0x1872 <malloc+0x66>
    186c:	9a 01       	movw	r18, r20
    186e:	bd 01       	movw	r22, r26
    1870:	ef 01       	movw	r28, r30
    1872:	df 01       	movw	r26, r30
    1874:	f8 01       	movw	r30, r16
    1876:	db cf       	rjmp	.-74     	; 0x182e <malloc+0x22>
    1878:	21 15       	cp	r18, r1
    187a:	31 05       	cpc	r19, r1
    187c:	f9 f0       	breq	.+62     	; 0x18bc <malloc+0xb0>
    187e:	28 1b       	sub	r18, r24
    1880:	39 0b       	sbc	r19, r25
    1882:	24 30       	cpi	r18, 0x04	; 4
    1884:	31 05       	cpc	r19, r1
    1886:	80 f4       	brcc	.+32     	; 0x18a8 <malloc+0x9c>
    1888:	8a 81       	ldd	r24, Y+2	; 0x02
    188a:	9b 81       	ldd	r25, Y+3	; 0x03
    188c:	61 15       	cp	r22, r1
    188e:	71 05       	cpc	r23, r1
    1890:	21 f0       	breq	.+8      	; 0x189a <malloc+0x8e>
    1892:	fb 01       	movw	r30, r22
    1894:	93 83       	std	Z+3, r25	; 0x03
    1896:	82 83       	std	Z+2, r24	; 0x02
    1898:	04 c0       	rjmp	.+8      	; 0x18a2 <malloc+0x96>
    189a:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <__flp+0x1>
    189e:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <__flp>
    18a2:	fe 01       	movw	r30, r28
    18a4:	32 96       	adiw	r30, 0x02	; 2
    18a6:	44 c0       	rjmp	.+136    	; 0x1930 <malloc+0x124>
    18a8:	fe 01       	movw	r30, r28
    18aa:	e2 0f       	add	r30, r18
    18ac:	f3 1f       	adc	r31, r19
    18ae:	81 93       	st	Z+, r24
    18b0:	91 93       	st	Z+, r25
    18b2:	22 50       	subi	r18, 0x02	; 2
    18b4:	31 09       	sbc	r19, r1
    18b6:	39 83       	std	Y+1, r19	; 0x01
    18b8:	28 83       	st	Y, r18
    18ba:	3a c0       	rjmp	.+116    	; 0x1930 <malloc+0x124>
    18bc:	20 91 92 01 	lds	r18, 0x0192	; 0x800192 <__brkval>
    18c0:	30 91 93 01 	lds	r19, 0x0193	; 0x800193 <__brkval+0x1>
    18c4:	23 2b       	or	r18, r19
    18c6:	41 f4       	brne	.+16     	; 0x18d8 <malloc+0xcc>
    18c8:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    18cc:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    18d0:	30 93 93 01 	sts	0x0193, r19	; 0x800193 <__brkval+0x1>
    18d4:	20 93 92 01 	sts	0x0192, r18	; 0x800192 <__brkval>
    18d8:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    18dc:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    18e0:	21 15       	cp	r18, r1
    18e2:	31 05       	cpc	r19, r1
    18e4:	41 f4       	brne	.+16     	; 0x18f6 <malloc+0xea>
    18e6:	2d b7       	in	r18, 0x3d	; 61
    18e8:	3e b7       	in	r19, 0x3e	; 62
    18ea:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    18ee:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    18f2:	24 1b       	sub	r18, r20
    18f4:	35 0b       	sbc	r19, r21
    18f6:	e0 91 92 01 	lds	r30, 0x0192	; 0x800192 <__brkval>
    18fa:	f0 91 93 01 	lds	r31, 0x0193	; 0x800193 <__brkval+0x1>
    18fe:	e2 17       	cp	r30, r18
    1900:	f3 07       	cpc	r31, r19
    1902:	a0 f4       	brcc	.+40     	; 0x192c <malloc+0x120>
    1904:	2e 1b       	sub	r18, r30
    1906:	3f 0b       	sbc	r19, r31
    1908:	28 17       	cp	r18, r24
    190a:	39 07       	cpc	r19, r25
    190c:	78 f0       	brcs	.+30     	; 0x192c <malloc+0x120>
    190e:	ac 01       	movw	r20, r24
    1910:	4e 5f       	subi	r20, 0xFE	; 254
    1912:	5f 4f       	sbci	r21, 0xFF	; 255
    1914:	24 17       	cp	r18, r20
    1916:	35 07       	cpc	r19, r21
    1918:	48 f0       	brcs	.+18     	; 0x192c <malloc+0x120>
    191a:	4e 0f       	add	r20, r30
    191c:	5f 1f       	adc	r21, r31
    191e:	50 93 93 01 	sts	0x0193, r21	; 0x800193 <__brkval+0x1>
    1922:	40 93 92 01 	sts	0x0192, r20	; 0x800192 <__brkval>
    1926:	81 93       	st	Z+, r24
    1928:	91 93       	st	Z+, r25
    192a:	02 c0       	rjmp	.+4      	; 0x1930 <malloc+0x124>
    192c:	e0 e0       	ldi	r30, 0x00	; 0
    192e:	f0 e0       	ldi	r31, 0x00	; 0
    1930:	cf 01       	movw	r24, r30
    1932:	df 91       	pop	r29
    1934:	cf 91       	pop	r28
    1936:	1f 91       	pop	r17
    1938:	0f 91       	pop	r16
    193a:	08 95       	ret

0000193c <free>:
    193c:	cf 93       	push	r28
    193e:	df 93       	push	r29
    1940:	00 97       	sbiw	r24, 0x00	; 0
    1942:	09 f4       	brne	.+2      	; 0x1946 <free+0xa>
    1944:	81 c0       	rjmp	.+258    	; 0x1a48 <free+0x10c>
    1946:	fc 01       	movw	r30, r24
    1948:	32 97       	sbiw	r30, 0x02	; 2
    194a:	13 82       	std	Z+3, r1	; 0x03
    194c:	12 82       	std	Z+2, r1	; 0x02
    194e:	a0 91 94 01 	lds	r26, 0x0194	; 0x800194 <__flp>
    1952:	b0 91 95 01 	lds	r27, 0x0195	; 0x800195 <__flp+0x1>
    1956:	10 97       	sbiw	r26, 0x00	; 0
    1958:	81 f4       	brne	.+32     	; 0x197a <free+0x3e>
    195a:	20 81       	ld	r18, Z
    195c:	31 81       	ldd	r19, Z+1	; 0x01
    195e:	82 0f       	add	r24, r18
    1960:	93 1f       	adc	r25, r19
    1962:	20 91 92 01 	lds	r18, 0x0192	; 0x800192 <__brkval>
    1966:	30 91 93 01 	lds	r19, 0x0193	; 0x800193 <__brkval+0x1>
    196a:	28 17       	cp	r18, r24
    196c:	39 07       	cpc	r19, r25
    196e:	51 f5       	brne	.+84     	; 0x19c4 <free+0x88>
    1970:	f0 93 93 01 	sts	0x0193, r31	; 0x800193 <__brkval+0x1>
    1974:	e0 93 92 01 	sts	0x0192, r30	; 0x800192 <__brkval>
    1978:	67 c0       	rjmp	.+206    	; 0x1a48 <free+0x10c>
    197a:	ed 01       	movw	r28, r26
    197c:	20 e0       	ldi	r18, 0x00	; 0
    197e:	30 e0       	ldi	r19, 0x00	; 0
    1980:	ce 17       	cp	r28, r30
    1982:	df 07       	cpc	r29, r31
    1984:	40 f4       	brcc	.+16     	; 0x1996 <free+0x5a>
    1986:	4a 81       	ldd	r20, Y+2	; 0x02
    1988:	5b 81       	ldd	r21, Y+3	; 0x03
    198a:	9e 01       	movw	r18, r28
    198c:	41 15       	cp	r20, r1
    198e:	51 05       	cpc	r21, r1
    1990:	f1 f0       	breq	.+60     	; 0x19ce <free+0x92>
    1992:	ea 01       	movw	r28, r20
    1994:	f5 cf       	rjmp	.-22     	; 0x1980 <free+0x44>
    1996:	d3 83       	std	Z+3, r29	; 0x03
    1998:	c2 83       	std	Z+2, r28	; 0x02
    199a:	40 81       	ld	r20, Z
    199c:	51 81       	ldd	r21, Z+1	; 0x01
    199e:	84 0f       	add	r24, r20
    19a0:	95 1f       	adc	r25, r21
    19a2:	c8 17       	cp	r28, r24
    19a4:	d9 07       	cpc	r29, r25
    19a6:	59 f4       	brne	.+22     	; 0x19be <free+0x82>
    19a8:	88 81       	ld	r24, Y
    19aa:	99 81       	ldd	r25, Y+1	; 0x01
    19ac:	84 0f       	add	r24, r20
    19ae:	95 1f       	adc	r25, r21
    19b0:	02 96       	adiw	r24, 0x02	; 2
    19b2:	91 83       	std	Z+1, r25	; 0x01
    19b4:	80 83       	st	Z, r24
    19b6:	8a 81       	ldd	r24, Y+2	; 0x02
    19b8:	9b 81       	ldd	r25, Y+3	; 0x03
    19ba:	93 83       	std	Z+3, r25	; 0x03
    19bc:	82 83       	std	Z+2, r24	; 0x02
    19be:	21 15       	cp	r18, r1
    19c0:	31 05       	cpc	r19, r1
    19c2:	29 f4       	brne	.+10     	; 0x19ce <free+0x92>
    19c4:	f0 93 95 01 	sts	0x0195, r31	; 0x800195 <__flp+0x1>
    19c8:	e0 93 94 01 	sts	0x0194, r30	; 0x800194 <__flp>
    19cc:	3d c0       	rjmp	.+122    	; 0x1a48 <free+0x10c>
    19ce:	e9 01       	movw	r28, r18
    19d0:	fb 83       	std	Y+3, r31	; 0x03
    19d2:	ea 83       	std	Y+2, r30	; 0x02
    19d4:	49 91       	ld	r20, Y+
    19d6:	59 91       	ld	r21, Y+
    19d8:	c4 0f       	add	r28, r20
    19da:	d5 1f       	adc	r29, r21
    19dc:	ec 17       	cp	r30, r28
    19de:	fd 07       	cpc	r31, r29
    19e0:	61 f4       	brne	.+24     	; 0x19fa <free+0xbe>
    19e2:	80 81       	ld	r24, Z
    19e4:	91 81       	ldd	r25, Z+1	; 0x01
    19e6:	84 0f       	add	r24, r20
    19e8:	95 1f       	adc	r25, r21
    19ea:	02 96       	adiw	r24, 0x02	; 2
    19ec:	e9 01       	movw	r28, r18
    19ee:	99 83       	std	Y+1, r25	; 0x01
    19f0:	88 83       	st	Y, r24
    19f2:	82 81       	ldd	r24, Z+2	; 0x02
    19f4:	93 81       	ldd	r25, Z+3	; 0x03
    19f6:	9b 83       	std	Y+3, r25	; 0x03
    19f8:	8a 83       	std	Y+2, r24	; 0x02
    19fa:	e0 e0       	ldi	r30, 0x00	; 0
    19fc:	f0 e0       	ldi	r31, 0x00	; 0
    19fe:	12 96       	adiw	r26, 0x02	; 2
    1a00:	8d 91       	ld	r24, X+
    1a02:	9c 91       	ld	r25, X
    1a04:	13 97       	sbiw	r26, 0x03	; 3
    1a06:	00 97       	sbiw	r24, 0x00	; 0
    1a08:	19 f0       	breq	.+6      	; 0x1a10 <free+0xd4>
    1a0a:	fd 01       	movw	r30, r26
    1a0c:	dc 01       	movw	r26, r24
    1a0e:	f7 cf       	rjmp	.-18     	; 0x19fe <free+0xc2>
    1a10:	8d 91       	ld	r24, X+
    1a12:	9c 91       	ld	r25, X
    1a14:	11 97       	sbiw	r26, 0x01	; 1
    1a16:	9d 01       	movw	r18, r26
    1a18:	2e 5f       	subi	r18, 0xFE	; 254
    1a1a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a1c:	82 0f       	add	r24, r18
    1a1e:	93 1f       	adc	r25, r19
    1a20:	20 91 92 01 	lds	r18, 0x0192	; 0x800192 <__brkval>
    1a24:	30 91 93 01 	lds	r19, 0x0193	; 0x800193 <__brkval+0x1>
    1a28:	28 17       	cp	r18, r24
    1a2a:	39 07       	cpc	r19, r25
    1a2c:	69 f4       	brne	.+26     	; 0x1a48 <free+0x10c>
    1a2e:	30 97       	sbiw	r30, 0x00	; 0
    1a30:	29 f4       	brne	.+10     	; 0x1a3c <free+0x100>
    1a32:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <__flp+0x1>
    1a36:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <__flp>
    1a3a:	02 c0       	rjmp	.+4      	; 0x1a40 <free+0x104>
    1a3c:	13 82       	std	Z+3, r1	; 0x03
    1a3e:	12 82       	std	Z+2, r1	; 0x02
    1a40:	b0 93 93 01 	sts	0x0193, r27	; 0x800193 <__brkval+0x1>
    1a44:	a0 93 92 01 	sts	0x0192, r26	; 0x800192 <__brkval>
    1a48:	df 91       	pop	r29
    1a4a:	cf 91       	pop	r28
    1a4c:	08 95       	ret

00001a4e <printf>:
    1a4e:	a0 e0       	ldi	r26, 0x00	; 0
    1a50:	b0 e0       	ldi	r27, 0x00	; 0
    1a52:	ed e2       	ldi	r30, 0x2D	; 45
    1a54:	fd e0       	ldi	r31, 0x0D	; 13
    1a56:	0c 94 12 10 	jmp	0x2024	; 0x2024 <__prologue_saves__+0x20>
    1a5a:	ae 01       	movw	r20, r28
    1a5c:	4b 5f       	subi	r20, 0xFB	; 251
    1a5e:	5f 4f       	sbci	r21, 0xFF	; 255
    1a60:	fa 01       	movw	r30, r20
    1a62:	61 91       	ld	r22, Z+
    1a64:	71 91       	ld	r23, Z+
    1a66:	af 01       	movw	r20, r30
    1a68:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <__iob+0x2>
    1a6c:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <__iob+0x3>
    1a70:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <vfprintf>
    1a74:	e2 e0       	ldi	r30, 0x02	; 2
    1a76:	0c 94 2e 10 	jmp	0x205c	; 0x205c <__epilogue_restores__+0x20>

00001a7a <vfprintf>:
    1a7a:	ab e0       	ldi	r26, 0x0B	; 11
    1a7c:	b0 e0       	ldi	r27, 0x00	; 0
    1a7e:	e3 e4       	ldi	r30, 0x43	; 67
    1a80:	fd e0       	ldi	r31, 0x0D	; 13
    1a82:	0c 94 02 10 	jmp	0x2004	; 0x2004 <__prologue_saves__>
    1a86:	6c 01       	movw	r12, r24
    1a88:	7b 01       	movw	r14, r22
    1a8a:	8a 01       	movw	r16, r20
    1a8c:	fc 01       	movw	r30, r24
    1a8e:	17 82       	std	Z+7, r1	; 0x07
    1a90:	16 82       	std	Z+6, r1	; 0x06
    1a92:	83 81       	ldd	r24, Z+3	; 0x03
    1a94:	81 ff       	sbrs	r24, 1
    1a96:	cc c1       	rjmp	.+920    	; 0x1e30 <vfprintf+0x3b6>
    1a98:	ce 01       	movw	r24, r28
    1a9a:	01 96       	adiw	r24, 0x01	; 1
    1a9c:	3c 01       	movw	r6, r24
    1a9e:	f6 01       	movw	r30, r12
    1aa0:	93 81       	ldd	r25, Z+3	; 0x03
    1aa2:	f7 01       	movw	r30, r14
    1aa4:	93 fd       	sbrc	r25, 3
    1aa6:	85 91       	lpm	r24, Z+
    1aa8:	93 ff       	sbrs	r25, 3
    1aaa:	81 91       	ld	r24, Z+
    1aac:	7f 01       	movw	r14, r30
    1aae:	88 23       	and	r24, r24
    1ab0:	09 f4       	brne	.+2      	; 0x1ab4 <vfprintf+0x3a>
    1ab2:	ba c1       	rjmp	.+884    	; 0x1e28 <vfprintf+0x3ae>
    1ab4:	85 32       	cpi	r24, 0x25	; 37
    1ab6:	39 f4       	brne	.+14     	; 0x1ac6 <vfprintf+0x4c>
    1ab8:	93 fd       	sbrc	r25, 3
    1aba:	85 91       	lpm	r24, Z+
    1abc:	93 ff       	sbrs	r25, 3
    1abe:	81 91       	ld	r24, Z+
    1ac0:	7f 01       	movw	r14, r30
    1ac2:	85 32       	cpi	r24, 0x25	; 37
    1ac4:	29 f4       	brne	.+10     	; 0x1ad0 <vfprintf+0x56>
    1ac6:	b6 01       	movw	r22, r12
    1ac8:	90 e0       	ldi	r25, 0x00	; 0
    1aca:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <fputc>
    1ace:	e7 cf       	rjmp	.-50     	; 0x1a9e <vfprintf+0x24>
    1ad0:	91 2c       	mov	r9, r1
    1ad2:	21 2c       	mov	r2, r1
    1ad4:	31 2c       	mov	r3, r1
    1ad6:	ff e1       	ldi	r31, 0x1F	; 31
    1ad8:	f3 15       	cp	r31, r3
    1ada:	d8 f0       	brcs	.+54     	; 0x1b12 <vfprintf+0x98>
    1adc:	8b 32       	cpi	r24, 0x2B	; 43
    1ade:	79 f0       	breq	.+30     	; 0x1afe <vfprintf+0x84>
    1ae0:	38 f4       	brcc	.+14     	; 0x1af0 <vfprintf+0x76>
    1ae2:	80 32       	cpi	r24, 0x20	; 32
    1ae4:	79 f0       	breq	.+30     	; 0x1b04 <vfprintf+0x8a>
    1ae6:	83 32       	cpi	r24, 0x23	; 35
    1ae8:	a1 f4       	brne	.+40     	; 0x1b12 <vfprintf+0x98>
    1aea:	23 2d       	mov	r18, r3
    1aec:	20 61       	ori	r18, 0x10	; 16
    1aee:	1d c0       	rjmp	.+58     	; 0x1b2a <vfprintf+0xb0>
    1af0:	8d 32       	cpi	r24, 0x2D	; 45
    1af2:	61 f0       	breq	.+24     	; 0x1b0c <vfprintf+0x92>
    1af4:	80 33       	cpi	r24, 0x30	; 48
    1af6:	69 f4       	brne	.+26     	; 0x1b12 <vfprintf+0x98>
    1af8:	23 2d       	mov	r18, r3
    1afa:	21 60       	ori	r18, 0x01	; 1
    1afc:	16 c0       	rjmp	.+44     	; 0x1b2a <vfprintf+0xb0>
    1afe:	83 2d       	mov	r24, r3
    1b00:	82 60       	ori	r24, 0x02	; 2
    1b02:	38 2e       	mov	r3, r24
    1b04:	e3 2d       	mov	r30, r3
    1b06:	e4 60       	ori	r30, 0x04	; 4
    1b08:	3e 2e       	mov	r3, r30
    1b0a:	2a c0       	rjmp	.+84     	; 0x1b60 <vfprintf+0xe6>
    1b0c:	f3 2d       	mov	r31, r3
    1b0e:	f8 60       	ori	r31, 0x08	; 8
    1b10:	1d c0       	rjmp	.+58     	; 0x1b4c <vfprintf+0xd2>
    1b12:	37 fc       	sbrc	r3, 7
    1b14:	2d c0       	rjmp	.+90     	; 0x1b70 <vfprintf+0xf6>
    1b16:	20 ed       	ldi	r18, 0xD0	; 208
    1b18:	28 0f       	add	r18, r24
    1b1a:	2a 30       	cpi	r18, 0x0A	; 10
    1b1c:	40 f0       	brcs	.+16     	; 0x1b2e <vfprintf+0xb4>
    1b1e:	8e 32       	cpi	r24, 0x2E	; 46
    1b20:	b9 f4       	brne	.+46     	; 0x1b50 <vfprintf+0xd6>
    1b22:	36 fc       	sbrc	r3, 6
    1b24:	81 c1       	rjmp	.+770    	; 0x1e28 <vfprintf+0x3ae>
    1b26:	23 2d       	mov	r18, r3
    1b28:	20 64       	ori	r18, 0x40	; 64
    1b2a:	32 2e       	mov	r3, r18
    1b2c:	19 c0       	rjmp	.+50     	; 0x1b60 <vfprintf+0xe6>
    1b2e:	36 fe       	sbrs	r3, 6
    1b30:	06 c0       	rjmp	.+12     	; 0x1b3e <vfprintf+0xc4>
    1b32:	8a e0       	ldi	r24, 0x0A	; 10
    1b34:	98 9e       	mul	r9, r24
    1b36:	20 0d       	add	r18, r0
    1b38:	11 24       	eor	r1, r1
    1b3a:	92 2e       	mov	r9, r18
    1b3c:	11 c0       	rjmp	.+34     	; 0x1b60 <vfprintf+0xe6>
    1b3e:	ea e0       	ldi	r30, 0x0A	; 10
    1b40:	2e 9e       	mul	r2, r30
    1b42:	20 0d       	add	r18, r0
    1b44:	11 24       	eor	r1, r1
    1b46:	22 2e       	mov	r2, r18
    1b48:	f3 2d       	mov	r31, r3
    1b4a:	f0 62       	ori	r31, 0x20	; 32
    1b4c:	3f 2e       	mov	r3, r31
    1b4e:	08 c0       	rjmp	.+16     	; 0x1b60 <vfprintf+0xe6>
    1b50:	8c 36       	cpi	r24, 0x6C	; 108
    1b52:	21 f4       	brne	.+8      	; 0x1b5c <vfprintf+0xe2>
    1b54:	83 2d       	mov	r24, r3
    1b56:	80 68       	ori	r24, 0x80	; 128
    1b58:	38 2e       	mov	r3, r24
    1b5a:	02 c0       	rjmp	.+4      	; 0x1b60 <vfprintf+0xe6>
    1b5c:	88 36       	cpi	r24, 0x68	; 104
    1b5e:	41 f4       	brne	.+16     	; 0x1b70 <vfprintf+0xf6>
    1b60:	f7 01       	movw	r30, r14
    1b62:	93 fd       	sbrc	r25, 3
    1b64:	85 91       	lpm	r24, Z+
    1b66:	93 ff       	sbrs	r25, 3
    1b68:	81 91       	ld	r24, Z+
    1b6a:	7f 01       	movw	r14, r30
    1b6c:	81 11       	cpse	r24, r1
    1b6e:	b3 cf       	rjmp	.-154    	; 0x1ad6 <vfprintf+0x5c>
    1b70:	98 2f       	mov	r25, r24
    1b72:	9f 7d       	andi	r25, 0xDF	; 223
    1b74:	95 54       	subi	r25, 0x45	; 69
    1b76:	93 30       	cpi	r25, 0x03	; 3
    1b78:	28 f4       	brcc	.+10     	; 0x1b84 <vfprintf+0x10a>
    1b7a:	0c 5f       	subi	r16, 0xFC	; 252
    1b7c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b7e:	9f e3       	ldi	r25, 0x3F	; 63
    1b80:	99 83       	std	Y+1, r25	; 0x01
    1b82:	0d c0       	rjmp	.+26     	; 0x1b9e <vfprintf+0x124>
    1b84:	83 36       	cpi	r24, 0x63	; 99
    1b86:	31 f0       	breq	.+12     	; 0x1b94 <vfprintf+0x11a>
    1b88:	83 37       	cpi	r24, 0x73	; 115
    1b8a:	71 f0       	breq	.+28     	; 0x1ba8 <vfprintf+0x12e>
    1b8c:	83 35       	cpi	r24, 0x53	; 83
    1b8e:	09 f0       	breq	.+2      	; 0x1b92 <vfprintf+0x118>
    1b90:	59 c0       	rjmp	.+178    	; 0x1c44 <vfprintf+0x1ca>
    1b92:	21 c0       	rjmp	.+66     	; 0x1bd6 <vfprintf+0x15c>
    1b94:	f8 01       	movw	r30, r16
    1b96:	80 81       	ld	r24, Z
    1b98:	89 83       	std	Y+1, r24	; 0x01
    1b9a:	0e 5f       	subi	r16, 0xFE	; 254
    1b9c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b9e:	88 24       	eor	r8, r8
    1ba0:	83 94       	inc	r8
    1ba2:	91 2c       	mov	r9, r1
    1ba4:	53 01       	movw	r10, r6
    1ba6:	13 c0       	rjmp	.+38     	; 0x1bce <vfprintf+0x154>
    1ba8:	28 01       	movw	r4, r16
    1baa:	f2 e0       	ldi	r31, 0x02	; 2
    1bac:	4f 0e       	add	r4, r31
    1bae:	51 1c       	adc	r5, r1
    1bb0:	f8 01       	movw	r30, r16
    1bb2:	a0 80       	ld	r10, Z
    1bb4:	b1 80       	ldd	r11, Z+1	; 0x01
    1bb6:	36 fe       	sbrs	r3, 6
    1bb8:	03 c0       	rjmp	.+6      	; 0x1bc0 <vfprintf+0x146>
    1bba:	69 2d       	mov	r22, r9
    1bbc:	70 e0       	ldi	r23, 0x00	; 0
    1bbe:	02 c0       	rjmp	.+4      	; 0x1bc4 <vfprintf+0x14a>
    1bc0:	6f ef       	ldi	r22, 0xFF	; 255
    1bc2:	7f ef       	ldi	r23, 0xFF	; 255
    1bc4:	c5 01       	movw	r24, r10
    1bc6:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <strnlen>
    1bca:	4c 01       	movw	r8, r24
    1bcc:	82 01       	movw	r16, r4
    1bce:	f3 2d       	mov	r31, r3
    1bd0:	ff 77       	andi	r31, 0x7F	; 127
    1bd2:	3f 2e       	mov	r3, r31
    1bd4:	16 c0       	rjmp	.+44     	; 0x1c02 <vfprintf+0x188>
    1bd6:	28 01       	movw	r4, r16
    1bd8:	22 e0       	ldi	r18, 0x02	; 2
    1bda:	42 0e       	add	r4, r18
    1bdc:	51 1c       	adc	r5, r1
    1bde:	f8 01       	movw	r30, r16
    1be0:	a0 80       	ld	r10, Z
    1be2:	b1 80       	ldd	r11, Z+1	; 0x01
    1be4:	36 fe       	sbrs	r3, 6
    1be6:	03 c0       	rjmp	.+6      	; 0x1bee <vfprintf+0x174>
    1be8:	69 2d       	mov	r22, r9
    1bea:	70 e0       	ldi	r23, 0x00	; 0
    1bec:	02 c0       	rjmp	.+4      	; 0x1bf2 <vfprintf+0x178>
    1bee:	6f ef       	ldi	r22, 0xFF	; 255
    1bf0:	7f ef       	ldi	r23, 0xFF	; 255
    1bf2:	c5 01       	movw	r24, r10
    1bf4:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <strnlen_P>
    1bf8:	4c 01       	movw	r8, r24
    1bfa:	f3 2d       	mov	r31, r3
    1bfc:	f0 68       	ori	r31, 0x80	; 128
    1bfe:	3f 2e       	mov	r3, r31
    1c00:	82 01       	movw	r16, r4
    1c02:	33 fc       	sbrc	r3, 3
    1c04:	1b c0       	rjmp	.+54     	; 0x1c3c <vfprintf+0x1c2>
    1c06:	82 2d       	mov	r24, r2
    1c08:	90 e0       	ldi	r25, 0x00	; 0
    1c0a:	88 16       	cp	r8, r24
    1c0c:	99 06       	cpc	r9, r25
    1c0e:	b0 f4       	brcc	.+44     	; 0x1c3c <vfprintf+0x1c2>
    1c10:	b6 01       	movw	r22, r12
    1c12:	80 e2       	ldi	r24, 0x20	; 32
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <fputc>
    1c1a:	2a 94       	dec	r2
    1c1c:	f4 cf       	rjmp	.-24     	; 0x1c06 <vfprintf+0x18c>
    1c1e:	f5 01       	movw	r30, r10
    1c20:	37 fc       	sbrc	r3, 7
    1c22:	85 91       	lpm	r24, Z+
    1c24:	37 fe       	sbrs	r3, 7
    1c26:	81 91       	ld	r24, Z+
    1c28:	5f 01       	movw	r10, r30
    1c2a:	b6 01       	movw	r22, r12
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <fputc>
    1c32:	21 10       	cpse	r2, r1
    1c34:	2a 94       	dec	r2
    1c36:	21 e0       	ldi	r18, 0x01	; 1
    1c38:	82 1a       	sub	r8, r18
    1c3a:	91 08       	sbc	r9, r1
    1c3c:	81 14       	cp	r8, r1
    1c3e:	91 04       	cpc	r9, r1
    1c40:	71 f7       	brne	.-36     	; 0x1c1e <vfprintf+0x1a4>
    1c42:	e8 c0       	rjmp	.+464    	; 0x1e14 <vfprintf+0x39a>
    1c44:	84 36       	cpi	r24, 0x64	; 100
    1c46:	11 f0       	breq	.+4      	; 0x1c4c <vfprintf+0x1d2>
    1c48:	89 36       	cpi	r24, 0x69	; 105
    1c4a:	41 f5       	brne	.+80     	; 0x1c9c <vfprintf+0x222>
    1c4c:	f8 01       	movw	r30, r16
    1c4e:	37 fe       	sbrs	r3, 7
    1c50:	07 c0       	rjmp	.+14     	; 0x1c60 <vfprintf+0x1e6>
    1c52:	60 81       	ld	r22, Z
    1c54:	71 81       	ldd	r23, Z+1	; 0x01
    1c56:	82 81       	ldd	r24, Z+2	; 0x02
    1c58:	93 81       	ldd	r25, Z+3	; 0x03
    1c5a:	0c 5f       	subi	r16, 0xFC	; 252
    1c5c:	1f 4f       	sbci	r17, 0xFF	; 255
    1c5e:	08 c0       	rjmp	.+16     	; 0x1c70 <vfprintf+0x1f6>
    1c60:	60 81       	ld	r22, Z
    1c62:	71 81       	ldd	r23, Z+1	; 0x01
    1c64:	07 2e       	mov	r0, r23
    1c66:	00 0c       	add	r0, r0
    1c68:	88 0b       	sbc	r24, r24
    1c6a:	99 0b       	sbc	r25, r25
    1c6c:	0e 5f       	subi	r16, 0xFE	; 254
    1c6e:	1f 4f       	sbci	r17, 0xFF	; 255
    1c70:	f3 2d       	mov	r31, r3
    1c72:	ff 76       	andi	r31, 0x6F	; 111
    1c74:	3f 2e       	mov	r3, r31
    1c76:	97 ff       	sbrs	r25, 7
    1c78:	09 c0       	rjmp	.+18     	; 0x1c8c <vfprintf+0x212>
    1c7a:	90 95       	com	r25
    1c7c:	80 95       	com	r24
    1c7e:	70 95       	com	r23
    1c80:	61 95       	neg	r22
    1c82:	7f 4f       	sbci	r23, 0xFF	; 255
    1c84:	8f 4f       	sbci	r24, 0xFF	; 255
    1c86:	9f 4f       	sbci	r25, 0xFF	; 255
    1c88:	f0 68       	ori	r31, 0x80	; 128
    1c8a:	3f 2e       	mov	r3, r31
    1c8c:	2a e0       	ldi	r18, 0x0A	; 10
    1c8e:	30 e0       	ldi	r19, 0x00	; 0
    1c90:	a3 01       	movw	r20, r6
    1c92:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <__ultoa_invert>
    1c96:	88 2e       	mov	r8, r24
    1c98:	86 18       	sub	r8, r6
    1c9a:	45 c0       	rjmp	.+138    	; 0x1d26 <vfprintf+0x2ac>
    1c9c:	85 37       	cpi	r24, 0x75	; 117
    1c9e:	31 f4       	brne	.+12     	; 0x1cac <vfprintf+0x232>
    1ca0:	23 2d       	mov	r18, r3
    1ca2:	2f 7e       	andi	r18, 0xEF	; 239
    1ca4:	b2 2e       	mov	r11, r18
    1ca6:	2a e0       	ldi	r18, 0x0A	; 10
    1ca8:	30 e0       	ldi	r19, 0x00	; 0
    1caa:	25 c0       	rjmp	.+74     	; 0x1cf6 <vfprintf+0x27c>
    1cac:	93 2d       	mov	r25, r3
    1cae:	99 7f       	andi	r25, 0xF9	; 249
    1cb0:	b9 2e       	mov	r11, r25
    1cb2:	8f 36       	cpi	r24, 0x6F	; 111
    1cb4:	c1 f0       	breq	.+48     	; 0x1ce6 <vfprintf+0x26c>
    1cb6:	18 f4       	brcc	.+6      	; 0x1cbe <vfprintf+0x244>
    1cb8:	88 35       	cpi	r24, 0x58	; 88
    1cba:	79 f0       	breq	.+30     	; 0x1cda <vfprintf+0x260>
    1cbc:	b5 c0       	rjmp	.+362    	; 0x1e28 <vfprintf+0x3ae>
    1cbe:	80 37       	cpi	r24, 0x70	; 112
    1cc0:	19 f0       	breq	.+6      	; 0x1cc8 <vfprintf+0x24e>
    1cc2:	88 37       	cpi	r24, 0x78	; 120
    1cc4:	21 f0       	breq	.+8      	; 0x1cce <vfprintf+0x254>
    1cc6:	b0 c0       	rjmp	.+352    	; 0x1e28 <vfprintf+0x3ae>
    1cc8:	e9 2f       	mov	r30, r25
    1cca:	e0 61       	ori	r30, 0x10	; 16
    1ccc:	be 2e       	mov	r11, r30
    1cce:	b4 fe       	sbrs	r11, 4
    1cd0:	0d c0       	rjmp	.+26     	; 0x1cec <vfprintf+0x272>
    1cd2:	fb 2d       	mov	r31, r11
    1cd4:	f4 60       	ori	r31, 0x04	; 4
    1cd6:	bf 2e       	mov	r11, r31
    1cd8:	09 c0       	rjmp	.+18     	; 0x1cec <vfprintf+0x272>
    1cda:	34 fe       	sbrs	r3, 4
    1cdc:	0a c0       	rjmp	.+20     	; 0x1cf2 <vfprintf+0x278>
    1cde:	29 2f       	mov	r18, r25
    1ce0:	26 60       	ori	r18, 0x06	; 6
    1ce2:	b2 2e       	mov	r11, r18
    1ce4:	06 c0       	rjmp	.+12     	; 0x1cf2 <vfprintf+0x278>
    1ce6:	28 e0       	ldi	r18, 0x08	; 8
    1ce8:	30 e0       	ldi	r19, 0x00	; 0
    1cea:	05 c0       	rjmp	.+10     	; 0x1cf6 <vfprintf+0x27c>
    1cec:	20 e1       	ldi	r18, 0x10	; 16
    1cee:	30 e0       	ldi	r19, 0x00	; 0
    1cf0:	02 c0       	rjmp	.+4      	; 0x1cf6 <vfprintf+0x27c>
    1cf2:	20 e1       	ldi	r18, 0x10	; 16
    1cf4:	32 e0       	ldi	r19, 0x02	; 2
    1cf6:	f8 01       	movw	r30, r16
    1cf8:	b7 fe       	sbrs	r11, 7
    1cfa:	07 c0       	rjmp	.+14     	; 0x1d0a <vfprintf+0x290>
    1cfc:	60 81       	ld	r22, Z
    1cfe:	71 81       	ldd	r23, Z+1	; 0x01
    1d00:	82 81       	ldd	r24, Z+2	; 0x02
    1d02:	93 81       	ldd	r25, Z+3	; 0x03
    1d04:	0c 5f       	subi	r16, 0xFC	; 252
    1d06:	1f 4f       	sbci	r17, 0xFF	; 255
    1d08:	06 c0       	rjmp	.+12     	; 0x1d16 <vfprintf+0x29c>
    1d0a:	60 81       	ld	r22, Z
    1d0c:	71 81       	ldd	r23, Z+1	; 0x01
    1d0e:	80 e0       	ldi	r24, 0x00	; 0
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	0e 5f       	subi	r16, 0xFE	; 254
    1d14:	1f 4f       	sbci	r17, 0xFF	; 255
    1d16:	a3 01       	movw	r20, r6
    1d18:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <__ultoa_invert>
    1d1c:	88 2e       	mov	r8, r24
    1d1e:	86 18       	sub	r8, r6
    1d20:	fb 2d       	mov	r31, r11
    1d22:	ff 77       	andi	r31, 0x7F	; 127
    1d24:	3f 2e       	mov	r3, r31
    1d26:	36 fe       	sbrs	r3, 6
    1d28:	0d c0       	rjmp	.+26     	; 0x1d44 <vfprintf+0x2ca>
    1d2a:	23 2d       	mov	r18, r3
    1d2c:	2e 7f       	andi	r18, 0xFE	; 254
    1d2e:	a2 2e       	mov	r10, r18
    1d30:	89 14       	cp	r8, r9
    1d32:	58 f4       	brcc	.+22     	; 0x1d4a <vfprintf+0x2d0>
    1d34:	34 fe       	sbrs	r3, 4
    1d36:	0b c0       	rjmp	.+22     	; 0x1d4e <vfprintf+0x2d4>
    1d38:	32 fc       	sbrc	r3, 2
    1d3a:	09 c0       	rjmp	.+18     	; 0x1d4e <vfprintf+0x2d4>
    1d3c:	83 2d       	mov	r24, r3
    1d3e:	8e 7e       	andi	r24, 0xEE	; 238
    1d40:	a8 2e       	mov	r10, r24
    1d42:	05 c0       	rjmp	.+10     	; 0x1d4e <vfprintf+0x2d4>
    1d44:	b8 2c       	mov	r11, r8
    1d46:	a3 2c       	mov	r10, r3
    1d48:	03 c0       	rjmp	.+6      	; 0x1d50 <vfprintf+0x2d6>
    1d4a:	b8 2c       	mov	r11, r8
    1d4c:	01 c0       	rjmp	.+2      	; 0x1d50 <vfprintf+0x2d6>
    1d4e:	b9 2c       	mov	r11, r9
    1d50:	a4 fe       	sbrs	r10, 4
    1d52:	0f c0       	rjmp	.+30     	; 0x1d72 <vfprintf+0x2f8>
    1d54:	fe 01       	movw	r30, r28
    1d56:	e8 0d       	add	r30, r8
    1d58:	f1 1d       	adc	r31, r1
    1d5a:	80 81       	ld	r24, Z
    1d5c:	80 33       	cpi	r24, 0x30	; 48
    1d5e:	21 f4       	brne	.+8      	; 0x1d68 <vfprintf+0x2ee>
    1d60:	9a 2d       	mov	r25, r10
    1d62:	99 7e       	andi	r25, 0xE9	; 233
    1d64:	a9 2e       	mov	r10, r25
    1d66:	09 c0       	rjmp	.+18     	; 0x1d7a <vfprintf+0x300>
    1d68:	a2 fe       	sbrs	r10, 2
    1d6a:	06 c0       	rjmp	.+12     	; 0x1d78 <vfprintf+0x2fe>
    1d6c:	b3 94       	inc	r11
    1d6e:	b3 94       	inc	r11
    1d70:	04 c0       	rjmp	.+8      	; 0x1d7a <vfprintf+0x300>
    1d72:	8a 2d       	mov	r24, r10
    1d74:	86 78       	andi	r24, 0x86	; 134
    1d76:	09 f0       	breq	.+2      	; 0x1d7a <vfprintf+0x300>
    1d78:	b3 94       	inc	r11
    1d7a:	a3 fc       	sbrc	r10, 3
    1d7c:	11 c0       	rjmp	.+34     	; 0x1da0 <vfprintf+0x326>
    1d7e:	a0 fe       	sbrs	r10, 0
    1d80:	06 c0       	rjmp	.+12     	; 0x1d8e <vfprintf+0x314>
    1d82:	b2 14       	cp	r11, r2
    1d84:	88 f4       	brcc	.+34     	; 0x1da8 <vfprintf+0x32e>
    1d86:	28 0c       	add	r2, r8
    1d88:	92 2c       	mov	r9, r2
    1d8a:	9b 18       	sub	r9, r11
    1d8c:	0e c0       	rjmp	.+28     	; 0x1daa <vfprintf+0x330>
    1d8e:	b2 14       	cp	r11, r2
    1d90:	60 f4       	brcc	.+24     	; 0x1daa <vfprintf+0x330>
    1d92:	b6 01       	movw	r22, r12
    1d94:	80 e2       	ldi	r24, 0x20	; 32
    1d96:	90 e0       	ldi	r25, 0x00	; 0
    1d98:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <fputc>
    1d9c:	b3 94       	inc	r11
    1d9e:	f7 cf       	rjmp	.-18     	; 0x1d8e <vfprintf+0x314>
    1da0:	b2 14       	cp	r11, r2
    1da2:	18 f4       	brcc	.+6      	; 0x1daa <vfprintf+0x330>
    1da4:	2b 18       	sub	r2, r11
    1da6:	02 c0       	rjmp	.+4      	; 0x1dac <vfprintf+0x332>
    1da8:	98 2c       	mov	r9, r8
    1daa:	21 2c       	mov	r2, r1
    1dac:	a4 fe       	sbrs	r10, 4
    1dae:	10 c0       	rjmp	.+32     	; 0x1dd0 <vfprintf+0x356>
    1db0:	b6 01       	movw	r22, r12
    1db2:	80 e3       	ldi	r24, 0x30	; 48
    1db4:	90 e0       	ldi	r25, 0x00	; 0
    1db6:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <fputc>
    1dba:	a2 fe       	sbrs	r10, 2
    1dbc:	17 c0       	rjmp	.+46     	; 0x1dec <vfprintf+0x372>
    1dbe:	a1 fc       	sbrc	r10, 1
    1dc0:	03 c0       	rjmp	.+6      	; 0x1dc8 <vfprintf+0x34e>
    1dc2:	88 e7       	ldi	r24, 0x78	; 120
    1dc4:	90 e0       	ldi	r25, 0x00	; 0
    1dc6:	02 c0       	rjmp	.+4      	; 0x1dcc <vfprintf+0x352>
    1dc8:	88 e5       	ldi	r24, 0x58	; 88
    1dca:	90 e0       	ldi	r25, 0x00	; 0
    1dcc:	b6 01       	movw	r22, r12
    1dce:	0c c0       	rjmp	.+24     	; 0x1de8 <vfprintf+0x36e>
    1dd0:	8a 2d       	mov	r24, r10
    1dd2:	86 78       	andi	r24, 0x86	; 134
    1dd4:	59 f0       	breq	.+22     	; 0x1dec <vfprintf+0x372>
    1dd6:	a1 fe       	sbrs	r10, 1
    1dd8:	02 c0       	rjmp	.+4      	; 0x1dde <vfprintf+0x364>
    1dda:	8b e2       	ldi	r24, 0x2B	; 43
    1ddc:	01 c0       	rjmp	.+2      	; 0x1de0 <vfprintf+0x366>
    1dde:	80 e2       	ldi	r24, 0x20	; 32
    1de0:	a7 fc       	sbrc	r10, 7
    1de2:	8d e2       	ldi	r24, 0x2D	; 45
    1de4:	b6 01       	movw	r22, r12
    1de6:	90 e0       	ldi	r25, 0x00	; 0
    1de8:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <fputc>
    1dec:	89 14       	cp	r8, r9
    1dee:	38 f4       	brcc	.+14     	; 0x1dfe <vfprintf+0x384>
    1df0:	b6 01       	movw	r22, r12
    1df2:	80 e3       	ldi	r24, 0x30	; 48
    1df4:	90 e0       	ldi	r25, 0x00	; 0
    1df6:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <fputc>
    1dfa:	9a 94       	dec	r9
    1dfc:	f7 cf       	rjmp	.-18     	; 0x1dec <vfprintf+0x372>
    1dfe:	8a 94       	dec	r8
    1e00:	f3 01       	movw	r30, r6
    1e02:	e8 0d       	add	r30, r8
    1e04:	f1 1d       	adc	r31, r1
    1e06:	80 81       	ld	r24, Z
    1e08:	b6 01       	movw	r22, r12
    1e0a:	90 e0       	ldi	r25, 0x00	; 0
    1e0c:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <fputc>
    1e10:	81 10       	cpse	r8, r1
    1e12:	f5 cf       	rjmp	.-22     	; 0x1dfe <vfprintf+0x384>
    1e14:	22 20       	and	r2, r2
    1e16:	09 f4       	brne	.+2      	; 0x1e1a <vfprintf+0x3a0>
    1e18:	42 ce       	rjmp	.-892    	; 0x1a9e <vfprintf+0x24>
    1e1a:	b6 01       	movw	r22, r12
    1e1c:	80 e2       	ldi	r24, 0x20	; 32
    1e1e:	90 e0       	ldi	r25, 0x00	; 0
    1e20:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <fputc>
    1e24:	2a 94       	dec	r2
    1e26:	f6 cf       	rjmp	.-20     	; 0x1e14 <vfprintf+0x39a>
    1e28:	f6 01       	movw	r30, r12
    1e2a:	86 81       	ldd	r24, Z+6	; 0x06
    1e2c:	97 81       	ldd	r25, Z+7	; 0x07
    1e2e:	02 c0       	rjmp	.+4      	; 0x1e34 <vfprintf+0x3ba>
    1e30:	8f ef       	ldi	r24, 0xFF	; 255
    1e32:	9f ef       	ldi	r25, 0xFF	; 255
    1e34:	2b 96       	adiw	r28, 0x0b	; 11
    1e36:	e2 e1       	ldi	r30, 0x12	; 18
    1e38:	0c 94 1e 10 	jmp	0x203c	; 0x203c <__epilogue_restores__>

00001e3c <strnlen_P>:
    1e3c:	fc 01       	movw	r30, r24
    1e3e:	05 90       	lpm	r0, Z+
    1e40:	61 50       	subi	r22, 0x01	; 1
    1e42:	70 40       	sbci	r23, 0x00	; 0
    1e44:	01 10       	cpse	r0, r1
    1e46:	d8 f7       	brcc	.-10     	; 0x1e3e <strnlen_P+0x2>
    1e48:	80 95       	com	r24
    1e4a:	90 95       	com	r25
    1e4c:	8e 0f       	add	r24, r30
    1e4e:	9f 1f       	adc	r25, r31
    1e50:	08 95       	ret

00001e52 <strnlen>:
    1e52:	fc 01       	movw	r30, r24
    1e54:	61 50       	subi	r22, 0x01	; 1
    1e56:	70 40       	sbci	r23, 0x00	; 0
    1e58:	01 90       	ld	r0, Z+
    1e5a:	01 10       	cpse	r0, r1
    1e5c:	d8 f7       	brcc	.-10     	; 0x1e54 <strnlen+0x2>
    1e5e:	80 95       	com	r24
    1e60:	90 95       	com	r25
    1e62:	8e 0f       	add	r24, r30
    1e64:	9f 1f       	adc	r25, r31
    1e66:	08 95       	ret

00001e68 <fputc>:
    1e68:	0f 93       	push	r16
    1e6a:	1f 93       	push	r17
    1e6c:	cf 93       	push	r28
    1e6e:	df 93       	push	r29
    1e70:	fb 01       	movw	r30, r22
    1e72:	23 81       	ldd	r18, Z+3	; 0x03
    1e74:	21 fd       	sbrc	r18, 1
    1e76:	03 c0       	rjmp	.+6      	; 0x1e7e <fputc+0x16>
    1e78:	8f ef       	ldi	r24, 0xFF	; 255
    1e7a:	9f ef       	ldi	r25, 0xFF	; 255
    1e7c:	2c c0       	rjmp	.+88     	; 0x1ed6 <fputc+0x6e>
    1e7e:	22 ff       	sbrs	r18, 2
    1e80:	16 c0       	rjmp	.+44     	; 0x1eae <fputc+0x46>
    1e82:	46 81       	ldd	r20, Z+6	; 0x06
    1e84:	57 81       	ldd	r21, Z+7	; 0x07
    1e86:	24 81       	ldd	r18, Z+4	; 0x04
    1e88:	35 81       	ldd	r19, Z+5	; 0x05
    1e8a:	42 17       	cp	r20, r18
    1e8c:	53 07       	cpc	r21, r19
    1e8e:	44 f4       	brge	.+16     	; 0x1ea0 <fputc+0x38>
    1e90:	a0 81       	ld	r26, Z
    1e92:	b1 81       	ldd	r27, Z+1	; 0x01
    1e94:	9d 01       	movw	r18, r26
    1e96:	2f 5f       	subi	r18, 0xFF	; 255
    1e98:	3f 4f       	sbci	r19, 0xFF	; 255
    1e9a:	31 83       	std	Z+1, r19	; 0x01
    1e9c:	20 83       	st	Z, r18
    1e9e:	8c 93       	st	X, r24
    1ea0:	26 81       	ldd	r18, Z+6	; 0x06
    1ea2:	37 81       	ldd	r19, Z+7	; 0x07
    1ea4:	2f 5f       	subi	r18, 0xFF	; 255
    1ea6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ea8:	37 83       	std	Z+7, r19	; 0x07
    1eaa:	26 83       	std	Z+6, r18	; 0x06
    1eac:	14 c0       	rjmp	.+40     	; 0x1ed6 <fputc+0x6e>
    1eae:	8b 01       	movw	r16, r22
    1eb0:	ec 01       	movw	r28, r24
    1eb2:	fb 01       	movw	r30, r22
    1eb4:	00 84       	ldd	r0, Z+8	; 0x08
    1eb6:	f1 85       	ldd	r31, Z+9	; 0x09
    1eb8:	e0 2d       	mov	r30, r0
    1eba:	09 95       	icall
    1ebc:	89 2b       	or	r24, r25
    1ebe:	e1 f6       	brne	.-72     	; 0x1e78 <fputc+0x10>
    1ec0:	d8 01       	movw	r26, r16
    1ec2:	16 96       	adiw	r26, 0x06	; 6
    1ec4:	8d 91       	ld	r24, X+
    1ec6:	9c 91       	ld	r25, X
    1ec8:	17 97       	sbiw	r26, 0x07	; 7
    1eca:	01 96       	adiw	r24, 0x01	; 1
    1ecc:	17 96       	adiw	r26, 0x07	; 7
    1ece:	9c 93       	st	X, r25
    1ed0:	8e 93       	st	-X, r24
    1ed2:	16 97       	sbiw	r26, 0x06	; 6
    1ed4:	ce 01       	movw	r24, r28
    1ed6:	df 91       	pop	r29
    1ed8:	cf 91       	pop	r28
    1eda:	1f 91       	pop	r17
    1edc:	0f 91       	pop	r16
    1ede:	08 95       	ret

00001ee0 <__ultoa_invert>:
    1ee0:	fa 01       	movw	r30, r20
    1ee2:	aa 27       	eor	r26, r26
    1ee4:	28 30       	cpi	r18, 0x08	; 8
    1ee6:	51 f1       	breq	.+84     	; 0x1f3c <__ultoa_invert+0x5c>
    1ee8:	20 31       	cpi	r18, 0x10	; 16
    1eea:	81 f1       	breq	.+96     	; 0x1f4c <__ultoa_invert+0x6c>
    1eec:	e8 94       	clt
    1eee:	6f 93       	push	r22
    1ef0:	6e 7f       	andi	r22, 0xFE	; 254
    1ef2:	6e 5f       	subi	r22, 0xFE	; 254
    1ef4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ef6:	8f 4f       	sbci	r24, 0xFF	; 255
    1ef8:	9f 4f       	sbci	r25, 0xFF	; 255
    1efa:	af 4f       	sbci	r26, 0xFF	; 255
    1efc:	b1 e0       	ldi	r27, 0x01	; 1
    1efe:	3e d0       	rcall	.+124    	; 0x1f7c <__ultoa_invert+0x9c>
    1f00:	b4 e0       	ldi	r27, 0x04	; 4
    1f02:	3c d0       	rcall	.+120    	; 0x1f7c <__ultoa_invert+0x9c>
    1f04:	67 0f       	add	r22, r23
    1f06:	78 1f       	adc	r23, r24
    1f08:	89 1f       	adc	r24, r25
    1f0a:	9a 1f       	adc	r25, r26
    1f0c:	a1 1d       	adc	r26, r1
    1f0e:	68 0f       	add	r22, r24
    1f10:	79 1f       	adc	r23, r25
    1f12:	8a 1f       	adc	r24, r26
    1f14:	91 1d       	adc	r25, r1
    1f16:	a1 1d       	adc	r26, r1
    1f18:	6a 0f       	add	r22, r26
    1f1a:	71 1d       	adc	r23, r1
    1f1c:	81 1d       	adc	r24, r1
    1f1e:	91 1d       	adc	r25, r1
    1f20:	a1 1d       	adc	r26, r1
    1f22:	20 d0       	rcall	.+64     	; 0x1f64 <__ultoa_invert+0x84>
    1f24:	09 f4       	brne	.+2      	; 0x1f28 <__ultoa_invert+0x48>
    1f26:	68 94       	set
    1f28:	3f 91       	pop	r19
    1f2a:	2a e0       	ldi	r18, 0x0A	; 10
    1f2c:	26 9f       	mul	r18, r22
    1f2e:	11 24       	eor	r1, r1
    1f30:	30 19       	sub	r19, r0
    1f32:	30 5d       	subi	r19, 0xD0	; 208
    1f34:	31 93       	st	Z+, r19
    1f36:	de f6       	brtc	.-74     	; 0x1eee <__ultoa_invert+0xe>
    1f38:	cf 01       	movw	r24, r30
    1f3a:	08 95       	ret
    1f3c:	46 2f       	mov	r20, r22
    1f3e:	47 70       	andi	r20, 0x07	; 7
    1f40:	40 5d       	subi	r20, 0xD0	; 208
    1f42:	41 93       	st	Z+, r20
    1f44:	b3 e0       	ldi	r27, 0x03	; 3
    1f46:	0f d0       	rcall	.+30     	; 0x1f66 <__ultoa_invert+0x86>
    1f48:	c9 f7       	brne	.-14     	; 0x1f3c <__ultoa_invert+0x5c>
    1f4a:	f6 cf       	rjmp	.-20     	; 0x1f38 <__ultoa_invert+0x58>
    1f4c:	46 2f       	mov	r20, r22
    1f4e:	4f 70       	andi	r20, 0x0F	; 15
    1f50:	40 5d       	subi	r20, 0xD0	; 208
    1f52:	4a 33       	cpi	r20, 0x3A	; 58
    1f54:	18 f0       	brcs	.+6      	; 0x1f5c <__ultoa_invert+0x7c>
    1f56:	49 5d       	subi	r20, 0xD9	; 217
    1f58:	31 fd       	sbrc	r19, 1
    1f5a:	40 52       	subi	r20, 0x20	; 32
    1f5c:	41 93       	st	Z+, r20
    1f5e:	02 d0       	rcall	.+4      	; 0x1f64 <__ultoa_invert+0x84>
    1f60:	a9 f7       	brne	.-22     	; 0x1f4c <__ultoa_invert+0x6c>
    1f62:	ea cf       	rjmp	.-44     	; 0x1f38 <__ultoa_invert+0x58>
    1f64:	b4 e0       	ldi	r27, 0x04	; 4
    1f66:	a6 95       	lsr	r26
    1f68:	97 95       	ror	r25
    1f6a:	87 95       	ror	r24
    1f6c:	77 95       	ror	r23
    1f6e:	67 95       	ror	r22
    1f70:	ba 95       	dec	r27
    1f72:	c9 f7       	brne	.-14     	; 0x1f66 <__ultoa_invert+0x86>
    1f74:	00 97       	sbiw	r24, 0x00	; 0
    1f76:	61 05       	cpc	r22, r1
    1f78:	71 05       	cpc	r23, r1
    1f7a:	08 95       	ret
    1f7c:	9b 01       	movw	r18, r22
    1f7e:	ac 01       	movw	r20, r24
    1f80:	0a 2e       	mov	r0, r26
    1f82:	06 94       	lsr	r0
    1f84:	57 95       	ror	r21
    1f86:	47 95       	ror	r20
    1f88:	37 95       	ror	r19
    1f8a:	27 95       	ror	r18
    1f8c:	ba 95       	dec	r27
    1f8e:	c9 f7       	brne	.-14     	; 0x1f82 <__ultoa_invert+0xa2>
    1f90:	62 0f       	add	r22, r18
    1f92:	73 1f       	adc	r23, r19
    1f94:	84 1f       	adc	r24, r20
    1f96:	95 1f       	adc	r25, r21
    1f98:	a0 1d       	adc	r26, r0
    1f9a:	08 95       	ret

00001f9c <eeprom_read_dword>:
    1f9c:	a6 e1       	ldi	r26, 0x16	; 22
    1f9e:	b0 e0       	ldi	r27, 0x00	; 0
    1fa0:	44 e0       	ldi	r20, 0x04	; 4
    1fa2:	50 e0       	ldi	r21, 0x00	; 0
    1fa4:	0c 94 e2 0f 	jmp	0x1fc4	; 0x1fc4 <eeprom_read_blraw>

00001fa8 <eeprom_update_dword>:
    1fa8:	03 96       	adiw	r24, 0x03	; 3
    1faa:	27 2f       	mov	r18, r23
    1fac:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <eeprom_update_r18>
    1fb0:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <eeprom_update_byte>
    1fb4:	25 2f       	mov	r18, r21
    1fb6:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <eeprom_update_r18>
    1fba:	24 2f       	mov	r18, r20
    1fbc:	0c 94 f1 0f 	jmp	0x1fe2	; 0x1fe2 <eeprom_update_r18>

00001fc0 <eeprom_read_block>:
    1fc0:	dc 01       	movw	r26, r24
    1fc2:	cb 01       	movw	r24, r22

00001fc4 <eeprom_read_blraw>:
    1fc4:	fc 01       	movw	r30, r24
    1fc6:	f9 99       	sbic	0x1f, 1	; 31
    1fc8:	fe cf       	rjmp	.-4      	; 0x1fc6 <eeprom_read_blraw+0x2>
    1fca:	06 c0       	rjmp	.+12     	; 0x1fd8 <eeprom_read_blraw+0x14>
    1fcc:	f2 bd       	out	0x22, r31	; 34
    1fce:	e1 bd       	out	0x21, r30	; 33
    1fd0:	f8 9a       	sbi	0x1f, 0	; 31
    1fd2:	31 96       	adiw	r30, 0x01	; 1
    1fd4:	00 b4       	in	r0, 0x20	; 32
    1fd6:	0d 92       	st	X+, r0
    1fd8:	41 50       	subi	r20, 0x01	; 1
    1fda:	50 40       	sbci	r21, 0x00	; 0
    1fdc:	b8 f7       	brcc	.-18     	; 0x1fcc <eeprom_read_blraw+0x8>
    1fde:	08 95       	ret

00001fe0 <eeprom_update_byte>:
    1fe0:	26 2f       	mov	r18, r22

00001fe2 <eeprom_update_r18>:
    1fe2:	f9 99       	sbic	0x1f, 1	; 31
    1fe4:	fe cf       	rjmp	.-4      	; 0x1fe2 <eeprom_update_r18>
    1fe6:	92 bd       	out	0x22, r25	; 34
    1fe8:	81 bd       	out	0x21, r24	; 33
    1fea:	f8 9a       	sbi	0x1f, 0	; 31
    1fec:	01 97       	sbiw	r24, 0x01	; 1
    1fee:	00 b4       	in	r0, 0x20	; 32
    1ff0:	02 16       	cp	r0, r18
    1ff2:	39 f0       	breq	.+14     	; 0x2002 <eeprom_update_r18+0x20>
    1ff4:	1f ba       	out	0x1f, r1	; 31
    1ff6:	20 bd       	out	0x20, r18	; 32
    1ff8:	0f b6       	in	r0, 0x3f	; 63
    1ffa:	f8 94       	cli
    1ffc:	fa 9a       	sbi	0x1f, 2	; 31
    1ffe:	f9 9a       	sbi	0x1f, 1	; 31
    2000:	0f be       	out	0x3f, r0	; 63
    2002:	08 95       	ret

00002004 <__prologue_saves__>:
    2004:	2f 92       	push	r2
    2006:	3f 92       	push	r3
    2008:	4f 92       	push	r4
    200a:	5f 92       	push	r5
    200c:	6f 92       	push	r6
    200e:	7f 92       	push	r7
    2010:	8f 92       	push	r8
    2012:	9f 92       	push	r9
    2014:	af 92       	push	r10
    2016:	bf 92       	push	r11
    2018:	cf 92       	push	r12
    201a:	df 92       	push	r13
    201c:	ef 92       	push	r14
    201e:	ff 92       	push	r15
    2020:	0f 93       	push	r16
    2022:	1f 93       	push	r17
    2024:	cf 93       	push	r28
    2026:	df 93       	push	r29
    2028:	cd b7       	in	r28, 0x3d	; 61
    202a:	de b7       	in	r29, 0x3e	; 62
    202c:	ca 1b       	sub	r28, r26
    202e:	db 0b       	sbc	r29, r27
    2030:	0f b6       	in	r0, 0x3f	; 63
    2032:	f8 94       	cli
    2034:	de bf       	out	0x3e, r29	; 62
    2036:	0f be       	out	0x3f, r0	; 63
    2038:	cd bf       	out	0x3d, r28	; 61
    203a:	09 94       	ijmp

0000203c <__epilogue_restores__>:
    203c:	2a 88       	ldd	r2, Y+18	; 0x12
    203e:	39 88       	ldd	r3, Y+17	; 0x11
    2040:	48 88       	ldd	r4, Y+16	; 0x10
    2042:	5f 84       	ldd	r5, Y+15	; 0x0f
    2044:	6e 84       	ldd	r6, Y+14	; 0x0e
    2046:	7d 84       	ldd	r7, Y+13	; 0x0d
    2048:	8c 84       	ldd	r8, Y+12	; 0x0c
    204a:	9b 84       	ldd	r9, Y+11	; 0x0b
    204c:	aa 84       	ldd	r10, Y+10	; 0x0a
    204e:	b9 84       	ldd	r11, Y+9	; 0x09
    2050:	c8 84       	ldd	r12, Y+8	; 0x08
    2052:	df 80       	ldd	r13, Y+7	; 0x07
    2054:	ee 80       	ldd	r14, Y+6	; 0x06
    2056:	fd 80       	ldd	r15, Y+5	; 0x05
    2058:	0c 81       	ldd	r16, Y+4	; 0x04
    205a:	1b 81       	ldd	r17, Y+3	; 0x03
    205c:	aa 81       	ldd	r26, Y+2	; 0x02
    205e:	b9 81       	ldd	r27, Y+1	; 0x01
    2060:	ce 0f       	add	r28, r30
    2062:	d1 1d       	adc	r29, r1
    2064:	0f b6       	in	r0, 0x3f	; 63
    2066:	f8 94       	cli
    2068:	de bf       	out	0x3e, r29	; 62
    206a:	0f be       	out	0x3f, r0	; 63
    206c:	cd bf       	out	0x3d, r28	; 61
    206e:	ed 01       	movw	r28, r26
    2070:	08 95       	ret

00002072 <_exit>:
    2072:	f8 94       	cli

00002074 <__stop_program>:
    2074:	ff cf       	rjmp	.-2      	; 0x2074 <__stop_program>
